{"version":3,"file":"static/js/9936.78bcd75f.chunk.js","mappings":"0gBAUO,ICLDA,EAAuD,CAAEC,cAAe,Q,GCuDjEC,EAAA,GA7CT,CACAC,OAAQ,CAAC,OAAQ,OAAQ,SAAU,QAAS,UAE5CC,cAAe,SACfC,SAAU,GACVC,cAAe,GACfC,cAAe,GAEfC,OAAQ,CAAEC,OAAQ,QAClBC,UAAW,EACXC,gBAAiB,EACjBC,kBAAmB,EACnBC,QAAS,EACTC,cAAe,EACfC,gBAAiB,GAEjBC,YAAA,EACAC,kBAAmB,GACnBC,oBAAqB,CAAEC,KAAM,SAC7BC,UAAA,EACAC,gBAAiB,GACjBC,kBAAmB,CAAEH,KAAM,SAE3BI,UAAW,EACXC,gBAAiB,EACjBC,kBAAmB,EACnBC,WAAY,CAAEP,KAAM,eACpBQ,iBAAkB,EAClBC,uBAAwB,EACxBC,yBAA0B,EAC1BC,iBAAkB,CAAEX,KAAM,cAAeY,UAAW,CAAC,CAAC,SAAU,OAEhEC,aAAA,EACAC,aAAA,EACAC,QAAS,CAAC,EACVC,WAAY,CAAC,EACbC,SAAU,CAAC,EAEXC,eAAA,EACAC,sBAAuB,GACvBC,QChDuB,SAAAC,GAAA,IACvBC,EAAAD,EAAAE,MAAA,OAEAC,EAAAA,EAAAA,KAACC,EAAAA,GAAA,0BAC2BH,EAAMI,KAAKC,GACnCA,GAAIL,EAAMI,KAAKC,GACfC,YAAA,EACAC,MAAOP,EAAMO,OAAA,ED2CjBC,KAAM,QASNC,eDvDiB,SAAAV,GAAA,IACjBC,EAAAD,EAAAW,MAAAC,GAE0CC,EAAAA,EAAAA,MAAlCC,EAAAF,EAAAG,QAAiBC,EAAAJ,EAARK,OAEXC,GAAgBC,EAAAA,EAAAA,WAMnB,CACCC,EAAGnB,EAAMmB,EACTC,EAAGpB,EAAMoB,EACTC,OAAQrB,EAAMsB,KAAO,EACrBf,MAAOP,EAAMO,MACbgB,YAAavB,EAAMuB,YACnBP,OAAQD,EACRS,WAAYX,IAAA,OAIZX,EAAAA,EAAAA,KAACuB,EAAAA,SAAAA,OAAS,wBACgBzB,EAAMC,MAAMI,GAAA,IAAML,EAAMI,KAAKe,EACnDO,GAAIT,EAAcE,EAClBQ,GAAIV,EAAcG,EAClBH,GAAGW,EAAAA,EAAAA,IAAGX,EAAcI,QAAQ,SAAAtB,GAAA,OAAK8B,KAAKC,IAAI/B,EAAG,MAC7CgC,KAAMd,EAAcV,MACpByB,YAAaf,EAAcM,YAC3BU,OAAQjC,EAAMkC,YACdC,MAAO5E,GAAA,EC0BfuD,SAAA,EACAsB,aAAc,WEfL3E,EAAA,GAxCT,CACA4E,MAAO,SAEP3E,OAAQ,CAAC,OAAQ,OAAQ,SAAU,SAEnCC,cAAe,SACf2E,QAAS,EACT1E,SAAU,GAEVG,OAAQ,CAAEC,OAAQ,QAClBuE,UAAW,SACXC,YAAa,GACbC,kBAAmB,EACnBC,oBAAqB,IACrBnB,YAAa,EACboB,kBAAmB,EACnBC,oBAAqB,EACrBV,YAAa,CAAExD,KAAM,QAASY,UAAW,CAAC,CAAC,SAAU,MACrDuD,cAAe,EACfC,oBAAqB,EACrBC,sBAAuB,EAEvBxE,YAAA,EACAC,kBAAmB,GACnBC,oBAAqB,CAAEC,KAAM,QAASY,UAAW,CAAC,CAAC,SAAU,KAC7DX,UAAA,EACAC,gBAAiB,GACjBC,kBAAmB,CAAEH,KAAM,QAASY,UAAW,CAAC,CAAC,SAAU,KAE3DC,aAAA,EACAE,QAAS,CAAC,EACVC,WAAY,CAAC,EAEbE,eAAA,EACAC,sBAAuB,GACvBC,QCtCuB,SAAAC,GAAA,IAIvBC,EAAAD,EAAAE,MAAA,OAEAC,EAAAA,EAAAA,KAACC,EAAAA,GAAA,CAAaE,GAAIL,EAAMK,GAAIC,YAAA,EAAkBC,MAAOP,EAAMO,OAAA,EDkC3DC,KAAM,QASNwC,KAAM,GACNjB,KAAM,GACNjB,SAAA,EACAsB,aAAc,W,2GEElB,EAxDiB,WAEf,IAAMa,EAAS,CACb,CAAE9B,EAAG,MAAOC,EAAG,MAAO8B,KAAK,wCAC3B,CAAE/B,EAAG,MAAOC,EAAG,MAAO8B,KAAK,sCAC3B,CAAE/B,EAAG,KAAOC,EAAG,KAAO8B,KAAK,wCAC3B,CAAE/B,EAAG,MAAOC,EAAG,MAAO8B,KAAK,uCAG/B,OACIC,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACAC,EAAAA,EAAAA,MAACC,EAAAA,MAAK,CAAAF,SAAA,EACFF,EAAAA,EAAAA,KAACK,EAAAA,YAAW,CAAAH,UACRF,EAAAA,EAAAA,KAACM,EAAAA,KAAI,CAAAJ,UACDF,EAAAA,EAAAA,KAACO,EAAAA,KAAI,CAACC,GAAI,EAAGxB,MAAO,CAACyB,SAAS,IAAIP,UAC9BF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,mCAKhBF,EAAAA,EAAAA,KAACU,EAAAA,UAAS,CAAAR,UACNF,EAAAA,EAAAA,KAACW,EAAAA,EAAmB,CAACC,MAAM,MAAMC,OAAQ,IAAIX,UACzCC,EAAAA,EAAAA,MAACW,EAAAA,EAAY,CACXC,OAAQ,CACNC,IAAK,GACLC,MAAO,EACPC,OAAQ,GACRC,KAAM,IACNjB,SAAA,EAEFF,EAAAA,EAAAA,KAACoB,EAAAA,EAAa,KACdpB,EAAAA,EAAAA,KAACqB,EAAAA,EAAK,CAACC,KAAK,SAASC,QAAQ,IAAIxB,KAAK,kBAAkByB,KAAK,IAAIxC,MAAO,CAAEyB,SAAU,IAAKP,UACvFF,EAAAA,EAAAA,KAACyB,EAAAA,EAAK,CAACC,MAAQ,kBAAkBC,SAAU,SAASJ,QAAQ,IAAIvC,MAAO,CAAEyB,SAAU,SAGrFT,EAAAA,EAAAA,KAAC4B,EAAAA,EAAK,CAACN,KAAK,SAASC,QAAQ,IAAIxB,KAAK,oBAAoByB,KAAK,IAAIxC,MAAO,CAAEyB,SAAU,IAAKP,UACzFF,EAAAA,EAAAA,KAACyB,EAAAA,EAAK,CAACC,MAAQ,oBAAoBG,QAAS,GAAIC,MAAM,MAAMH,SAAS,OAAOJ,QAAQ,IAAIvC,MAAO,CAAEyB,SAAU,SAG7GT,EAAAA,EAAAA,KAAC+B,EAAAA,EAAO,CAACC,OAAQ,CAAEC,gBAAiB,UAEpC9B,EAAAA,EAAAA,MAAC+B,EAAAA,EAAO,CAACnC,KAAK,OAAO9C,KAAM6C,EAAQlB,KAAK,UAASsB,SAAA,EAC/CF,EAAAA,EAAAA,KAACmC,EAAAA,EAAS,CAACZ,QAAQ,OAAOI,SAAS,OAAOf,MAAO,IAAK5B,MAAO,CAACyB,SAAU,GAAI7B,KAAK,UAChFkB,EAAOsC,KAAI,SAACC,EAAOC,GAAK,OACvBtC,EAAAA,EAAAA,KAACuC,EAAAA,EAAI,CAAuB3D,KAAM,WAAU,QAAA4D,OAAzBF,GAEZ,kBAS7B,C","sources":["../node_modules/@nivo/bump/src/bump/compute.ts","../node_modules/@nivo/bump/src/bump/Point.tsx","../node_modules/@nivo/bump/src/bump/defaults.ts","../node_modules/@nivo/bump/src/bump/LineTooltip.tsx","../node_modules/@nivo/bump/src/area-bump/defaults.ts","../node_modules/@nivo/bump/src/area-bump/AreaTooltip.tsx","views/nivo/NivoBump.js"],"sourcesContent":["import { scalePoint } from 'd3-scale'\nimport { castPointScale } from '@nivo/scales'\nimport {\n    BumpDataProps,\n    BumpDatum,\n    BumpComputedSerie,\n    BumpSeriePoint,\n    BumpSerieExtraProps,\n} from './types'\n\nexport const computeSeries = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    width,\n    height,\n    data,\n    xPadding,\n    xOuterPadding,\n    yOuterPadding,\n}: {\n    width: number\n    height: number\n    data: BumpDataProps<Datum, ExtraProps>['data']\n    xPadding: number\n    xOuterPadding: number\n    yOuterPadding: number\n}) => {\n    const xValuesSet = new Set<Datum['x']>()\n    const yValuesSet = new Set<number>()\n\n    data.forEach(serie => {\n        serie.data.forEach(datum => {\n            xValuesSet.add(datum.x)\n            if (datum.y !== null) {\n                yValuesSet.add(datum.y)\n            }\n        })\n    })\n\n    const xValues: Datum['x'][] = Array.from(xValuesSet)\n    const xScale = castPointScale<Datum['x']>(\n        scalePoint<Datum['x']>().domain(xValues).range([0, width]).padding(xOuterPadding)\n    )\n\n    const yValues: number[] = Array.from(yValuesSet).sort((a, b) => a - b)\n    const yScale = castPointScale<number>(\n        scalePoint<number>().domain(yValues).range([0, height]).padding(yOuterPadding)\n    )\n\n    const linePointPadding = xScale.step() * Math.min(xPadding * 0.5, 0.5)\n\n    const series: Omit<BumpComputedSerie<Datum, ExtraProps>, 'color' | 'opacity' | 'lineWidth'>[] =\n        data.map(rawSerie => {\n            const serie: Omit<\n                BumpComputedSerie<Datum, ExtraProps>,\n                'color' | 'opacity' | 'lineWidth'\n            > = {\n                id: rawSerie.id,\n                data: rawSerie,\n                points: [],\n                linePoints: [],\n            }\n\n            rawSerie.data.forEach((datum, i) => {\n                let x = null\n                let y = null\n\n                if (datum.y !== null) {\n                    x = xScale(datum.x)!\n                    y = yScale(datum.y)!\n                }\n\n                const point: BumpSeriePoint<Datum, ExtraProps> = {\n                    id: `${rawSerie.id}.${i}`,\n                    serie: rawSerie,\n                    data: datum,\n                    x: x as number,\n                    y,\n                }\n                serie.points.push(point)\n\n                // only add pre transition point if the datum is not empty\n                if (point.x !== null) {\n                    if (i === 0) {\n                        serie.linePoints.push([0, point.y])\n                    } else {\n                        serie.linePoints.push([point.x - linePointPadding, point.y])\n                    }\n                }\n\n                serie.linePoints.push([point.x, point.y])\n\n                // only add post transition point if the datum is not empty\n                if (x !== null) {\n                    if (i === rawSerie.data.length - 1 && x) {\n                        serie.linePoints.push([width, point.y])\n                    } else {\n                        serie.linePoints.push([point.x + linePointPadding, point.y])\n                    }\n                }\n\n                // remove points having null coordinates\n                serie.points = serie.points.filter(point => point.x !== null)\n            })\n\n            return serie\n        })\n\n    return {\n        series,\n        xScale,\n        yScale,\n    }\n}\n","import { SVGAttributes } from 'react'\nimport { useSpring, animated, to } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { BumpDatum, BumpPoint, BumpSerieExtraProps } from './types'\n\nconst pointStyle: SVGAttributes<SVGCircleElement>['style'] = { pointerEvents: 'none' }\n\ninterface PointProps<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> {\n    point: BumpPoint<Datum, ExtraProps>\n}\n\nexport const Point = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    point,\n}: PointProps<Datum, ExtraProps>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring<{\n        x: number\n        y: number\n        radius: number\n        color: string\n        borderWidth: number\n    }>({\n        x: point.x,\n        y: point.y,\n        radius: point.size / 2,\n        color: point.color,\n        borderWidth: point.borderWidth,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.circle\n            data-testid={`point.${point.serie.id}.${point.data.x}`}\n            cx={animatedProps.x}\n            cy={animatedProps.y}\n            r={to(animatedProps.radius, v => Math.max(v, 0))}\n            fill={animatedProps.color}\n            strokeWidth={animatedProps.borderWidth}\n            stroke={point.borderColor}\n            style={pointStyle}\n        />\n    )\n}\n","import { ModernMotionProps } from '@nivo/core'\nimport { LineTooltip } from './LineTooltip'\nimport { Point } from './Point'\nimport { BumpCommonProps, BumpPointComponent, DefaultBumpDatum } from './types'\n\nconst commonDefaultProps: Omit<\n    BumpCommonProps<DefaultBumpDatum, Record<string, unknown>>,\n    | 'onMouseEnter'\n    | 'onMouseMove'\n    | 'onMouseLeave'\n    | 'onClick'\n    | 'margin'\n    | 'theme'\n    | 'axisRight'\n    | 'renderWrapper'\n> = {\n    layers: ['grid', 'axes', 'labels', 'lines', 'points'],\n\n    interpolation: 'smooth',\n    xPadding: 0.6,\n    xOuterPadding: 0.5,\n    yOuterPadding: 0.5,\n\n    colors: { scheme: 'nivo' },\n    lineWidth: 2,\n    activeLineWidth: 4,\n    inactiveLineWidth: 1,\n    opacity: 1,\n    activeOpacity: 1,\n    inactiveOpacity: 0.3,\n\n    startLabel: false,\n    startLabelPadding: 16,\n    startLabelTextColor: { from: 'color' },\n    endLabel: true,\n    endLabelPadding: 16,\n    endLabelTextColor: { from: 'color' },\n\n    pointSize: 6,\n    activePointSize: 8,\n    inactivePointSize: 4,\n    pointColor: { from: 'serie.color' },\n    pointBorderWidth: 0,\n    activePointBorderWidth: 0,\n    inactivePointBorderWidth: 0,\n    pointBorderColor: { from: 'serie.color', modifiers: [['darker', 1.4]] },\n\n    enableGridX: true,\n    enableGridY: true,\n    axisTop: {},\n    axisBottom: {},\n    axisLeft: {},\n\n    isInteractive: true,\n    defaultActiveSerieIds: [],\n    tooltip: LineTooltip,\n\n    role: 'img',\n}\n\nexport const bumpSvgDefaultProps: typeof commonDefaultProps & {\n    pointComponent: BumpPointComponent<DefaultBumpDatum, Record<string, unknown>>\n    animate: boolean\n    motionConfig: ModernMotionProps['motionConfig']\n} = {\n    ...commonDefaultProps,\n    pointComponent: Point,\n    animate: true,\n    motionConfig: 'gentle',\n}\n","import { BasicTooltip } from '@nivo/tooltip'\nimport { BumpComputedSerie, BumpDatum, BumpSerieExtraProps } from './types'\n\ninterface LineTooltipProps<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> {\n    serie: BumpComputedSerie<Datum, ExtraProps>\n}\n\nexport const LineTooltip = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    serie,\n}: LineTooltipProps<Datum, ExtraProps>) => (\n    <BasicTooltip\n        data-testid={`tooltip.${serie.data.id}`}\n        id={serie.data.id}\n        enableChip={true}\n        color={serie.color}\n    />\n)\n","import { ModernMotionProps, SvgDefsAndFill } from '@nivo/core'\nimport { AreaBumpCommonProps, AreaBumpComputedSerie, DefaultAreaBumpDatum } from './types'\nimport { AreaTooltip } from './AreaTooltip'\n\nconst commonDefaultProps: Omit<\n    AreaBumpCommonProps<DefaultAreaBumpDatum, Record<string, unknown>>,\n    | 'onMouseEnter'\n    | 'onMouseMove'\n    | 'onMouseLeave'\n    | 'onClick'\n    | 'margin'\n    | 'theme'\n    | 'renderWrapper'\n> = {\n    align: 'middle',\n\n    layers: ['grid', 'axes', 'labels', 'areas'],\n\n    interpolation: 'smooth',\n    spacing: 0,\n    xPadding: 0.6,\n\n    colors: { scheme: 'nivo' },\n    blendMode: 'normal',\n    fillOpacity: 0.8,\n    activeFillOpacity: 1,\n    inactiveFillOpacity: 0.15,\n    borderWidth: 1,\n    activeBorderWidth: 1,\n    inactiveBorderWidth: 0,\n    borderColor: { from: 'color', modifiers: [['darker', 0.4]] },\n    borderOpacity: 1,\n    activeBorderOpacity: 1,\n    inactiveBorderOpacity: 0,\n\n    startLabel: false,\n    startLabelPadding: 12,\n    startLabelTextColor: { from: 'color', modifiers: [['darker', 1]] },\n    endLabel: true,\n    endLabelPadding: 12,\n    endLabelTextColor: { from: 'color', modifiers: [['darker', 1]] },\n\n    enableGridX: true,\n    axisTop: {},\n    axisBottom: {},\n\n    isInteractive: true,\n    defaultActiveSerieIds: [],\n    tooltip: AreaTooltip,\n\n    role: 'img',\n}\n\nexport const areaBumpSvgDefaultProps: typeof commonDefaultProps &\n    SvgDefsAndFill<AreaBumpComputedSerie<DefaultAreaBumpDatum, Record<string, unknown>>> & {\n        animate: boolean\n        motionConfig: ModernMotionProps['motionConfig']\n    } = {\n    ...commonDefaultProps,\n    defs: [],\n    fill: [],\n    animate: true,\n    motionConfig: 'gentle',\n}\n","import { BasicTooltip } from '@nivo/tooltip'\nimport { AreaBumpDatum, AreaBumpComputedSerie, AreaBumpSerieExtraProps } from './types'\n\ninterface AreaTooltipProps<\n    Datum extends AreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps\n> {\n    serie: AreaBumpComputedSerie<Datum, ExtraProps>\n}\n\nexport const AreaTooltip = <\n    Datum extends AreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps\n>({\n    serie,\n}: AreaTooltipProps<Datum, ExtraProps>) => (\n    <BasicTooltip id={serie.id} enableChip={true} color={serie.color} />\n)\n","import React, { useState } from \"react\";\nimport PropTypes from 'prop-types'\nimport { CButton, CButtonGroup, CCard, CCardBody, CCardHeader, CCol, CHeader, CRow } from '@coreui/react'\nimport { ResponsiveBump, ResponsiveAreaBump } from '@nivo/bump'\nimport { ResponsiveContainer, ScatterChart, Scatter, XAxis, YAxis, CartesianGrid, Tooltip, Cell, Legend, Label, LabelList } from 'recharts';\n\nimport Select from \"react-select\"\n\nconst NivoBump = () => {\n\n  const data01 = [\n    { x: 12.35, y: 10.99, name:\"FCF Profitability US Large Cap Index\" },\n    { x: 15.37, y: 12.17, name:\"FCF Profitability US Mid Cap Index\" },\n    { x: 16.50, y: 15.30, name:\"FCF Profitability US Small Cap Index\"  },\n    { x: 14.91, y: 10.09, name:\"FCF Profitability Global ADR Index\" },\n  ];\n\nreturn(\n    <>\n    <CCard>\n        <CCardHeader>\n            <CRow>\n                <CCol sm={6} style={{fontSize:13}}>\n                    <h8>FCF Profitability Index</h8>\n                </CCol>\n            </CRow>\n            \n        </CCardHeader>\n        <CCardBody>\n            <ResponsiveContainer width=\"90%\" height={400}>\n                <ScatterChart\n                  margin={{\n                    top: 20 ,\n                    right: 0,\n                    bottom: 20,\n                    left: 10,\n                  }}\n                >\n                  <CartesianGrid />\n                  <XAxis type=\"number\" dataKey=\"x\" name=\"Annualized Risk\" unit=\"%\" style={{ fontSize: 12 }} >\n                    <Label value = \"Annualized Risk\" position =\"bottom\" dataKey=\"x\" style={{ fontSize: 12 }} ></Label>\n                  </XAxis> \n\n                  <YAxis type=\"number\" dataKey=\"y\" name=\"Annualized Return\" unit=\"%\" style={{ fontSize: 12 }} >\n                    <Label value = \"Annualized Return\" offset={-10} angle=\"-90\" position=\"left\" dataKey=\"y\" style={{ fontSize: 12 }} ></Label>\n                  </YAxis>\n\n                  <Tooltip cursor={{ strokeDasharray: '3 3' }} />\n                  \n                  <Scatter name=\"2023\" data={data01} fill=\"#8884d8\" >\n                    <LabelList dataKey=\"name\" position=\"left\" width={250} style={{fontSize: 13, fill:\"grey\" }} />\n                    {data01.map((entry, index) => (\n                      <Cell key={`cell-${index}`} fill={\"#8884d8\"}>\n                          \n                      </Cell>\n                    ))}\n                  </Scatter>\n                </ScatterChart>\n            </ResponsiveContainer>\n        </CCardBody>\n    </CCard>\n    </>\n)\n}\nexport default NivoBump"],"names":["j","pointerEvents","z","layers","interpolation","xPadding","xOuterPadding","yOuterPadding","colors","scheme","lineWidth","activeLineWidth","inactiveLineWidth","opacity","activeOpacity","inactiveOpacity","startLabel","startLabelPadding","startLabelTextColor","from","endLabel","endLabelPadding","endLabelTextColor","pointSize","activePointSize","inactivePointSize","pointColor","pointBorderWidth","activePointBorderWidth","inactivePointBorderWidth","pointBorderColor","modifiers","enableGridX","enableGridY","axisTop","axisBottom","axisLeft","isInteractive","defaultActiveSerieIds","tooltip","i","e","serie","I","O","data","id","enableChip","color","role","pointComponent","point","t","a","o","animate","n","config","r","k","x","y","radius","size","borderWidth","immediate","A","cx","cy","E","Math","max","fill","strokeWidth","stroke","borderColor","style","motionConfig","align","spacing","blendMode","fillOpacity","activeFillOpacity","inactiveFillOpacity","activeBorderWidth","inactiveBorderWidth","borderOpacity","activeBorderOpacity","inactiveBorderOpacity","defs","data01","name","_jsx","_Fragment","children","_jsxs","CCard","CCardHeader","CRow","CCol","sm","fontSize","CCardBody","ResponsiveContainer","width","height","ScatterChart","margin","top","right","bottom","left","CartesianGrid","XAxis","type","dataKey","unit","Label","value","position","YAxis","offset","angle","Tooltip","cursor","strokeDasharray","Scatter","LabelList","map","entry","index","Cell","concat"],"sourceRoot":""}