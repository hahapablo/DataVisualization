{"version":3,"file":"static/js/788.b314d1f1.chunk.js","mappings":"iMAEA,EAAwFA,EAAQ,OAAxFC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,WAAYC,EAA5B,EAA4BA,WAAYC,EAAxC,EAAwCA,UAAWC,EAAnD,EAAmDA,iBAAkBC,EAArE,EAAqEA,eAiDrE,IA9CA,YAAqC,IAAZC,EAAW,EAAXA,UACfC,EAAUC,OAAOC,KAAKH,EAAU,IA+BtC,OACI,UAACN,EAAD,CAAQU,UAAQ,EAACC,SAAO,EAAxB,WACI,SAACV,EAAD,WACI,SAACE,EAAD,UA/BDI,EAAQK,KAAK,SAACC,GACjB,OAAO,SAACT,EAAD,CAAkBU,MAAM,MAAxB,SACFD,EAAKE,eADgCF,WAkC1C,SAACX,EAAD,UA1BGI,EAAUM,KAAI,SAACI,GAClB,OACI,SAACb,EAAD,UAEOI,EAAQK,KAAK,SAACK,GACT,OAAO,SAACZ,EAAD,CAAgBS,MAAM,MAAtB,SACFE,EAAQC,IAD2BA,OAHpCD,a,kGCwOhC,UAtPgB,WACZ,OAAgCE,EAAAA,EAAAA,UAAS,SAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACA,GAAoCF,EAAAA,EAAAA,UAAS,OAA7C,eAAOG,EAAP,KAAmBC,EAAnB,KAEMC,EAAU,CACZ,CACE,GAAM,SACN,MAAS,SACT,MAAS,IACT,MAAS,sBAEX,CACE,GAAM,MACN,MAAS,MACT,MAAS,IACT,MAAS,qBAEX,CACE,GAAM,UACN,MAAS,UACT,MAAS,IACT,MAAS,sBAEX,CACE,GAAM,OACN,MAAS,OACT,MAAS,IACT,MAAS,qBAEX,CACE,GAAM,OACN,MAAS,OACT,MAAS,IACT,MAAS,uBAKTC,EAAkB,SAAC,GAAD,IAAGX,EAAH,EAAGA,KAAMY,EAAT,EAASA,QAAT,OACpB,SAAC,KAAD,CACIZ,KAAMA,EACNa,OAAQ,CAAEC,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,IAChDC,YAAyB,QAAZN,EAAoB,EAAI,GACrCO,SAAU,GACVC,aAAc,EACdC,wBAAyB,EACzBC,YAAa,EACbC,YAAa,CACTC,KAAM,QACNC,UAAW,CACP,CACI,SACA,MAIZC,uBAAwB,GACxBC,uBAAuB,UACvBC,uBAAwB,EACxBC,mBAAoB,CAAEL,KAAM,SAC5BM,mBAAoB,GACpBC,mBAAoB,CAChBP,KAAM,QACNC,UAAW,CACP,CACI,SACA,KAIZO,KAAM,CACF,CACIC,GAAI,OACJC,KAAM,cACNC,WAAY,UACZC,MAAO,2BACPC,KAAM,EACNC,QAAS,EACTC,SAAS,GAEb,CACIN,GAAI,QACJC,KAAM,eACNC,WAAY,UACZC,MAAO,2BACPI,UAAW,GACXC,UAAW,EACXC,QAAS,KAGjBC,KAAM,CACF,CACIC,MAAO,CACHX,GAAI,QAERA,GAAI,QAER,CACIW,MAAO,CACHX,GAAI,KAERA,GAAI,QAER,CACIW,MAAO,CACHX,GAAI,MAERA,GAAI,QAER,CACIW,MAAO,CACHX,GAAI,UAERA,GAAI,QAER,CACIW,MAAO,CACHX,GAAI,SAERA,GAAI,SAER,CACIW,MAAO,CACHX,GAAI,QAERA,GAAI,SAER,CACIW,MAAO,CACHX,GAAI,UAERA,GAAI,SAER,CACIW,MAAO,CACHX,GAAI,cAERA,GAAI,UAGZY,QAAS,CACL,CACIC,OAAQ,QACRC,UAAW,SACXC,SAAS,EACTC,WAAY,EACZC,WAAY,IACZC,aAAc,EACdC,UAAW,IACXC,WAAY,GACZC,cAAe,OACfC,cAAe,gBACfC,YAAa,EACbC,WAAY,GAEZC,QAAS,CACL,CACIC,GAAI,QACJC,MAAO,CACHN,cAAe,eAc3C,OACI,+BACA,UAAC,EAAAO,MAAD,YACI,SAAC,EAAAC,YAAD,WACI,UAAC,EAAAC,KAAD,YACI,SAAC,EAAAC,KAAD,CAAMC,GAAI,EAAV,UACA,yCAEA,SAAC,EAAAD,KAAD,CAAMC,GAAI,EAAV,UACI,SAAC,EAAAC,aAAD,UACK,CAAC,QAAS,QAAQnE,KAAK,SAACoE,GAAD,OACpB,SAAC,EAAAC,QAAD,CACAhC,MAAM,oBACNiC,OAAQF,IAAU7D,EAClBgE,QAAS,kBAAM/D,EAAY4D,IAH3B,SAKKA,GADAA,WAMjB,SAAC,EAAAH,KAAD,CAAMC,GAAI,EAAV,UACI,SAAC,EAAAC,aAAD,UACK,CAAC,MAAO,SAASnE,KAAK,SAACoE,GAAD,OACnB,SAAC,EAAAC,QAAD,CACAhC,MAAM,oBACNiC,OAAQF,IAAU3D,EAClB8D,QAAS,kBAAM7D,EAAc0D,IAH7B,SAKKA,GADAA,WAMjB,SAAC,EAAAH,KAAD,CAAMC,GAAI,KAaV,SAAC,EAAAD,KAAD,CAAMC,GAAI,UAgBlB,SAAC,EAAAM,UAAD,CAAWX,MAAO,CAACY,OAAO,SAA1B,SACkB,UAAblE,GACA,SAACK,EAAD,CAAiBX,KAAMU,EAASE,QAASJ,EAAWiE,iBACpD,SAAC,IAAD,CAAehF,UAAWiB","sources":["views/nivo/DataTable.js","views/nivo/NivoPie.js"],"sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types';\nconst { CTable, CTableHead, CTableBody, CTableRow, CTableHeaderCell, CTableDataCell } = require(\"@coreui/react\");\n\n\nfunction DataTableView( {tableData}){\n    const columns = Object.keys(tableData[0])\n\n    const tableHeaderData = () => {\n        return(columns.map( (data) => {\n            return <CTableHeaderCell scope=\"col\" key={data}>\n                {data.toUpperCase()}\n            </CTableHeaderCell>\n            }\n        ))\n    }    \n\n    const tableBodyData = () => {\n        return tableData.map((rowData) => {\n            return(\n                <CTableRow key={rowData}>\n                    {\n                       columns.map( (colId) => {\n                            return <CTableDataCell scope='col' key={colId}>\n                                {rowData[colId]}\n                            </CTableDataCell>\n                       }) \n                    }\n                </CTableRow>\n            )\n        })\n    }\n\n    DataTableView.propTypes = {\n        tableData: PropTypes.object.isRequired,\n    } \n\n    return(\n        <CTable bordered striped>\n            <CTableHead>\n                <CTableRow>\n                    {tableHeaderData()}\n                </CTableRow>\n            </CTableHead>\n            <CTableBody>\n                {tableBodyData(0)}\n            </CTableBody>\n        </CTable>\n    )\n\n}\nexport default DataTableView","import React, {useState} from 'react'\nimport PropTypes from 'prop-types'\nimport { ResponsivePie } from '@nivo/pie'\nimport { CButton, CButtonGroup, CCard, CCardBody, CCardHeader, CCol, CHeader, CRow } from '@coreui/react'\nimport DataTableView from './DataTable';\n\nconst NivoPie = () => {\n    const [viewType, setViewType] = useState('Graph')\n    const [pieOrDonut, setPieOrDonut] = useState('Pie')\n\n    const pieData = [\n        {\n          \"id\": \"elixir\",\n          \"label\": \"elixir\",\n          \"value\": 279,\n          \"color\": \"hsl(357, 70%, 50%)\"\n        },\n        {\n          \"id\": \"css\",\n          \"label\": \"css\",\n          \"value\": 562,\n          \"color\": \"hsl(52, 70%, 50%)\"\n        },\n        {\n          \"id\": \"haskell\",\n          \"label\": \"haskell\",\n          \"value\": 515,\n          \"color\": \"hsl(280, 70%, 50%)\"\n        },\n        {\n          \"id\": \"hack\",\n          \"label\": \"hack\",\n          \"value\": 148,\n          \"color\": \"hsl(31, 70%, 50%)\"\n        },\n        {\n          \"id\": \"sass\",\n          \"label\": \"sass\",\n          \"value\": 466,\n          \"color\": \"hsl(166, 70%, 50%)\"\n        }\n    ]\n\n\n    const MyResponsivePie = ({ data, pieType}) => (\n        <ResponsivePie\n            data={data}\n            margin={{ top: 40, right: 80, bottom: 80, left: 80 }}\n            innerRadius={pieType === 'pie' ? 0 : 0.5}\n            padAngle={0.7}\n            cornerRadius={3}\n            activeOuterRadiusOffset={8}\n            borderWidth={1}\n            borderColor={{\n                from: 'color',\n                modifiers: [\n                    [\n                        'darker',\n                        0.2\n                    ]\n                ]\n            }}\n            arcLinkLabelsSkipAngle={10}\n            arcLinkLabelsTextColor=\"#333333\"\n            arcLinkLabelsThickness={5}\n            arcLinkLabelsColor={{ from: 'color' }}\n            arcLabelsSkipAngle={10}\n            arcLabelsTextColor={{\n                from: 'color',\n                modifiers: [\n                    [\n                        'darker',\n                        2\n                    ]\n                ]\n            }}\n            defs={[\n                {\n                    id: 'dots',\n                    type: 'patternDots',\n                    background: 'inherit',\n                    color: 'rgba(255, 255, 255, 0.3)',\n                    size: 4,\n                    padding: 1,\n                    stagger: true\n                },\n                {\n                    id: 'lines',\n                    type: 'patternLines',\n                    background: 'inherit',\n                    color: 'rgba(255, 255, 255, 0.3)',\n                    rotation: -45,\n                    lineWidth: 6,\n                    spacing: 10\n                }\n            ]}\n            fill={[\n                {\n                    match: {\n                        id: 'ruby'\n                    },\n                    id: 'dots'\n                },\n                {\n                    match: {\n                        id: 'c'\n                    },\n                    id: 'dots'\n                },\n                {\n                    match: {\n                        id: 'go'\n                    },\n                    id: 'dots'\n                },\n                {\n                    match: {\n                        id: 'python'\n                    },\n                    id: 'dots'\n                },\n                {\n                    match: {\n                        id: 'scala'\n                    },\n                    id: 'lines'\n                },\n                {\n                    match: {\n                        id: 'lisp'\n                    },\n                    id: 'lines'\n                },\n                {\n                    match: {\n                        id: 'elixir'\n                    },\n                    id: 'lines'\n                },\n                {\n                    match: {\n                        id: 'javascript'\n                    },\n                    id: 'lines'\n                }\n            ]}\n            legends={[\n                {\n                    anchor: 'right',\n                    direction: 'column',\n                    justify: false,\n                    translateX: 0,\n                    translateY: 150, //56\n                    itemsSpacing: 0,\n                    itemWidth: 100,\n                    itemHeight: 26,\n                    itemTextColor: '#999',\n                    itemDirection: 'left-to-right',\n                    itemOpacity: 1,\n                    symbolSize: 18,\n                    // symbolShape: 'circle',\n                    effects: [\n                        {\n                            on: 'hover',\n                            style: {\n                                itemTextColor: '#000'\n                            }\n                        }\n                    ]\n                }\n            ]}\n        />\n    )\n\n    MyResponsivePie.propTypes = {\n        data: PropTypes.object.isRequired,\n        pieType: PropTypes.bool.isRequired\n    } \n\n    return(\n        <>\n        <CCard>\n            <CCardHeader>\n                <CRow>\n                    <CCol sm={6}>\n                    <h4>Pie Graph</h4>\n                    </CCol>\n                    <CCol sm={3}>\n                        <CButtonGroup>\n                            {['Graph', 'Data'].map( (value) => (\n                                <CButton \n                                color='outline-secondary'\n                                active={value === viewType}\n                                onClick={() => setViewType(value)}\n                                key={value}>\n                                    {value}\n                                </CButton>\n                            ))}\n                        </CButtonGroup>\n                    </CCol>\n                    <CCol sm={3}>\n                        <CButtonGroup>\n                            {['Pie', 'Donut'].map( (value) => (\n                                <CButton \n                                color='outline-secondary'\n                                active={value === pieOrDonut}\n                                onClick={() => setPieOrDonut(value)}\n                                key={value}>\n                                    {value}\n                                </CButton>\n                            ))}\n                        </CButtonGroup>\n                    </CCol>                    \n                    <CCol sm={3}>\n                        {/* <CButtonGroup>\n                            {['horizontal', 'vertical'].map( (value) => (\n                                <CButton \n                                color='outline-secondary'\n                                active={value === vertOrHor}\n                                onClick={() => setVertOrHor(value.toLowerCase())}\n                                key={value}>\n                                    {value}\n                                </CButton>\n                            ))}\n                        </CButtonGroup> */}\n                    </CCol>\n                    <CCol sm={3}>\n                        {/* <CButtonGroup>\n                            {['horizontal', 'vertical'].map( (value) => (\n                                <CButton \n                                color='outline-secondary'\n                                active={value === vertOrHor}\n                                onClick={() => setVertOrHor(value.toLowerCase())}\n                                key={value}>\n                                    {value}\n                                </CButton>\n                            ))}\n                        </CButtonGroup> */}\n                    </CCol>\n                </CRow>\n                \n            </CCardHeader>\n            <CCardBody style={{height:'600px'}}>\n                {viewType === 'Graph'\n                ?<MyResponsivePie data={pieData} pieType={pieOrDonut.toLowerCase()} />\n                :<DataTableView tableData={pieData} />\n                }\n            </CCardBody>\n        </CCard>\n        </>\n    )\n}\nexport default NivoPie\n"],"names":["require","CTable","CTableHead","CTableBody","CTableRow","CTableHeaderCell","CTableDataCell","tableData","columns","Object","keys","bordered","striped","map","data","scope","toUpperCase","rowData","colId","useState","viewType","setViewType","pieOrDonut","setPieOrDonut","pieData","MyResponsivePie","pieType","margin","top","right","bottom","left","innerRadius","padAngle","cornerRadius","activeOuterRadiusOffset","borderWidth","borderColor","from","modifiers","arcLinkLabelsSkipAngle","arcLinkLabelsTextColor","arcLinkLabelsThickness","arcLinkLabelsColor","arcLabelsSkipAngle","arcLabelsTextColor","defs","id","type","background","color","size","padding","stagger","rotation","lineWidth","spacing","fill","match","legends","anchor","direction","justify","translateX","translateY","itemsSpacing","itemWidth","itemHeight","itemTextColor","itemDirection","itemOpacity","symbolSize","effects","on","style","CCard","CCardHeader","CRow","CCol","sm","CButtonGroup","value","CButton","active","onClick","CCardBody","height","toLowerCase"],"sourceRoot":""}