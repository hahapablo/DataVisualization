{"version":3,"file":"static/js/7890.7cba4af3.chunk.js","mappings":"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","sources":["views/nivo/ColorSchemeOptions.js","views/nivo/NivoBullet.js"],"sourcesContent":["export const SchemeOptions = [\n    {value: 'nivo', label: 'Nivo', colors: ['#ff0000', '#234535']},\n    {value: 'reds', label: 'Reds', colors: ['#00FF00','#236456']},\n    {value: 'blues', label: 'Blues', colors: ['#00FFFF', '#572535']},\n    {value: 'spectral', label: 'Spectral', colors: ['#0FFFF0', '#765436']},\n    {value: 'accent', label: 'Accent', colors: ['#11FF22', '#124535']},\n    {value: 'paired', label: 'Paired', colors: ['#FF2344', '#875797']},\n]\n","import React, {useState} from 'react'\nimport PropTypes from 'prop-types'\nimport { ResponsiveBullet } from \"@nivo/bullet\";\nimport { CButton, CButtonGroup, CCard, CCardBody, CCardHeader, CCol, CHeader, CRow } from '@coreui/react'\nimport {SchemeOptions} from './ColorSchemeOptions'\nimport Select from \"react-select\"\n\nconst NivoBullet = () => {\n    const [colorScheme, setColorScheme] = useState('spectral')\n\n    const bulletData = [\n        {\n          \"id\": \"temp.\",\n          \"ranges\": [\n            6,\n            11,\n            84,\n            0,\n            120\n          ],\n          \"measures\": [\n            79\n          ],\n          \"markers\": [\n            85\n          ]\n        },\n        {\n          \"id\": \"power\",\n          \"ranges\": [\n            1.7539488226374675,\n            0.07411831985925406,\n            1.67694676808163,\n            0,\n            2\n          ],\n          \"measures\": [\n            0.40276831869437024,\n            1.9303801399960938\n          ],\n          \"markers\": [\n            1.3253535190186139\n          ]\n        },\n        {\n          \"id\": \"volume\",\n          \"ranges\": [\n            56,\n            1,\n            38,\n            16,\n            3,\n            12,\n            0,\n            60\n          ],\n          \"measures\": [\n            20\n          ],\n          \"markers\": [\n            56\n          ]\n        },\n        {\n          \"id\": \"cost\",\n          \"ranges\": [\n            235840,\n            3236,\n            303703,\n            0,\n            500000\n          ],\n          \"measures\": [\n            128230,\n            390596\n          ],\n          \"markers\": [\n            417806\n          ]\n        },\n        {\n          \"id\": \"revenue\",\n          \"ranges\": [\n            9,\n            0,\n            3,\n            0,\n            9\n          ],\n          \"measures\": [\n            6\n          ],\n          \"markers\": [\n            5.919910146123294,\n            6.352503421611037\n          ]\n        }\n    ]\n\n    const MyResponsiveBullet = ({ data, colorScheme}) => (\n        <ResponsiveBullet\n            data={data}\n            margin={{ top: 50, right: 90, bottom: 50, left: 90 }}\n            spacing={46}\n            titleAlign=\"start\"\n            titleOffsetX={-70}\n            measureSize={0.2}\n            rangeColors={colorScheme}\n        />\n    )\n    MyResponsiveBullet.propTypes = {\n        data: PropTypes.object.isRequired,\n        colorScheme: PropTypes.string.isRequired,\n    } \n\n    const formatSelectOptions = ({value, label, colors}) => (\n        <div style={{display: 'flex'}}>\n            <div style={{minWidth:'80px'}}>{label}</div>\n            <div style={{alignItems:'end'}}>\n                {\n                    colors.map( (colorValue) => {\n                        return(\n                            <span key={colorValue} style={{backgroundColor:colorValue}}>\n                                &nbsp;&nbsp;\n                            </span>\n                        )\n                    })\n                }\n            </div>\n        </div>\n    )\n\n    const handleChange = (selectedOption) => {\n        setColorScheme(selectedOption.value)\n    }\n\n    const CustomSelectOptions = () => (\n        <Select\n            formatOptionLabel={formatSelectOptions}\n            defaultValue={Object.values(SchemeOptions)[0]}\n            options={Object.values(SchemeOptions)}\n            onChange={handleChange}\n        />\n    )\n\n\n    return(\n        <>\n            <CCard>\n                <CCardHeader>\n                    <CRow>\n                        <CCol sm={6}>\n                        <h4>Bullet Graph</h4>\n                        </CCol>\n                        <CCol sm={3}>\n                            {/* <CButtonGroup>\n                                {['horizontal', 'vertical'].map( (value) => (\n                                    <CButton \n                                    color='outline-secondary'\n                                    active={value === vertOrHor}\n                                    onClick={() => setVertOrHor(value.toLowerCase())}\n                                    key={value}>\n                                        {value}\n                                    </CButton>\n                                ))}\n                            </CButtonGroup> */}\n                        </CCol>\n                        <CCol sm={3}>\n                            <CustomSelectOptions />\n                        </CCol>\n                    </CRow>                \n                </CCardHeader>\n                <CCardBody style={{height:'600px'}}>\n                    <MyResponsiveBullet \n                        colorScheme={colorScheme}\n                        data={bulletData} />\n                </CCardBody>    \n            </CCard>  \n        </>\n    )\n\n}\nexport default NivoBullet"],"names":["SchemeOptions","value","label","colors","_useState","useState","_useState2","_slicedToArray","colorScheme","setColorScheme","MyResponsiveBullet","_ref","data","_jsx","ResponsiveBullet","margin","top","right","bottom","left","spacing","titleAlign","titleOffsetX","measureSize","rangeColors","formatSelectOptions","_ref2","_jsxs","style","display","children","minWidth","alignItems","map","colorValue","backgroundColor","handleChange","selectedOption","CustomSelectOptions","Select","formatOptionLabel","defaultValue","Object","values","options","onChange","_Fragment","CCard","CCardHeader","CRow","CCol","sm","CCardBody","height"],"sourceRoot":""}