{"version":3,"file":"static/js/3126.315acebf.chunk.js","mappings":"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","sources":["../node_modules/@nivo/legends/src/svg/symbols/SymbolTriangle.tsx","../node_modules/@nivo/legends/src/compute.ts","../node_modules/@nivo/legends/src/svg/LegendSvgItem.tsx","../node_modules/@nivo/legends/src/svg/symbols/SymbolCircle.tsx","../node_modules/@nivo/legends/src/svg/symbols/SymbolDiamond.tsx","../node_modules/@nivo/legends/src/svg/symbols/SymbolSquare.tsx","../node_modules/@nivo/legends/src/svg/LegendSvg.tsx","../node_modules/@nivo/legends/src/svg/BoxLegendSvg.tsx","../node_modules/@nivo/legends/src/canvas.ts","../node_modules/@nivo/legends/src/props.ts"],"sourcesContent":["import { SymbolProps } from './types'\n\nexport const SymbolTriangle = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <g transform={`translate(${x},${y})`}>\n            <path\n                d={`\n                M${size / 2} 0\n                L${size} ${size}\n                L0 ${size}\n                L${size / 2} 0\n            `}\n                fill={fill}\n                opacity={opacity}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                style={{\n                    pointerEvents: 'none',\n                }}\n            />\n        </g>\n    )\n}\n","import { scaleLinear } from 'd3-scale'\nimport { getValueFormatter } from '@nivo/core'\nimport { computeContinuousColorScaleColorStops } from '@nivo/colors'\nimport {\n    BoxLegendSvgProps,\n    ContinuousColorsLegendProps,\n    LegendAnchor,\n    LegendItemDirection,\n} from './types'\nimport { continuousColorsLegendDefaults } from './defaults'\n\nconst isObject = <T>(item: unknown): item is T =>\n    typeof item === 'object' && !Array.isArray(item) && item !== null\n\nconst zeroPadding = {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n}\n\nexport const computeDimensions = ({\n    direction,\n    itemsSpacing,\n    padding: _padding,\n    itemCount,\n    itemWidth,\n    itemHeight,\n}: Pick<BoxLegendSvgProps, 'direction' | 'padding'> &\n    Record<'itemsSpacing' | 'itemCount' | 'itemWidth' | 'itemHeight', number>) => {\n    if (typeof _padding !== 'number' && !isObject(_padding)) {\n        throw new Error('Invalid property padding, must be one of: number, object')\n    }\n\n    const padding =\n        typeof _padding === 'number'\n            ? {\n                  top: _padding,\n                  right: _padding,\n                  bottom: _padding,\n                  left: _padding,\n              }\n            : {\n                  ...zeroPadding,\n                  ..._padding,\n              }\n\n    const horizontalPadding = padding.left + padding.right\n    const verticalPadding = padding.top + padding.bottom\n    let width = itemWidth + horizontalPadding\n    let height = itemHeight + verticalPadding\n    const spacing = (itemCount - 1) * itemsSpacing\n    if (direction === 'row') {\n        width = itemWidth * itemCount + spacing + horizontalPadding\n    } else if (direction === 'column') {\n        height = itemHeight * itemCount + spacing + verticalPadding\n    }\n\n    return { width, height, padding }\n}\n\nexport const computePositionFromAnchor = ({\n    anchor,\n    translateX,\n    translateY,\n    containerWidth,\n    containerHeight,\n    width,\n    height,\n}: { anchor: LegendAnchor } & Record<\n    'translateX' | 'translateY' | 'containerWidth' | 'containerHeight' | 'width' | 'height',\n    number\n>) => {\n    let x = translateX\n    let y = translateY\n\n    switch (anchor) {\n        case 'top':\n            x += (containerWidth - width) / 2\n            break\n\n        case 'top-right':\n            x += containerWidth - width\n            break\n\n        case 'right':\n            x += containerWidth - width\n            y += (containerHeight - height) / 2\n            break\n\n        case 'bottom-right':\n            x += containerWidth - width\n            y += containerHeight - height\n            break\n\n        case 'bottom':\n            x += (containerWidth - width) / 2\n            y += containerHeight - height\n            break\n\n        case 'bottom-left':\n            y += containerHeight - height\n            break\n\n        case 'left':\n            y += (containerHeight - height) / 2\n            break\n\n        case 'center':\n            x += (containerWidth - width) / 2\n            y += (containerHeight - height) / 2\n            break\n    }\n\n    return { x, y }\n}\n\nexport const computeItemLayout = ({\n    direction,\n    justify,\n    symbolSize,\n    symbolSpacing,\n    width,\n    height,\n}: {\n    direction: LegendItemDirection\n    justify: boolean\n} & Record<'symbolSize' | 'symbolSpacing' | 'width' | 'height', number>) => {\n    let symbolX\n    let symbolY\n\n    let labelX\n    let labelY\n    let labelAnchor: 'start' | 'middle' | 'end'\n    let labelAlignment: 'alphabetic' | 'central' | 'text-before-edge'\n\n    switch (direction) {\n        case 'left-to-right':\n            symbolX = 0\n            symbolY = (height - symbolSize) / 2\n\n            labelY = height / 2\n            labelAlignment = 'central'\n            if (justify) {\n                labelX = width\n                labelAnchor = 'end'\n            } else {\n                labelX = symbolSize + symbolSpacing\n                labelAnchor = 'start'\n            }\n            break\n\n        case 'right-to-left':\n            symbolX = width - symbolSize\n            symbolY = (height - symbolSize) / 2\n\n            labelY = height / 2\n            labelAlignment = 'central'\n            if (justify) {\n                labelX = 0\n                labelAnchor = 'start'\n            } else {\n                labelX = width - symbolSize - symbolSpacing\n                labelAnchor = 'end'\n            }\n            break\n\n        case 'top-to-bottom':\n            symbolX = (width - symbolSize) / 2\n            symbolY = 0\n\n            labelX = width / 2\n\n            labelAnchor = 'middle'\n            if (justify) {\n                labelY = height\n                labelAlignment = 'alphabetic'\n            } else {\n                labelY = symbolSize + symbolSpacing\n                labelAlignment = 'text-before-edge'\n            }\n            break\n\n        case 'bottom-to-top':\n            symbolX = (width - symbolSize) / 2\n            symbolY = height - symbolSize\n\n            labelX = width / 2\n            labelAnchor = 'middle'\n            if (justify) {\n                labelY = 0\n                labelAlignment = 'text-before-edge'\n            } else {\n                labelY = height - symbolSize - symbolSpacing\n                labelAlignment = 'alphabetic'\n            }\n            break\n    }\n\n    return {\n        symbolX,\n        symbolY,\n        labelX,\n        labelY,\n        labelAnchor,\n        labelAlignment,\n    }\n}\n\nexport const computeContinuousColorsLegend = ({\n    scale,\n    ticks,\n    length = continuousColorsLegendDefaults.length,\n    thickness = continuousColorsLegendDefaults.thickness,\n    direction = continuousColorsLegendDefaults.direction,\n    tickPosition = continuousColorsLegendDefaults.tickPosition,\n    tickSize = continuousColorsLegendDefaults.tickSize,\n    tickSpacing = continuousColorsLegendDefaults.tickSpacing,\n    tickOverlap = continuousColorsLegendDefaults.tickOverlap,\n    tickFormat = continuousColorsLegendDefaults.tickFormat,\n    title,\n    titleAlign = continuousColorsLegendDefaults.titleAlign,\n    titleOffset = continuousColorsLegendDefaults.titleOffset,\n}: ContinuousColorsLegendProps) => {\n    // left to right for `row`, bottom to top for `column`\n    const domain = direction === 'column' ? [...scale.domain()].reverse() : scale.domain()\n\n    const positionScale = scaleLinear().domain(domain)\n    if (domain.length === 2) {\n        // sequential, quantize\n        positionScale.range([0, length])\n    } else if (domain.length === 3) {\n        // diverging\n        positionScale.range([0, length / 2, length])\n    }\n\n    let values: number[]\n    if ('thresholds' in scale) {\n        // quantize\n        values = [domain[0], ...scale.thresholds(), domain[1]]\n    } else {\n        // sequential, diverging\n        values = Array.isArray(ticks) ? ticks : (scale as any).ticks(ticks)\n    }\n\n    const colorStops = computeContinuousColorScaleColorStops(scale, 32)\n\n    const formatValue = getValueFormatter(tickFormat)\n\n    const computedTicks: {\n        x1: number\n        y1: number\n        x2: number\n        y2: number\n        text: string\n        textX: number\n        textY: number\n        textHorizontalAlign: 'start' | 'middle' | 'end'\n        textVerticalAlign: 'alphabetic' | 'central' | 'hanging'\n    }[] = []\n\n    let width: number\n    let height: number\n\n    const gradientX1 = 0\n    let gradientY1 = 0\n    let gradientX2 = 0\n    const gradientY2 = 0\n\n    let titleX: number\n    let titleY: number\n    let titleRotation: number\n    let titleVerticalAlign: 'alphabetic' | 'hanging'\n\n    if (direction === 'row') {\n        width = length\n        height = thickness\n\n        gradientX2 = 1\n\n        let y1: number\n        let y2: number\n\n        let textY: number\n        const textHorizontalAlign = 'middle'\n        let textVerticalAlign: 'alphabetic' | 'hanging'\n\n        titleRotation = 0\n        if (titleAlign === 'start') {\n            titleX = 0\n        } else if (titleAlign === 'middle') {\n            titleX = length / 2\n        } else {\n            titleX = length\n        }\n\n        if (tickPosition === 'before') {\n            y1 = -tickSize\n            y2 = tickOverlap ? thickness : 0\n\n            textY = -tickSize - tickSpacing\n            textVerticalAlign = 'alphabetic'\n\n            titleY = thickness + titleOffset\n            titleVerticalAlign = 'hanging'\n        } else {\n            y1 = tickOverlap ? 0 : thickness\n            y2 = thickness + tickSize\n\n            textY = y2 + tickSpacing\n            textVerticalAlign = 'hanging'\n\n            titleY = -titleOffset\n            titleVerticalAlign = 'alphabetic'\n        }\n\n        values.forEach(value => {\n            const x = positionScale(value)\n\n            computedTicks.push({\n                x1: x,\n                y1,\n                x2: x,\n                y2,\n                text: formatValue(value),\n                textX: x,\n                textY,\n                textHorizontalAlign,\n                textVerticalAlign,\n            })\n        })\n    } else {\n        width = thickness\n        height = length\n\n        gradientY1 = 1\n\n        let x1: number\n        let x2: number\n\n        let textX: number\n        let textHorizontalAlign: 'start' | 'end'\n        const textVerticalAlign = 'central'\n\n        titleRotation = -90\n        if (titleAlign === 'start') {\n            titleY = length\n        } else if (titleAlign === 'middle') {\n            titleY = length / 2\n        } else {\n            titleY = 0\n        }\n\n        if (tickPosition === 'before') {\n            x1 = -tickSize\n            x2 = tickOverlap ? thickness : 0\n\n            textX = x1 - tickSpacing\n            textHorizontalAlign = 'end'\n\n            titleX = thickness + titleOffset\n            titleVerticalAlign = 'hanging'\n        } else {\n            x1 = tickOverlap ? 0 : thickness\n            x2 = thickness + tickSize\n\n            textX = x2 + tickSpacing\n            textHorizontalAlign = 'start'\n\n            titleX = -titleOffset\n            titleVerticalAlign = 'alphabetic'\n        }\n\n        values.forEach(value => {\n            const y = positionScale(value)\n\n            computedTicks.push({\n                x1,\n                y1: y,\n                x2,\n                y2: y,\n                text: formatValue(value),\n                textX,\n                textY: y,\n                textHorizontalAlign,\n                textVerticalAlign,\n            })\n        })\n    }\n\n    return {\n        width,\n        height,\n        gradientX1,\n        gradientY1,\n        gradientX2,\n        gradientY2,\n        colorStops,\n        ticks: computedTicks,\n        titleText: title,\n        titleX,\n        titleY,\n        titleRotation,\n        titleHorizontalAlign: titleAlign,\n        titleVerticalAlign,\n    }\n}\n","import { useState, useCallback } from 'react'\nimport * as React from 'react'\nimport { useTheme } from '@nivo/core'\nimport { LegendSvgItemProps } from '../types'\nimport { computeItemLayout } from '../compute'\nimport { SymbolCircle, SymbolDiamond, SymbolSquare, SymbolTriangle } from './symbols'\n\ntype Style = Partial<{\n    itemBackground: string\n    itemOpacity: number\n    itemTextColor: string\n    symbolBorderColor: string\n    symbolBorderWidth: number\n    symbolSize: number\n}>\n\nconst symbolByShape = {\n    circle: SymbolCircle,\n    diamond: SymbolDiamond,\n    square: SymbolSquare,\n    triangle: SymbolTriangle,\n}\n\nexport const LegendSvgItem = ({\n    x,\n    y,\n    width,\n    height,\n    data,\n    direction = 'left-to-right',\n    justify = false,\n    textColor,\n    background = 'transparent',\n    opacity = 1,\n\n    symbolShape = 'square',\n    symbolSize = 16,\n    symbolSpacing = 8,\n    symbolBorderWidth = 0,\n    symbolBorderColor = 'transparent',\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n\n    effects,\n}: LegendSvgItemProps) => {\n    const [style, setStyle] = useState<Style>({})\n    const theme = useTheme()\n\n    const handleMouseEnter = useCallback(\n        (event: React.MouseEvent<SVGRectElement>) => {\n            if (effects) {\n                const applyEffects = effects.filter(({ on }) => on === 'hover')\n                const style = applyEffects.reduce(\n                    (acc, effect) => ({\n                        ...acc,\n                        ...effect.style,\n                    }),\n                    {}\n                )\n                setStyle(style)\n            }\n\n            onMouseEnter?.(data, event)\n        },\n        [onMouseEnter, data, effects]\n    )\n    const handleMouseLeave = useCallback(\n        (event: React.MouseEvent<SVGRectElement>) => {\n            if (effects) {\n                const applyEffects = effects.filter(({ on }) => on !== 'hover')\n                const style = applyEffects.reduce(\n                    (acc, effect) => ({\n                        ...acc,\n                        ...effect.style,\n                    }),\n                    {}\n                )\n                setStyle(style)\n            }\n\n            onMouseLeave?.(data, event)\n        },\n        [onMouseLeave, data, effects]\n    )\n\n    const { symbolX, symbolY, labelX, labelY, labelAnchor, labelAlignment } = computeItemLayout({\n        direction,\n        justify,\n        symbolSize: style.symbolSize ?? symbolSize,\n        symbolSpacing,\n        width,\n        height,\n    })\n\n    const isInteractive = [onClick, onMouseEnter, onMouseLeave, toggleSerie].some(\n        handler => handler !== undefined\n    )\n\n    const SymbolShape = typeof symbolShape === 'function' ? symbolShape : symbolByShape[symbolShape]\n\n    return (\n        <g\n            transform={`translate(${x},${y})`}\n            style={{\n                opacity: style.itemOpacity ?? opacity,\n            }}\n        >\n            <rect\n                width={width}\n                height={height}\n                fill={style.itemBackground ?? background}\n                style={{\n                    cursor: isInteractive ? 'pointer' : 'auto',\n                }}\n                onClick={event => {\n                    onClick?.(data, event)\n                    toggleSerie?.(data.id)\n                }}\n                onMouseEnter={handleMouseEnter}\n                onMouseLeave={handleMouseLeave}\n            />\n            {React.createElement(SymbolShape, {\n                id: data.id,\n                x: symbolX,\n                y: symbolY,\n                size: style.symbolSize ?? symbolSize,\n                fill: data.fill ?? data.color ?? 'black',\n                borderWidth: style.symbolBorderWidth ?? symbolBorderWidth,\n                borderColor: style.symbolBorderColor ?? symbolBorderColor,\n                ...(data.hidden ? theme.legends.hidden.symbol : undefined),\n            })}\n            <text\n                textAnchor={labelAnchor}\n                style={{\n                    ...theme.legends.text,\n                    fill: style.itemTextColor ?? textColor ?? theme.legends.text.fill ?? 'black',\n                    dominantBaseline: labelAlignment,\n                    pointerEvents: 'none',\n                    userSelect: 'none',\n                    ...(data.hidden ? theme.legends.hidden.text : undefined),\n                }}\n                x={labelX}\n                y={labelY}\n            >\n                {data.label}\n            </text>\n        </g>\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolCircle = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <circle\n            r={size / 2}\n            cx={x + size / 2}\n            cy={y + size / 2}\n            fill={fill}\n            opacity={opacity}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n            style={{\n                pointerEvents: 'none',\n            }}\n        />\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolDiamond = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <g transform={`translate(${x},${y})`}>\n            <path\n                d={`\n                    M${size / 2} 0\n                    L${size * 0.8} ${size / 2}\n                    L${size / 2} ${size}\n                    L${size * 0.2} ${size / 2}\n                    L${size / 2} 0\n                `}\n                fill={fill}\n                opacity={opacity}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                style={{\n                    pointerEvents: 'none',\n                }}\n            />\n        </g>\n    )\n}\n","import { SymbolProps } from './types'\n\nexport const SymbolSquare = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <rect\n            x={x}\n            y={y}\n            fill={fill}\n            opacity={opacity}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n            width={size}\n            height={size}\n            style={{\n                pointerEvents: 'none',\n            }}\n        />\n    )\n}\n","import { LegendSvgItem } from './LegendSvgItem'\nimport { LegendSvgProps } from '../types'\nimport { computeDimensions } from '../compute'\n\nexport const LegendSvg = ({\n    data,\n\n    x,\n    y,\n    direction,\n    padding: _padding = 0,\n    justify,\n    effects,\n\n    itemWidth,\n    itemHeight,\n    itemDirection = 'left-to-right',\n    itemsSpacing = 0,\n    itemTextColor,\n    itemBackground = 'transparent',\n    itemOpacity = 1,\n\n    symbolShape,\n    symbolSize,\n    symbolSpacing,\n    symbolBorderWidth,\n    symbolBorderColor,\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n}: LegendSvgProps) => {\n    const { padding } = computeDimensions({\n        itemCount: data.length,\n        itemWidth,\n        itemHeight,\n        itemsSpacing,\n        direction,\n        padding: _padding,\n    })\n\n    const xStep = direction === 'row' ? itemWidth + itemsSpacing : 0\n    const yStep = direction === 'column' ? itemHeight + itemsSpacing : 0\n\n    return (\n        <g transform={`translate(${x},${y})`}>\n            {data.map((data, i) => (\n                <LegendSvgItem\n                    key={i}\n                    data={data}\n                    x={i * xStep + padding.left}\n                    y={i * yStep + padding.top}\n                    width={itemWidth}\n                    height={itemHeight}\n                    direction={itemDirection}\n                    justify={justify}\n                    effects={effects}\n                    textColor={itemTextColor}\n                    background={itemBackground}\n                    opacity={itemOpacity}\n                    symbolShape={symbolShape}\n                    symbolSize={symbolSize}\n                    symbolSpacing={symbolSpacing}\n                    symbolBorderWidth={symbolBorderWidth}\n                    symbolBorderColor={symbolBorderColor}\n                    onClick={onClick}\n                    onMouseEnter={onMouseEnter}\n                    onMouseLeave={onMouseLeave}\n                    toggleSerie={toggleSerie}\n                />\n            ))}\n        </g>\n    )\n}\n","import { LegendSvg } from './LegendSvg'\nimport { BoxLegendSvgProps } from '../types'\nimport { computeDimensions, computePositionFromAnchor } from '../compute'\n\nexport const BoxLegendSvg = ({\n    data,\n\n    containerWidth,\n    containerHeight,\n    translateX = 0,\n    translateY = 0,\n    anchor,\n    direction,\n    padding = 0,\n    justify,\n\n    itemsSpacing = 0,\n    itemWidth,\n    itemHeight,\n    itemDirection,\n    itemTextColor,\n    itemBackground,\n    itemOpacity,\n\n    symbolShape,\n    symbolSize,\n    symbolSpacing,\n    symbolBorderWidth,\n    symbolBorderColor,\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n\n    effects,\n}: BoxLegendSvgProps) => {\n    const { width, height } = computeDimensions({\n        itemCount: data.length,\n        itemsSpacing,\n        itemWidth,\n        itemHeight,\n        direction,\n        padding,\n    })\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    return (\n        <LegendSvg\n            data={data}\n            x={x}\n            y={y}\n            direction={direction}\n            padding={padding}\n            justify={justify}\n            effects={effects}\n            itemsSpacing={itemsSpacing}\n            itemWidth={itemWidth}\n            itemHeight={itemHeight}\n            itemDirection={itemDirection}\n            itemTextColor={itemTextColor}\n            itemBackground={itemBackground}\n            itemOpacity={itemOpacity}\n            symbolShape={symbolShape}\n            symbolSize={symbolSize}\n            symbolSpacing={symbolSpacing}\n            symbolBorderWidth={symbolBorderWidth}\n            symbolBorderColor={symbolBorderColor}\n            onClick={onClick}\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n            toggleSerie={typeof toggleSerie === 'boolean' ? undefined : toggleSerie}\n        />\n    )\n}\n","import { CompleteTheme, degreesToRadians } from '@nivo/core'\nimport {\n    computeDimensions,\n    computePositionFromAnchor,\n    computeItemLayout,\n    computeContinuousColorsLegend,\n} from './compute'\nimport { AnchoredContinuousColorsLegendProps, LegendCanvasProps } from './types'\nimport { continuousColorsLegendDefaults } from './defaults'\n\nconst textAlignMapping = {\n    start: 'left',\n    middle: 'center',\n    end: 'right',\n} as const\n\nexport const renderLegendToCanvas = (\n    ctx: CanvasRenderingContext2D,\n    {\n        data,\n\n        containerWidth,\n        containerHeight,\n        translateX = 0,\n        translateY = 0,\n        anchor,\n        direction,\n        padding: _padding = 0,\n        justify = false,\n\n        // items\n        itemsSpacing = 0,\n        itemWidth,\n        itemHeight,\n        itemDirection = 'left-to-right',\n        itemTextColor,\n\n        // symbol\n        symbolSize = 16,\n        symbolSpacing = 8,\n        // @todo add support for shapes\n        // symbolShape = LegendSvgItem.defaultProps.symbolShape,\n\n        theme,\n    }: LegendCanvasProps\n) => {\n    const { width, height, padding } = computeDimensions({\n        itemCount: data.length,\n        itemWidth,\n        itemHeight,\n        itemsSpacing,\n        direction,\n        padding: _padding,\n    })\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    const xStep = direction === 'row' ? itemWidth + itemsSpacing : 0\n    const yStep = direction === 'column' ? itemHeight + itemsSpacing : 0\n\n    ctx.save()\n    ctx.translate(x, y)\n\n    ctx.font = `${theme.legends.text.fontSize}px ${theme.legends.text.fontFamily || 'sans-serif'}`\n\n    data.forEach((d, i) => {\n        const itemX = i * xStep + padding.left\n        const itemY = i * yStep + padding.top\n\n        const { symbolX, symbolY, labelX, labelY, labelAnchor, labelAlignment } = computeItemLayout(\n            {\n                direction: itemDirection,\n                justify,\n                symbolSize,\n                symbolSpacing,\n                width: itemWidth,\n                height: itemHeight,\n            }\n        )\n\n        ctx.fillStyle = d.color ?? 'black'\n        ctx.fillRect(itemX + symbolX, itemY + symbolY, symbolSize, symbolSize)\n\n        ctx.textAlign = textAlignMapping[labelAnchor]\n\n        if (labelAlignment === 'central') {\n            ctx.textBaseline = 'middle'\n        }\n\n        ctx.fillStyle = itemTextColor ?? theme.legends.text.fill ?? 'black'\n        ctx.fillText(String(d.label), itemX + labelX, itemY + labelY)\n    })\n\n    ctx.restore()\n}\n\nexport const renderContinuousColorLegendToCanvas = (\n    ctx: CanvasRenderingContext2D,\n    {\n        containerWidth,\n        containerHeight,\n        anchor,\n        translateX = 0,\n        translateY = 0,\n        scale,\n        length = continuousColorsLegendDefaults.length,\n        thickness = continuousColorsLegendDefaults.thickness,\n        direction = continuousColorsLegendDefaults.direction,\n        ticks: _ticks,\n        tickPosition = continuousColorsLegendDefaults.tickPosition,\n        tickSize = continuousColorsLegendDefaults.tickSize,\n        tickSpacing = continuousColorsLegendDefaults.tickSpacing,\n        tickOverlap = continuousColorsLegendDefaults.tickOverlap,\n        tickFormat = continuousColorsLegendDefaults.tickFormat,\n        title,\n        titleAlign = continuousColorsLegendDefaults.titleAlign,\n        titleOffset = continuousColorsLegendDefaults.titleOffset,\n        theme,\n    }: AnchoredContinuousColorsLegendProps & {\n        theme: CompleteTheme\n    }\n) => {\n    const {\n        width,\n        height,\n        gradientX1,\n        gradientY1,\n        gradientX2,\n        gradientY2,\n        colorStops,\n        ticks,\n        titleText,\n        titleX,\n        titleY,\n        titleRotation,\n        titleVerticalAlign,\n        titleHorizontalAlign,\n    } = computeContinuousColorsLegend({\n        scale,\n        ticks: _ticks,\n        length,\n        thickness,\n        direction,\n        tickPosition,\n        tickSize,\n        tickSpacing,\n        tickOverlap,\n        tickFormat,\n        title,\n        titleAlign,\n        titleOffset,\n    })\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    const initialStyles = {\n        font: ctx.font,\n        textAlign: ctx.textAlign,\n        textBaseline: ctx.textBaseline,\n    }\n    ctx.save()\n\n    ctx.translate(x, y)\n\n    const gradient = ctx.createLinearGradient(\n        gradientX1 * width,\n        gradientY1 * height,\n        gradientX2 * width,\n        gradientY2 * height\n    )\n    colorStops.forEach(colorStop => {\n        gradient.addColorStop(colorStop.offset, colorStop.stopColor)\n    })\n\n    ctx.fillStyle = gradient\n    ctx.fillRect(0, 0, width, height)\n\n    ctx.font = `${\n        theme.legends.ticks.text.fontWeight ? `${theme.legends.ticks.text.fontWeight} ` : ''\n    }${theme.legends.ticks.text.fontSize}px ${theme.legends.ticks.text.fontFamily}`\n\n    ticks.forEach(tick => {\n        if ((theme.legends.ticks.line.strokeWidth ?? 0) > 0) {\n            ctx.lineWidth = Number(theme.axis.ticks.line.strokeWidth)\n            if (theme.axis.ticks.line.stroke) {\n                ctx.strokeStyle = theme.axis.ticks.line.stroke\n            }\n            ctx.lineCap = 'square'\n\n            ctx.beginPath()\n            ctx.moveTo(tick.x1, tick.y1)\n            ctx.lineTo(tick.x2, tick.y2)\n            ctx.stroke()\n        }\n\n        if (theme.legends.ticks.text.fill) {\n            ctx.fillStyle = theme.legends.ticks.text.fill\n        }\n        ctx.textAlign = tick.textHorizontalAlign === 'middle' ? 'center' : tick.textHorizontalAlign\n        ctx.textBaseline = tick.textVerticalAlign === 'central' ? 'middle' : tick.textVerticalAlign\n\n        ctx.fillText(tick.text, tick.textX, tick.textY)\n    })\n\n    if (titleText) {\n        ctx.save()\n        ctx.translate(titleX, titleY)\n        ctx.rotate(degreesToRadians(titleRotation))\n\n        ctx.font = `${\n            theme.legends.title.text.fontWeight ? `${theme.legends.title.text.fontWeight} ` : ''\n        }${theme.legends.title.text.fontSize}px ${theme.legends.title.text.fontFamily}`\n        if (theme.legends.title.text.fill) {\n            ctx.fillStyle = theme.legends.title.text.fill\n        }\n        ctx.textAlign = titleHorizontalAlign === 'middle' ? 'center' : titleHorizontalAlign\n        ctx.textBaseline = titleVerticalAlign\n\n        ctx.fillText(titleText, 0, 0)\n\n        ctx.restore()\n    }\n\n    ctx.restore()\n\n    ctx.font = initialStyles.font\n    ctx.textAlign = initialStyles.textAlign\n    ctx.textBaseline = initialStyles.textBaseline\n}\n","import PropTypes from 'prop-types'\n\n/**\n * The prop type is exported as a simple object instead of `PropTypes.shape`\n * to be able to add extra properties.\n *\n * @example\n * ```javascript\n * import { LegendPropShape } from '@nivo/legends'\n *\n * const customLegendPropType = PropTypes.shape({\n *     ...LegendPropShape,\n *     extra: PropTypes.any.isRequired,\n * })\n * ```\n */\nexport const LegendPropShape = {\n    data: PropTypes.arrayOf(PropTypes.object),\n\n    // position & layout\n    anchor: PropTypes.oneOf([\n        'top',\n        'top-right',\n        'right',\n        'bottom-right',\n        'bottom',\n        'bottom-left',\n        'left',\n        'top-left',\n        'center',\n    ]).isRequired,\n    translateX: PropTypes.number,\n    translateY: PropTypes.number,\n    direction: PropTypes.oneOf(['row', 'column']).isRequired,\n\n    // item\n    itemsSpacing: PropTypes.number,\n    itemWidth: PropTypes.number.isRequired,\n    itemHeight: PropTypes.number.isRequired,\n    itemDirection: PropTypes.oneOf([\n        'left-to-right',\n        'right-to-left',\n        'top-to-bottom',\n        'bottom-to-top',\n    ]),\n    itemTextColor: PropTypes.string,\n    itemBackground: PropTypes.string,\n    itemOpacity: PropTypes.number,\n\n    symbolShape: PropTypes.oneOfType([\n        PropTypes.oneOf(['circle', 'diamond', 'square', 'triangle']),\n        PropTypes.func,\n    ]),\n    symbolSize: PropTypes.number,\n    symbolSpacing: PropTypes.number,\n    symbolBorderWidth: PropTypes.number,\n    symbolBorderColor: PropTypes.string,\n\n    onClick: PropTypes.func,\n    onMouseEnter: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n\n    effects: PropTypes.arrayOf(\n        PropTypes.shape({\n            on: PropTypes.oneOfType([PropTypes.oneOf(['hover'])]).isRequired,\n            style: PropTypes.shape({\n                itemTextColor: PropTypes.string,\n                itemBackground: PropTypes.string,\n                itemOpacity: PropTypes.number,\n                symbolSize: PropTypes.number,\n                symbolBorderWidth: PropTypes.number,\n                symbolBorderColor: PropTypes.string,\n            }).isRequired,\n        })\n    ),\n}\n"],"names":["Object","zeroPadding","top","right","bottom","left","computeDimensions","item","direction","itemsSpacing","_padding","padding","itemCount","itemWidth","itemHeight","Array","isArray","Error","horizontalPadding","verticalPadding","width","height","spacing","computePositionFromAnchor","anchor","translateX","translateY","containerWidth","containerHeight","x","y","computeItemLayout","symbolX","symbolY","labelX","labelY","labelAnchor","labelAlignment","justify","symbolSize","symbolSpacing","symbolByShape","circle","size","fill","opacity","l","c","borderWidth","d","borderColor","_jsx","r","cx","cy","strokeWidth","stroke","style","pointerEvents","diamond","transform","square","triangle","LegendSvgItem","data","z","B","textColor","background","Y","E","T","symbolShape","M","P","q","symbolBorderWidth","D","symbolBorderColor","onClick","onMouseEnter","onMouseLeave","toggleSerie","effects","useState","setStyle","theme","useTheme","handleMouseEnter","useCallback","event","filter","on","reduce","acc","effect","handleMouseLeave","isInteractive","some","handler","SymbolShape","_jsxs","itemOpacity","itemBackground","cursor","id","React","color","hidden","legends","symbol","textAnchor","text","itemTextColor","dominantBaseline","userSelect","label","LegendSvg","itemDirection","g","f","p","b","length","xStep","yStep","map","i","BoxLegendSvg","a","h","textAlignMapping","start","middle","end","renderLegendToCanvas","ctx","m","u","O","save","translate","font","fontSize","fontFamily","forEach","itemX","itemY","fillStyle","fillRect","textAlign","textBaseline","fillText","String","restore","PropTypes","isRequired"],"sourceRoot":""}