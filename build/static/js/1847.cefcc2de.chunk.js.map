{"version":3,"file":"static/js/1847.cefcc2de.chunk.js","mappings":"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","sources":["../node_modules/@nivo/legends/src/svg/symbols/SymbolTriangle.tsx","../node_modules/@nivo/legends/src/compute.ts","../node_modules/@nivo/legends/src/canvas.ts","../node_modules/@nivo/legends/src/props.ts","../node_modules/d3-shape/src/constant.js"],"sourcesContent":["import { SymbolProps } from './types'\n\nexport const SymbolTriangle = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <g transform={`translate(${x},${y})`}>\n            <path\n                d={`\n                M${size / 2} 0\n                L${size} ${size}\n                L0 ${size}\n                L${size / 2} 0\n            `}\n                fill={fill}\n                opacity={opacity}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                style={{\n                    pointerEvents: 'none',\n                }}\n            />\n        </g>\n    )\n}\n","import { scaleLinear } from 'd3-scale'\nimport { getValueFormatter } from '@nivo/core'\nimport { computeContinuousColorScaleColorStops } from '@nivo/colors'\nimport {\n    BoxLegendSvgProps,\n    ContinuousColorsLegendProps,\n    LegendAnchor,\n    LegendItemDirection,\n} from './types'\nimport { continuousColorsLegendDefaults } from './defaults'\n\nconst isObject = <T>(item: unknown): item is T =>\n    typeof item === 'object' && !Array.isArray(item) && item !== null\n\nconst zeroPadding = {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n}\n\nexport const computeDimensions = ({\n    direction,\n    itemsSpacing,\n    padding: _padding,\n    itemCount,\n    itemWidth,\n    itemHeight,\n}: Pick<BoxLegendSvgProps, 'direction' | 'padding'> &\n    Record<'itemsSpacing' | 'itemCount' | 'itemWidth' | 'itemHeight', number>) => {\n    if (typeof _padding !== 'number' && !isObject(_padding)) {\n        throw new Error('Invalid property padding, must be one of: number, object')\n    }\n\n    const padding =\n        typeof _padding === 'number'\n            ? {\n                  top: _padding,\n                  right: _padding,\n                  bottom: _padding,\n                  left: _padding,\n              }\n            : {\n                  ...zeroPadding,\n                  ..._padding,\n              }\n\n    const horizontalPadding = padding.left + padding.right\n    const verticalPadding = padding.top + padding.bottom\n    let width = itemWidth + horizontalPadding\n    let height = itemHeight + verticalPadding\n    const spacing = (itemCount - 1) * itemsSpacing\n    if (direction === 'row') {\n        width = itemWidth * itemCount + spacing + horizontalPadding\n    } else if (direction === 'column') {\n        height = itemHeight * itemCount + spacing + verticalPadding\n    }\n\n    return { width, height, padding }\n}\n\nexport const computePositionFromAnchor = ({\n    anchor,\n    translateX,\n    translateY,\n    containerWidth,\n    containerHeight,\n    width,\n    height,\n}: { anchor: LegendAnchor } & Record<\n    'translateX' | 'translateY' | 'containerWidth' | 'containerHeight' | 'width' | 'height',\n    number\n>) => {\n    let x = translateX\n    let y = translateY\n\n    switch (anchor) {\n        case 'top':\n            x += (containerWidth - width) / 2\n            break\n\n        case 'top-right':\n            x += containerWidth - width\n            break\n\n        case 'right':\n            x += containerWidth - width\n            y += (containerHeight - height) / 2\n            break\n\n        case 'bottom-right':\n            x += containerWidth - width\n            y += containerHeight - height\n            break\n\n        case 'bottom':\n            x += (containerWidth - width) / 2\n            y += containerHeight - height\n            break\n\n        case 'bottom-left':\n            y += containerHeight - height\n            break\n\n        case 'left':\n            y += (containerHeight - height) / 2\n            break\n\n        case 'center':\n            x += (containerWidth - width) / 2\n            y += (containerHeight - height) / 2\n            break\n    }\n\n    return { x, y }\n}\n\nexport const computeItemLayout = ({\n    direction,\n    justify,\n    symbolSize,\n    symbolSpacing,\n    width,\n    height,\n}: {\n    direction: LegendItemDirection\n    justify: boolean\n} & Record<'symbolSize' | 'symbolSpacing' | 'width' | 'height', number>) => {\n    let symbolX\n    let symbolY\n\n    let labelX\n    let labelY\n    let labelAnchor: 'start' | 'middle' | 'end'\n    let labelAlignment: 'alphabetic' | 'central' | 'text-before-edge'\n\n    switch (direction) {\n        case 'left-to-right':\n            symbolX = 0\n            symbolY = (height - symbolSize) / 2\n\n            labelY = height / 2\n            labelAlignment = 'central'\n            if (justify) {\n                labelX = width\n                labelAnchor = 'end'\n            } else {\n                labelX = symbolSize + symbolSpacing\n                labelAnchor = 'start'\n            }\n            break\n\n        case 'right-to-left':\n            symbolX = width - symbolSize\n            symbolY = (height - symbolSize) / 2\n\n            labelY = height / 2\n            labelAlignment = 'central'\n            if (justify) {\n                labelX = 0\n                labelAnchor = 'start'\n            } else {\n                labelX = width - symbolSize - symbolSpacing\n                labelAnchor = 'end'\n            }\n            break\n\n        case 'top-to-bottom':\n            symbolX = (width - symbolSize) / 2\n            symbolY = 0\n\n            labelX = width / 2\n\n            labelAnchor = 'middle'\n            if (justify) {\n                labelY = height\n                labelAlignment = 'alphabetic'\n            } else {\n                labelY = symbolSize + symbolSpacing\n                labelAlignment = 'text-before-edge'\n            }\n            break\n\n        case 'bottom-to-top':\n            symbolX = (width - symbolSize) / 2\n            symbolY = height - symbolSize\n\n            labelX = width / 2\n            labelAnchor = 'middle'\n            if (justify) {\n                labelY = 0\n                labelAlignment = 'text-before-edge'\n            } else {\n                labelY = height - symbolSize - symbolSpacing\n                labelAlignment = 'alphabetic'\n            }\n            break\n    }\n\n    return {\n        symbolX,\n        symbolY,\n        labelX,\n        labelY,\n        labelAnchor,\n        labelAlignment,\n    }\n}\n\nexport const computeContinuousColorsLegend = ({\n    scale,\n    ticks,\n    length = continuousColorsLegendDefaults.length,\n    thickness = continuousColorsLegendDefaults.thickness,\n    direction = continuousColorsLegendDefaults.direction,\n    tickPosition = continuousColorsLegendDefaults.tickPosition,\n    tickSize = continuousColorsLegendDefaults.tickSize,\n    tickSpacing = continuousColorsLegendDefaults.tickSpacing,\n    tickOverlap = continuousColorsLegendDefaults.tickOverlap,\n    tickFormat = continuousColorsLegendDefaults.tickFormat,\n    title,\n    titleAlign = continuousColorsLegendDefaults.titleAlign,\n    titleOffset = continuousColorsLegendDefaults.titleOffset,\n}: ContinuousColorsLegendProps) => {\n    // left to right for `row`, bottom to top for `column`\n    const domain = direction === 'column' ? [...scale.domain()].reverse() : scale.domain()\n\n    const positionScale = scaleLinear().domain(domain)\n    if (domain.length === 2) {\n        // sequential, quantize\n        positionScale.range([0, length])\n    } else if (domain.length === 3) {\n        // diverging\n        positionScale.range([0, length / 2, length])\n    }\n\n    let values: number[]\n    if ('thresholds' in scale) {\n        // quantize\n        values = [domain[0], ...scale.thresholds(), domain[1]]\n    } else {\n        // sequential, diverging\n        values = Array.isArray(ticks) ? ticks : (scale as any).ticks(ticks)\n    }\n\n    const colorStops = computeContinuousColorScaleColorStops(scale, 32)\n\n    const formatValue = getValueFormatter(tickFormat)\n\n    const computedTicks: {\n        x1: number\n        y1: number\n        x2: number\n        y2: number\n        text: string\n        textX: number\n        textY: number\n        textHorizontalAlign: 'start' | 'middle' | 'end'\n        textVerticalAlign: 'alphabetic' | 'central' | 'hanging'\n    }[] = []\n\n    let width: number\n    let height: number\n\n    const gradientX1 = 0\n    let gradientY1 = 0\n    let gradientX2 = 0\n    const gradientY2 = 0\n\n    let titleX: number\n    let titleY: number\n    let titleRotation: number\n    let titleVerticalAlign: 'alphabetic' | 'hanging'\n\n    if (direction === 'row') {\n        width = length\n        height = thickness\n\n        gradientX2 = 1\n\n        let y1: number\n        let y2: number\n\n        let textY: number\n        const textHorizontalAlign = 'middle'\n        let textVerticalAlign: 'alphabetic' | 'hanging'\n\n        titleRotation = 0\n        if (titleAlign === 'start') {\n            titleX = 0\n        } else if (titleAlign === 'middle') {\n            titleX = length / 2\n        } else {\n            titleX = length\n        }\n\n        if (tickPosition === 'before') {\n            y1 = -tickSize\n            y2 = tickOverlap ? thickness : 0\n\n            textY = -tickSize - tickSpacing\n            textVerticalAlign = 'alphabetic'\n\n            titleY = thickness + titleOffset\n            titleVerticalAlign = 'hanging'\n        } else {\n            y1 = tickOverlap ? 0 : thickness\n            y2 = thickness + tickSize\n\n            textY = y2 + tickSpacing\n            textVerticalAlign = 'hanging'\n\n            titleY = -titleOffset\n            titleVerticalAlign = 'alphabetic'\n        }\n\n        values.forEach(value => {\n            const x = positionScale(value)\n\n            computedTicks.push({\n                x1: x,\n                y1,\n                x2: x,\n                y2,\n                text: formatValue(value),\n                textX: x,\n                textY,\n                textHorizontalAlign,\n                textVerticalAlign,\n            })\n        })\n    } else {\n        width = thickness\n        height = length\n\n        gradientY1 = 1\n\n        let x1: number\n        let x2: number\n\n        let textX: number\n        let textHorizontalAlign: 'start' | 'end'\n        const textVerticalAlign = 'central'\n\n        titleRotation = -90\n        if (titleAlign === 'start') {\n            titleY = length\n        } else if (titleAlign === 'middle') {\n            titleY = length / 2\n        } else {\n            titleY = 0\n        }\n\n        if (tickPosition === 'before') {\n            x1 = -tickSize\n            x2 = tickOverlap ? thickness : 0\n\n            textX = x1 - tickSpacing\n            textHorizontalAlign = 'end'\n\n            titleX = thickness + titleOffset\n            titleVerticalAlign = 'hanging'\n        } else {\n            x1 = tickOverlap ? 0 : thickness\n            x2 = thickness + tickSize\n\n            textX = x2 + tickSpacing\n            textHorizontalAlign = 'start'\n\n            titleX = -titleOffset\n            titleVerticalAlign = 'alphabetic'\n        }\n\n        values.forEach(value => {\n            const y = positionScale(value)\n\n            computedTicks.push({\n                x1,\n                y1: y,\n                x2,\n                y2: y,\n                text: formatValue(value),\n                textX,\n                textY: y,\n                textHorizontalAlign,\n                textVerticalAlign,\n            })\n        })\n    }\n\n    return {\n        width,\n        height,\n        gradientX1,\n        gradientY1,\n        gradientX2,\n        gradientY2,\n        colorStops,\n        ticks: computedTicks,\n        titleText: title,\n        titleX,\n        titleY,\n        titleRotation,\n        titleHorizontalAlign: titleAlign,\n        titleVerticalAlign,\n    }\n}\n","import { CompleteTheme, degreesToRadians } from '@nivo/core'\nimport {\n    computeDimensions,\n    computePositionFromAnchor,\n    computeItemLayout,\n    computeContinuousColorsLegend,\n} from './compute'\nimport { AnchoredContinuousColorsLegendProps, LegendCanvasProps } from './types'\nimport { continuousColorsLegendDefaults } from './defaults'\n\nconst textAlignMapping = {\n    start: 'left',\n    middle: 'center',\n    end: 'right',\n} as const\n\nexport const renderLegendToCanvas = (\n    ctx: CanvasRenderingContext2D,\n    {\n        data,\n\n        containerWidth,\n        containerHeight,\n        translateX = 0,\n        translateY = 0,\n        anchor,\n        direction,\n        padding: _padding = 0,\n        justify = false,\n\n        // items\n        itemsSpacing = 0,\n        itemWidth,\n        itemHeight,\n        itemDirection = 'left-to-right',\n        itemTextColor,\n\n        // symbol\n        symbolSize = 16,\n        symbolSpacing = 8,\n        // @todo add support for shapes\n        // symbolShape = LegendSvgItem.defaultProps.symbolShape,\n\n        theme,\n    }: LegendCanvasProps\n) => {\n    const { width, height, padding } = computeDimensions({\n        itemCount: data.length,\n        itemWidth,\n        itemHeight,\n        itemsSpacing,\n        direction,\n        padding: _padding,\n    })\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    const xStep = direction === 'row' ? itemWidth + itemsSpacing : 0\n    const yStep = direction === 'column' ? itemHeight + itemsSpacing : 0\n\n    ctx.save()\n    ctx.translate(x, y)\n\n    ctx.font = `${theme.legends.text.fontSize}px ${theme.legends.text.fontFamily || 'sans-serif'}`\n\n    data.forEach((d, i) => {\n        const itemX = i * xStep + padding.left\n        const itemY = i * yStep + padding.top\n\n        const { symbolX, symbolY, labelX, labelY, labelAnchor, labelAlignment } = computeItemLayout(\n            {\n                direction: itemDirection,\n                justify,\n                symbolSize,\n                symbolSpacing,\n                width: itemWidth,\n                height: itemHeight,\n            }\n        )\n\n        ctx.fillStyle = d.color ?? 'black'\n        ctx.fillRect(itemX + symbolX, itemY + symbolY, symbolSize, symbolSize)\n\n        ctx.textAlign = textAlignMapping[labelAnchor]\n\n        if (labelAlignment === 'central') {\n            ctx.textBaseline = 'middle'\n        }\n\n        ctx.fillStyle = itemTextColor ?? theme.legends.text.fill ?? 'black'\n        ctx.fillText(String(d.label), itemX + labelX, itemY + labelY)\n    })\n\n    ctx.restore()\n}\n\nexport const renderContinuousColorLegendToCanvas = (\n    ctx: CanvasRenderingContext2D,\n    {\n        containerWidth,\n        containerHeight,\n        anchor,\n        translateX = 0,\n        translateY = 0,\n        scale,\n        length = continuousColorsLegendDefaults.length,\n        thickness = continuousColorsLegendDefaults.thickness,\n        direction = continuousColorsLegendDefaults.direction,\n        ticks: _ticks,\n        tickPosition = continuousColorsLegendDefaults.tickPosition,\n        tickSize = continuousColorsLegendDefaults.tickSize,\n        tickSpacing = continuousColorsLegendDefaults.tickSpacing,\n        tickOverlap = continuousColorsLegendDefaults.tickOverlap,\n        tickFormat = continuousColorsLegendDefaults.tickFormat,\n        title,\n        titleAlign = continuousColorsLegendDefaults.titleAlign,\n        titleOffset = continuousColorsLegendDefaults.titleOffset,\n        theme,\n    }: AnchoredContinuousColorsLegendProps & {\n        theme: CompleteTheme\n    }\n) => {\n    const {\n        width,\n        height,\n        gradientX1,\n        gradientY1,\n        gradientX2,\n        gradientY2,\n        colorStops,\n        ticks,\n        titleText,\n        titleX,\n        titleY,\n        titleRotation,\n        titleVerticalAlign,\n        titleHorizontalAlign,\n    } = computeContinuousColorsLegend({\n        scale,\n        ticks: _ticks,\n        length,\n        thickness,\n        direction,\n        tickPosition,\n        tickSize,\n        tickSpacing,\n        tickOverlap,\n        tickFormat,\n        title,\n        titleAlign,\n        titleOffset,\n    })\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    const initialStyles = {\n        font: ctx.font,\n        textAlign: ctx.textAlign,\n        textBaseline: ctx.textBaseline,\n    }\n    ctx.save()\n\n    ctx.translate(x, y)\n\n    const gradient = ctx.createLinearGradient(\n        gradientX1 * width,\n        gradientY1 * height,\n        gradientX2 * width,\n        gradientY2 * height\n    )\n    colorStops.forEach(colorStop => {\n        gradient.addColorStop(colorStop.offset, colorStop.stopColor)\n    })\n\n    ctx.fillStyle = gradient\n    ctx.fillRect(0, 0, width, height)\n\n    ctx.font = `${\n        theme.legends.ticks.text.fontWeight ? `${theme.legends.ticks.text.fontWeight} ` : ''\n    }${theme.legends.ticks.text.fontSize}px ${theme.legends.ticks.text.fontFamily}`\n\n    ticks.forEach(tick => {\n        if ((theme.legends.ticks.line.strokeWidth ?? 0) > 0) {\n            ctx.lineWidth = Number(theme.axis.ticks.line.strokeWidth)\n            if (theme.axis.ticks.line.stroke) {\n                ctx.strokeStyle = theme.axis.ticks.line.stroke\n            }\n            ctx.lineCap = 'square'\n\n            ctx.beginPath()\n            ctx.moveTo(tick.x1, tick.y1)\n            ctx.lineTo(tick.x2, tick.y2)\n            ctx.stroke()\n        }\n\n        if (theme.legends.ticks.text.fill) {\n            ctx.fillStyle = theme.legends.ticks.text.fill\n        }\n        ctx.textAlign = tick.textHorizontalAlign === 'middle' ? 'center' : tick.textHorizontalAlign\n        ctx.textBaseline = tick.textVerticalAlign === 'central' ? 'middle' : tick.textVerticalAlign\n\n        ctx.fillText(tick.text, tick.textX, tick.textY)\n    })\n\n    if (titleText) {\n        ctx.save()\n        ctx.translate(titleX, titleY)\n        ctx.rotate(degreesToRadians(titleRotation))\n\n        ctx.font = `${\n            theme.legends.title.text.fontWeight ? `${theme.legends.title.text.fontWeight} ` : ''\n        }${theme.legends.title.text.fontSize}px ${theme.legends.title.text.fontFamily}`\n        if (theme.legends.title.text.fill) {\n            ctx.fillStyle = theme.legends.title.text.fill\n        }\n        ctx.textAlign = titleHorizontalAlign === 'middle' ? 'center' : titleHorizontalAlign\n        ctx.textBaseline = titleVerticalAlign\n\n        ctx.fillText(titleText, 0, 0)\n\n        ctx.restore()\n    }\n\n    ctx.restore()\n\n    ctx.font = initialStyles.font\n    ctx.textAlign = initialStyles.textAlign\n    ctx.textBaseline = initialStyles.textBaseline\n}\n","import PropTypes from 'prop-types'\n\n/**\n * The prop type is exported as a simple object instead of `PropTypes.shape`\n * to be able to add extra properties.\n *\n * @example\n * ```javascript\n * import { LegendPropShape } from '@nivo/legends'\n *\n * const customLegendPropType = PropTypes.shape({\n *     ...LegendPropShape,\n *     extra: PropTypes.any.isRequired,\n * })\n * ```\n */\nexport const LegendPropShape = {\n    data: PropTypes.arrayOf(PropTypes.object),\n\n    // position & layout\n    anchor: PropTypes.oneOf([\n        'top',\n        'top-right',\n        'right',\n        'bottom-right',\n        'bottom',\n        'bottom-left',\n        'left',\n        'top-left',\n        'center',\n    ]).isRequired,\n    translateX: PropTypes.number,\n    translateY: PropTypes.number,\n    direction: PropTypes.oneOf(['row', 'column']).isRequired,\n\n    // item\n    itemsSpacing: PropTypes.number,\n    itemWidth: PropTypes.number.isRequired,\n    itemHeight: PropTypes.number.isRequired,\n    itemDirection: PropTypes.oneOf([\n        'left-to-right',\n        'right-to-left',\n        'top-to-bottom',\n        'bottom-to-top',\n    ]),\n    itemTextColor: PropTypes.string,\n    itemBackground: PropTypes.string,\n    itemOpacity: PropTypes.number,\n\n    symbolShape: PropTypes.oneOfType([\n        PropTypes.oneOf(['circle', 'diamond', 'square', 'triangle']),\n        PropTypes.func,\n    ]),\n    symbolSize: PropTypes.number,\n    symbolSpacing: PropTypes.number,\n    symbolBorderWidth: PropTypes.number,\n    symbolBorderColor: PropTypes.string,\n\n    onClick: PropTypes.func,\n    onMouseEnter: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n\n    effects: PropTypes.arrayOf(\n        PropTypes.shape({\n            on: PropTypes.oneOfType([PropTypes.oneOf(['hover'])]).isRequired,\n            style: PropTypes.shape({\n                itemTextColor: PropTypes.string,\n                itemBackground: PropTypes.string,\n                itemOpacity: PropTypes.number,\n                symbolSize: PropTypes.number,\n                symbolBorderWidth: PropTypes.number,\n                symbolBorderColor: PropTypes.string,\n            }).isRequired,\n        })\n    ),\n}\n","export default function(x) {\n  return function constant() {\n    return x;\n  };\n}\n"],"names":["p","Object","assign","t","e","arguments","length","i","n","prototype","hasOwnProperty","call","apply","b","top","right","bottom","left","k","direction","itemsSpacing","o","padding","r","itemCount","l","itemWidth","a","itemHeight","Array","isArray","Error","c","s","d","h","g","m","width","height","x","anchor","translateX","translateY","containerWidth","containerHeight","y","S","justify","symbolSize","symbolSpacing","symbolX","symbolY","labelX","labelY","labelAnchor","labelAlignment","Y","start","middle","end","H","data","f","u","v","itemDirection","A","W","itemTextColor","z","C","O","B","w","theme","X","E","j","T","L","M","F","P","save","translate","font","legends","text","fontSize","fontFamily","forEach","fillStyle","color","fillRect","textAlign","textBaseline","fill","fillText","String","label","restore","isRequired","on","style","itemBackground","itemOpacity","symbolBorderWidth","symbolBorderColor"],"sourceRoot":""}