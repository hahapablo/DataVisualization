{"version":3,"file":"static/js/4479.f7977722.chunk.js","mappings":"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","sources":["views/nivo/DataTable.js","../node_modules/d3-shape/src/array.js","../node_modules/d3-shape/src/stack.js","../node_modules/@nivo/bar/src/BarAnnotations.tsx","../node_modules/@nivo/bar/src/BarLegends.tsx","../node_modules/@nivo/bar/src/BarItem.tsx","../node_modules/@nivo/bar/src/props.ts","../node_modules/@nivo/bar/src/BarTooltip.tsx","../node_modules/@nivo/bar/src/compute/common.ts","../node_modules/@nivo/bar/src/compute/grouped.ts","../node_modules/@nivo/bar/src/compute/stacked.ts","../node_modules/@nivo/bar/src/compute/legends.ts","../node_modules/@nivo/bar/src/hooks.ts","../node_modules/@nivo/bar/src/Bar.tsx","../node_modules/@nivo/bar/src/BarCanvas.tsx","../node_modules/@nivo/bar/src/ResponsiveBar.tsx","../node_modules/@nivo/bar/src/ResponsiveBarCanvas.tsx","views/nivo/NivoBar.js","../node_modules/lodash/_baseEach.js","../node_modules/lodash/_baseForOwn.js","../node_modules/lodash/_baseIsMatch.js","../node_modules/lodash/_baseIteratee.js","../node_modules/lodash/_baseMatches.js","../node_modules/lodash/_baseMatchesProperty.js","../node_modules/lodash/_baseProperty.js","../node_modules/lodash/_basePropertyDeep.js","../node_modules/lodash/_createBaseEach.js","../node_modules/lodash/_getMatchData.js","../node_modules/lodash/_isStrictComparable.js","../node_modules/lodash/_matchesStrictComparable.js","../node_modules/lodash/property.js"],"sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types';\nconst { CTable, CTableHead, CTableBody, CTableRow, CTableHeaderCell, CTableDataCell } = require(\"@coreui/react\");\n\n\nfunction DataTableView( {tableData}){\n    const columns = Object.keys(tableData[0])\n\n    const tableHeaderData = () => {\n        return(columns.map( (data) => {\n            return <CTableHeaderCell scope=\"col\" key={data}>\n                {data.toUpperCase()}\n            </CTableHeaderCell>\n            }\n        ))\n    }    \n\n    const tableBodyData = () => {\n        return tableData.map((rowData) => {\n            return(\n                <CTableRow key={rowData}>\n                    {\n                       columns.map( (colId) => {\n                            return <CTableDataCell scope='col' key={colId}>\n                                {rowData[colId]}\n                            </CTableDataCell>\n                       }) \n                    }\n                </CTableRow>\n            )\n        })\n    }\n\n    DataTableView.propTypes = {\n        tableData: PropTypes.object.isRequired,\n    } \n\n    return(\n        <CTable bordered striped>\n            <CTableHead>\n                <CTableRow>\n                    {tableHeaderData()}\n                </CTableRow>\n            </CTableHead>\n            <CTableBody>\n                {tableBodyData(0)}\n            </CTableBody>\n        </CTable>\n    )\n\n}\nexport default DataTableView","export var slice = Array.prototype.slice;\n","import {slice} from \"./array.js\";\nimport constant from \"./constant.js\";\nimport offsetNone from \"./offset/none.js\";\nimport orderNone from \"./order/none.js\";\n\nfunction stackValue(d, key) {\n  return d[key];\n}\n\nexport default function() {\n  var keys = constant([]),\n      order = orderNone,\n      offset = offsetNone,\n      value = stackValue;\n\n  function stack(data) {\n    var kz = keys.apply(this, arguments),\n        i,\n        m = data.length,\n        n = kz.length,\n        sz = new Array(n),\n        oz;\n\n    for (i = 0; i < n; ++i) {\n      for (var ki = kz[i], si = sz[i] = new Array(m), j = 0, sij; j < m; ++j) {\n        si[j] = sij = [0, +value(data[j], ki, j, data)];\n        sij.data = data[j];\n      }\n      si.key = ki;\n    }\n\n    for (i = 0, oz = order(sz); i < n; ++i) {\n      sz[oz[i]].index = i;\n    }\n\n    offset(sz, oz);\n    return sz;\n  }\n\n  stack.keys = function(_) {\n    return arguments.length ? (keys = typeof _ === \"function\" ? _ : constant(slice.call(_)), stack) : keys;\n  };\n\n  stack.value = function(_) {\n    return arguments.length ? (value = typeof _ === \"function\" ? _ : constant(+_), stack) : value;\n  };\n\n  stack.order = function(_) {\n    return arguments.length ? (order = _ == null ? orderNone : typeof _ === \"function\" ? _ : constant(slice.call(_)), stack) : order;\n  };\n\n  stack.offset = function(_) {\n    return arguments.length ? (offset = _ == null ? offsetNone : _, stack) : offset;\n  };\n\n  return stack;\n}\n","import { Annotation, useAnnotations } from '@nivo/annotations'\nimport { BarAnnotationsProps } from './types'\n\nexport const BarAnnotations = <RawDatum,>({ bars, annotations }: BarAnnotationsProps<RawDatum>) => {\n    const boundAnnotations = useAnnotations({\n        data: bars,\n        annotations,\n        getPosition: bar => ({\n            x: bar.x + bar.width / 2,\n            y: bar.y + bar.height / 2,\n        }),\n        getDimensions: ({ height, width }) => ({\n            width,\n            height,\n            size: Math.max(width, height),\n        }),\n    })\n\n    return (\n        <>\n            {boundAnnotations.map((annotation, i) => (\n                <Annotation key={i} {...annotation} />\n            ))}\n        </>\n    )\n}\n","import { BoxLegendSvg } from '@nivo/legends'\nimport { BarLegendProps, LegendData } from './types'\n\ninterface BarLegendsProps {\n    width: number\n    height: number\n    legends: [BarLegendProps, LegendData[]][]\n    toggleSerie: (id: string | number) => void\n}\n\nexport const BarLegends = ({ width, height, legends, toggleSerie }: BarLegendsProps) => (\n    <>\n        {legends.map(([legend, data], i) => (\n            <BoxLegendSvg\n                key={i}\n                {...legend}\n                containerWidth={width}\n                containerHeight={height}\n                data={legend.data ?? data}\n                toggleSerie={\n                    legend.toggleSerie && legend.dataFrom === 'keys' ? toggleSerie : undefined\n                }\n            />\n        ))}\n    </>\n)\n","import { createElement, MouseEvent, useCallback, useMemo } from 'react'\nimport { animated, to } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport { BarDatum, BarItemProps } from './types'\n\nexport const BarItem = <RawDatum extends BarDatum>({\n    bar: { data, ...bar },\n\n    style: {\n        borderColor,\n        color,\n        height,\n        labelColor,\n        labelOpacity,\n        labelX,\n        labelY,\n        transform,\n        width,\n    },\n\n    borderRadius,\n    borderWidth,\n\n    label,\n    shouldRenderLabel,\n\n    isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n\n    tooltip,\n\n    isFocusable,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: BarItemProps<RawDatum>) => {\n    const theme = useTheme()\n    const { showTooltipFromEvent, showTooltipAt, hideTooltip } = useTooltip()\n\n    const renderTooltip = useMemo(\n        () => () => createElement(tooltip, { ...bar, ...data }),\n        [tooltip, bar, data]\n    )\n\n    const handleClick = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onClick?.({ color: bar.color, ...data }, event)\n        },\n        [bar, data, onClick]\n    )\n    const handleTooltip = useCallback(\n        (event: MouseEvent<SVGRectElement>) => showTooltipFromEvent(renderTooltip(), event),\n        [showTooltipFromEvent, renderTooltip]\n    )\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseEnter?.(data, event)\n            showTooltipFromEvent(renderTooltip(), event)\n        },\n        [data, onMouseEnter, showTooltipFromEvent, renderTooltip]\n    )\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseLeave?.(data, event)\n            hideTooltip()\n        },\n        [data, hideTooltip, onMouseLeave]\n    )\n\n    // extra handlers to allow keyboard navigation\n    const handleFocus = useCallback(() => {\n        showTooltipAt(renderTooltip(), [bar.absX + bar.width / 2, bar.absY])\n    }, [showTooltipAt, renderTooltip, bar])\n    const handleBlur = useCallback(() => {\n        hideTooltip()\n    }, [hideTooltip])\n\n    return (\n        <animated.g transform={transform}>\n            <animated.rect\n                width={to(width, value => Math.max(value, 0))}\n                height={to(height, value => Math.max(value, 0))}\n                rx={borderRadius}\n                ry={borderRadius}\n                fill={data.fill ?? color}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                focusable={isFocusable}\n                tabIndex={isFocusable ? 0 : undefined}\n                aria-label={ariaLabel ? ariaLabel(data) : undefined}\n                aria-labelledby={ariaLabelledBy ? ariaLabelledBy(data) : undefined}\n                aria-describedby={ariaDescribedBy ? ariaDescribedBy(data) : undefined}\n                onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n                onMouseMove={isInteractive ? handleTooltip : undefined}\n                onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n                onClick={isInteractive ? handleClick : undefined}\n                onFocus={isInteractive && isFocusable ? handleFocus : undefined}\n                onBlur={isInteractive && isFocusable ? handleBlur : undefined}\n            />\n            {shouldRenderLabel && (\n                <animated.text\n                    x={labelX}\n                    y={labelY}\n                    textAnchor=\"middle\"\n                    dominantBaseline=\"central\"\n                    fillOpacity={labelOpacity}\n                    style={{\n                        ...theme.labels.text,\n                        pointerEvents: 'none',\n                        fill: labelColor,\n                    }}\n                >\n                    {label}\n                </animated.text>\n            )}\n        </animated.g>\n    )\n}\n","import { BarItem } from './BarItem'\nimport { BarTooltip } from './BarTooltip'\nimport { ComputedDatum } from './types'\nimport { InheritedColorConfig, OrdinalColorScaleConfig } from '@nivo/colors'\nimport { ScaleBandSpec, ScaleSpec } from '@nivo/scales'\n\nexport const defaultProps = {\n    indexBy: 'id',\n    keys: ['value'],\n\n    groupMode: 'stacked' as const,\n    layout: 'vertical' as const,\n    reverse: false,\n\n    minValue: 'auto' as const,\n    maxValue: 'auto' as const,\n\n    valueScale: { type: 'linear' } as ScaleSpec,\n    indexScale: { type: 'band', round: true } as ScaleBandSpec,\n\n    padding: 0.1,\n    innerPadding: 0,\n\n    axisBottom: {},\n    axisLeft: {},\n    enableGridX: false,\n    enableGridY: true,\n\n    enableLabel: true,\n    label: 'formattedValue',\n    labelSkipWidth: 0,\n    labelSkipHeight: 0,\n    labelTextColor: { from: 'theme', theme: 'labels.text.fill' },\n\n    colorBy: 'id' as const,\n    colors: { scheme: 'nivo' } as OrdinalColorScaleConfig,\n\n    borderRadius: 0,\n    borderWidth: 0,\n    borderColor: { from: 'color' } as InheritedColorConfig<any>,\n\n    isInteractive: true,\n    tooltip: BarTooltip,\n    tooltipLabel: <RawDatum>(datum: ComputedDatum<RawDatum>) => `${datum.id} - ${datum.indexValue}`,\n\n    legends: [],\n    initialHiddenIds: [],\n    annotations: [],\n    markers: [],\n}\n\nexport const svgDefaultProps = {\n    ...defaultProps,\n    layers: ['grid', 'axes', 'bars', 'markers', 'legends', 'annotations'],\n    barComponent: BarItem,\n\n    defs: [],\n    fill: [],\n\n    animate: true,\n    motionConfig: 'default',\n\n    role: 'img',\n    isFocusable: false,\n}\n\nexport const canvasDefaultProps = {\n    ...defaultProps,\n    layers: ['grid', 'axes', 'bars', 'legends', 'annotations'],\n\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio ?? 1 : 1,\n}\n","import { BarTooltipProps } from './types'\nimport { BasicTooltip } from '@nivo/tooltip'\n\nexport const BarTooltip = <RawDatum,>({ color, label, ...data }: BarTooltipProps<RawDatum>) => {\n    return <BasicTooltip id={label} value={data.formattedValue} enableChip={true} color={color} />\n}\n","import { ScaleBandSpec, ScaleBand, computeScale } from '@nivo/scales'\n\n/**\n * Generates indexed scale.\n */\nexport const getIndexScale = <RawDatum>(\n    data: RawDatum[],\n    getIndex: (datum: RawDatum) => string,\n    padding: number,\n    indexScale: ScaleBandSpec,\n    size: number,\n    axis: 'x' | 'y'\n) => {\n    return (\n        computeScale(\n            indexScale,\n            { all: data.map(getIndex), min: 0, max: 0 },\n            size,\n            axis\n        ) as ScaleBand<string>\n    ).padding(padding)\n}\n\n/**\n * This method ensures all the provided keys exist in the entire series.\n */\nexport const normalizeData = <RawDatum>(data: RawDatum[], keys: string[]) =>\n    data.map(\n        item =>\n            ({\n                ...keys.reduce<Record<string, unknown>>((acc, key) => {\n                    acc[key] = null\n                    return acc\n                }, {}),\n                ...item,\n            } as RawDatum)\n    )\n\nexport const filterNullValues = <RawDatum extends Record<string, unknown>>(data: RawDatum) =>\n    Object.keys(data).reduce<Record<string, unknown>>((acc, key) => {\n        if (data[key]) {\n            acc[key] = data[key]\n        }\n        return acc\n    }, {}) as Exclude<RawDatum, null | undefined | false | '' | 0>\n\nexport const coerceValue = <T>(value: T) => [value, Number(value)] as const\n","import { Margin } from '@nivo/core'\nimport { OrdinalColorScale } from '@nivo/colors'\nimport { Scale, ScaleBand, computeScale } from '@nivo/scales'\nimport { BarDatum, BarSvgProps, ComputedBarDatum, ComputedDatum } from '../types'\nimport { coerceValue, filterNullValues, getIndexScale, normalizeData } from './common'\n\ntype Params<RawDatum, XScaleInput, YScaleInput> = {\n    data: RawDatum[]\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    innerPadding: number\n    keys: string[]\n    xScale: XScaleInput extends string ? ScaleBand<XScaleInput> : Scale<XScaleInput, number>\n    yScale: YScaleInput extends string ? ScaleBand<YScaleInput> : Scale<YScaleInput, number>\n    margin: Margin\n}\n\nconst gt = (value: number, other: number) => value > other\nconst lt = (value: number, other: number) => value < other\n\nconst range = (start: number, end: number) =>\n    Array.from(' '.repeat(end - start), (_, index) => start + index)\n\nconst clampToZero = (value: number) => (gt(value, 0) ? 0 : value)\nconst zeroIfNotFinite = (value: number) => (isFinite(value) ? value : 0)\n\n/**\n * Generates x/y scales & bars for vertical grouped bar chart.\n */\nconst generateVerticalGroupedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        data,\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding = 0,\n        keys,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, string, number>,\n    barWidth: number,\n    reverse: boolean,\n    yRef: number\n): ComputedBarDatum<RawDatum>[] => {\n    const compare = reverse ? lt : gt\n    const getY = (d: number) => (compare(d, 0) ? yScale(d) ?? 0 : yRef)\n    const getHeight = (d: number, y: number) => (compare(d, 0) ? yRef - y : (yScale(d) ?? 0) - yRef)\n    const cleanedData = data.map(filterNullValues)\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    keys.forEach((key, i) =>\n        range(0, xScale.domain().length).forEach(index => {\n            const [rawValue, value] = coerceValue(data[index][key])\n            const indexValue = getIndex(data[index])\n            const x = (xScale(indexValue) ?? 0) + barWidth * i + innerPadding * i\n            const y = getY(value)\n            const barHeight = getHeight(value, y)\n            const barData: ComputedDatum<RawDatum> = {\n                id: key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index,\n                indexValue,\n                data: cleanedData[index],\n            }\n\n            bars.push({\n                key: `${key}.${barData.indexValue}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for horizontal grouped bar chart.\n */\nconst generateHorizontalGroupedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        data,\n        formatValue,\n        getIndex,\n        getColor,\n        getTooltipLabel,\n        keys,\n        innerPadding = 0,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, number, string>,\n    barHeight: number,\n    reverse: boolean,\n    xRef: number\n): ComputedBarDatum<RawDatum>[] => {\n    const compare = reverse ? lt : gt\n    const getX = (d: number) => (compare(d, 0) ? xRef : xScale(d) ?? 0)\n    const getWidth = (d: number, x: number) => (compare(d, 0) ? (xScale(d) ?? 0) - xRef : xRef - x)\n    const cleanedData = data.map(filterNullValues)\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    keys.forEach((key, i) =>\n        range(0, yScale.domain().length).forEach(index => {\n            const [rawValue, value] = coerceValue(data[index][key])\n            const indexValue = getIndex(data[index])\n            const x = getX(value)\n            const y = (yScale(indexValue) ?? 0) + barHeight * i + innerPadding * i\n            const barWidth = getWidth(value, x)\n            const barData: ComputedDatum<RawDatum> = {\n                id: key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index,\n                indexValue,\n                data: cleanedData[index],\n            }\n\n            bars.push({\n                key: `${key}.${barData.indexValue}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for grouped bar chart.\n */\nexport const generateGroupedBars = <RawDatum extends BarDatum>({\n    layout,\n    minValue,\n    maxValue,\n    reverse,\n    width,\n    height,\n    padding = 0,\n    innerPadding = 0,\n    valueScale,\n    indexScale: indexScaleConfig,\n    hiddenIds = [],\n    ...props\n}: Pick<\n    Required<BarSvgProps<RawDatum>>,\n    | 'data'\n    | 'height'\n    | 'indexScale'\n    | 'innerPadding'\n    | 'keys'\n    | 'layout'\n    | 'maxValue'\n    | 'minValue'\n    | 'padding'\n    | 'reverse'\n    | 'valueScale'\n    | 'width'\n> & {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    margin: Margin\n    hiddenIds?: string[]\n}) => {\n    const keys = props.keys.filter(key => !hiddenIds.includes(key))\n    const data = normalizeData(props.data, keys)\n    const [axis, otherAxis, size] =\n        layout === 'vertical' ? (['y', 'x', width] as const) : (['x', 'y', height] as const)\n    const indexScale = getIndexScale(\n        data,\n        props.getIndex,\n        padding,\n        indexScaleConfig,\n        size,\n        otherAxis\n    )\n\n    const scaleSpec = {\n        max: maxValue,\n        min: minValue,\n        reverse,\n        ...valueScale,\n    }\n\n    const clampMin = scaleSpec.min === 'auto' ? clampToZero : (value: number) => value\n\n    const values = data\n        .reduce<number[]>((acc, entry) => [...acc, ...keys.map(k => entry[k] as number)], [])\n        .filter(Boolean)\n    const min = clampMin(Math.min(...values))\n    const max = zeroIfNotFinite(Math.max(...values))\n\n    const scale = computeScale(\n        scaleSpec as any,\n        { all: values, min, max },\n        axis === 'x' ? width : height,\n        axis\n    )\n\n    const [xScale, yScale] = layout === 'vertical' ? [indexScale, scale] : [scale, indexScale]\n\n    const bandwidth = (indexScale.bandwidth() - innerPadding * (keys.length - 1)) / keys.length\n    const params = [\n        { ...props, data, keys, innerPadding, xScale, yScale } as Params<RawDatum, any, any>,\n        bandwidth,\n        scaleSpec.reverse,\n        scale(0) ?? 0,\n    ] as const\n\n    const bars: ComputedBarDatum<RawDatum>[] =\n        bandwidth > 0\n            ? layout === 'vertical'\n                ? generateVerticalGroupedBars(...params)\n                : generateHorizontalGroupedBars(...params)\n            : []\n\n    return { xScale, yScale, bars }\n}\n","import { Margin } from '@nivo/core'\nimport { OrdinalColorScale } from '@nivo/colors'\nimport { Scale, ScaleBand, computeScale } from '@nivo/scales'\nimport { Series, SeriesPoint, stack, stackOffsetDiverging } from 'd3-shape'\nimport { BarDatum, BarSvgProps, ComputedBarDatum, ComputedDatum } from '../types'\nimport { coerceValue, filterNullValues, getIndexScale, normalizeData } from './common'\n\ntype StackDatum<RawDatum> = SeriesPoint<RawDatum>\n\ntype Params<RawDatum, XScaleInput, YScaleInput> = {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    innerPadding: number\n    stackedData: Series<RawDatum, string>[]\n    xScale: XScaleInput extends string ? ScaleBand<XScaleInput> : Scale<XScaleInput, number>\n    yScale: YScaleInput extends string ? ScaleBand<YScaleInput> : Scale<YScaleInput, number>\n    margin: Margin\n}\n\nconst flattenDeep = <T>(arr: T[]): T =>\n    arr.some(Array.isArray) ? flattenDeep(([] as T[]).concat(...arr)) : (arr as unknown as T)\n\nconst filterZerosIfLog = (array: number[], type: string) =>\n    type === 'log' ? array.filter(num => num !== 0) : array\n\n/**\n * Generates x/y scales & bars for vertical stacked bar chart.\n */\nconst generateVerticalStackedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding,\n        stackedData,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, string, number>,\n    barWidth: number,\n    reverse: boolean\n): ComputedBarDatum<RawDatum>[] => {\n    const getY = (d: StackDatum<RawDatum>) => yScale(d[reverse ? 0 : 1])\n    const getHeight = (d: StackDatum<RawDatum>, y: number) => (yScale(d[reverse ? 1 : 0]) ?? 0) - y\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    stackedData.forEach(stackedDataItem =>\n        xScale.domain().forEach((index, i) => {\n            const d = stackedDataItem[i]\n            const x = xScale(getIndex(d.data)) ?? 0\n            const y = (getY(d) ?? 0) + innerPadding * 0.5\n            const barHeight = getHeight(d, y) - innerPadding\n            const [rawValue, value] = coerceValue(d.data[stackedDataItem.key])\n\n            const barData: ComputedDatum<RawDatum> = {\n                id: stackedDataItem.key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index: i,\n                indexValue: index,\n                data: filterNullValues(d.data),\n            }\n\n            bars.push({\n                key: `${stackedDataItem.key}.${index}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for horizontal stacked bar chart.\n */\nconst generateHorizontalStackedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding,\n        stackedData,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, number, string>,\n    barHeight: number,\n    reverse: boolean\n): ComputedBarDatum<RawDatum>[] => {\n    const getX = (d: StackDatum<RawDatum>) => xScale(d[reverse ? 1 : 0])\n    const getWidth = (d: StackDatum<RawDatum>, x: number) => (xScale(d[reverse ? 0 : 1]) ?? 0) - x\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    stackedData.forEach(stackedDataItem =>\n        yScale.domain().forEach((index, i) => {\n            const d = stackedDataItem[i]\n            const y = yScale(getIndex(d.data)) ?? 0\n            const x = (getX(d) ?? 0) + innerPadding * 0.5\n            const barWidth = getWidth(d, x) - innerPadding\n            const [rawValue, value] = coerceValue(d.data[stackedDataItem.key])\n\n            const barData: ComputedDatum<RawDatum> = {\n                id: stackedDataItem.key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index: i,\n                indexValue: index,\n                data: filterNullValues(d.data),\n            }\n\n            bars.push({\n                key: `${stackedDataItem.key}.${index}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for stacked bar chart.\n */\nexport const generateStackedBars = <RawDatum extends BarDatum>({\n    data,\n    layout,\n    minValue,\n    maxValue,\n    reverse,\n    width,\n    height,\n    padding = 0,\n    valueScale,\n    indexScale: indexScaleConfig,\n    hiddenIds = [],\n    ...props\n}: Pick<\n    Required<BarSvgProps<RawDatum>>,\n    | 'data'\n    | 'height'\n    | 'indexScale'\n    | 'innerPadding'\n    | 'keys'\n    | 'layout'\n    | 'maxValue'\n    | 'minValue'\n    | 'padding'\n    | 'reverse'\n    | 'valueScale'\n    | 'width'\n> & {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    margin: Margin\n    hiddenIds?: string[]\n}) => {\n    const keys = props.keys.filter(key => !hiddenIds.includes(key))\n    const stackedData = stack<RawDatum, string>().keys(keys).offset(stackOffsetDiverging)(\n        normalizeData(data, keys)\n    )\n\n    const [axis, otherAxis, size] =\n        layout === 'vertical' ? (['y', 'x', width] as const) : (['x', 'y', height] as const)\n    const indexScale = getIndexScale(\n        data,\n        props.getIndex,\n        padding,\n        indexScaleConfig,\n        size,\n        otherAxis\n    )\n\n    const scaleSpec = {\n        max: maxValue,\n        min: minValue,\n        reverse,\n        ...valueScale,\n    }\n\n    const values = filterZerosIfLog(\n        flattenDeep(stackedData as unknown as number[][]),\n        valueScale.type\n    )\n    const min = Math.min(...values)\n    const max = Math.max(...values)\n\n    const scale = computeScale(\n        scaleSpec as any,\n        { all: values, min, max },\n        axis === 'x' ? width : height,\n        axis\n    )\n\n    const [xScale, yScale] = layout === 'vertical' ? [indexScale, scale] : [scale, indexScale]\n\n    const innerPadding = props.innerPadding > 0 ? props.innerPadding : 0\n    const bandwidth = indexScale.bandwidth()\n    const params = [\n        { ...props, innerPadding, stackedData, xScale, yScale } as Params<RawDatum, any, any>,\n        bandwidth,\n        scaleSpec.reverse,\n    ] as const\n\n    const bars: ComputedBarDatum<RawDatum>[] =\n        bandwidth > 0\n            ? layout === 'vertical'\n                ? generateVerticalStackedBars(...params)\n                : generateHorizontalStackedBars(...params)\n            : []\n\n    return { xScale, yScale, bars }\n}\n","import {\n    BarDatum,\n    BarLegendProps,\n    BarSvgProps,\n    BarsWithHidden,\n    LegendData,\n    LegendLabelDatum,\n} from '../types'\nimport { getPropertyAccessor } from '@nivo/core'\nimport { uniqBy } from 'lodash'\n\nexport const getLegendDataForKeys = <RawDatum extends BarDatum>(\n    bars: BarsWithHidden<RawDatum>,\n    layout: NonNullable<BarSvgProps<RawDatum>['layout']>,\n    direction: BarLegendProps['direction'],\n    groupMode: NonNullable<BarSvgProps<RawDatum>['groupMode']>,\n    reverse: boolean,\n    getLegendLabel: (datum: LegendLabelDatum<RawDatum>) => string\n): LegendData[] => {\n    const data = uniqBy(\n        bars.map(bar => ({\n            id: bar.data.id,\n            label: getLegendLabel(bar.data),\n            hidden: bar.data.hidden,\n            color: bar.color ?? '#000',\n        })),\n        ({ id }) => id\n    )\n\n    if (\n        (layout === 'vertical' &&\n            groupMode === 'stacked' &&\n            direction === 'column' &&\n            reverse !== true) ||\n        (layout === 'horizontal' && groupMode === 'stacked' && reverse === true)\n    ) {\n        data.reverse()\n    }\n\n    return data\n}\n\nexport const getLegendDataForIndexes = <RawDatum extends BarDatum>(\n    bars: BarsWithHidden<RawDatum>,\n    layout: NonNullable<BarSvgProps<RawDatum>['layout']>,\n    getLegendLabel: (datum: LegendLabelDatum<RawDatum>) => string\n): LegendData[] => {\n    const data = uniqBy(\n        bars.map(bar => ({\n            id: bar.data.indexValue ?? '',\n            label: getLegendLabel(bar.data),\n            hidden: bar.data.hidden,\n            color: bar.color ?? '#000',\n        })),\n        ({ id }) => id\n    )\n\n    if (layout === 'horizontal') {\n        data.reverse()\n    }\n\n    return data\n}\n\nexport const getLegendData = <RawDatum extends BarDatum>({\n    bars,\n    direction,\n    from,\n    groupMode,\n    layout,\n    legendLabel,\n    reverse,\n}: Pick<Required<BarSvgProps<RawDatum>>, 'layout' | 'groupMode' | 'reverse'> & {\n    bars: BarsWithHidden<RawDatum>\n    direction: BarLegendProps['direction']\n    from: BarLegendProps['dataFrom']\n    legendLabel: BarSvgProps<RawDatum>['legendLabel']\n}) => {\n    const getLegendLabel = getPropertyAccessor(\n        legendLabel ?? (from === 'indexes' ? 'indexValue' : 'id')\n    )\n\n    if (from === 'indexes') {\n        return getLegendDataForIndexes(bars, layout, getLegendLabel)\n    }\n\n    return getLegendDataForKeys(bars, layout, direction, groupMode, reverse, getLegendLabel)\n}\n","import { useCallback, useMemo, useState } from 'react'\nimport { useInheritedColor, useOrdinalColorScale } from '@nivo/colors'\nimport { usePropertyAccessor, useTheme, useValueFormatter, Margin } from '@nivo/core'\nimport {\n    DataProps,\n    BarCommonProps,\n    BarDatum,\n    ComputedBarDatumWithValue,\n    LegendData,\n    BarLegendProps,\n} from './types'\nimport { defaultProps } from './props'\nimport { generateGroupedBars, generateStackedBars, getLegendData } from './compute'\n\nexport const useBar = <RawDatum extends BarDatum>({\n    indexBy = defaultProps.indexBy,\n    keys = defaultProps.keys,\n    label = defaultProps.label,\n    tooltipLabel = defaultProps.tooltipLabel,\n    valueFormat,\n    colors = defaultProps.colors,\n    colorBy = defaultProps.colorBy,\n    borderColor = defaultProps.borderColor,\n    labelTextColor = defaultProps.labelTextColor,\n    groupMode = defaultProps.groupMode,\n    layout = defaultProps.layout,\n    reverse = defaultProps.reverse,\n    data,\n    minValue = defaultProps.minValue,\n    maxValue = defaultProps.maxValue,\n    margin,\n    width,\n    height,\n    padding = defaultProps.padding,\n    innerPadding = defaultProps.innerPadding,\n    valueScale = defaultProps.valueScale,\n    indexScale = defaultProps.indexScale,\n    initialHiddenIds = defaultProps.initialHiddenIds,\n    enableLabel = defaultProps.enableLabel,\n    labelSkipWidth = defaultProps.labelSkipWidth,\n    labelSkipHeight = defaultProps.labelSkipHeight,\n    legends = defaultProps.legends,\n    legendLabel,\n}: {\n    indexBy?: BarCommonProps<RawDatum>['indexBy']\n    label?: BarCommonProps<RawDatum>['label']\n    tooltipLabel?: BarCommonProps<RawDatum>['tooltipLabel']\n    valueFormat?: BarCommonProps<RawDatum>['valueFormat']\n    colors?: BarCommonProps<RawDatum>['colors']\n    colorBy?: BarCommonProps<RawDatum>['colorBy']\n    borderColor?: BarCommonProps<RawDatum>['borderColor']\n    labelTextColor?: BarCommonProps<RawDatum>['labelTextColor']\n    groupMode?: BarCommonProps<RawDatum>['groupMode']\n    layout?: BarCommonProps<RawDatum>['layout']\n    reverse?: BarCommonProps<RawDatum>['reverse']\n    data: DataProps<RawDatum>['data']\n    keys?: BarCommonProps<RawDatum>['keys']\n    minValue?: BarCommonProps<RawDatum>['minValue']\n    maxValue?: BarCommonProps<RawDatum>['maxValue']\n    margin: Margin\n    width: number\n    height: number\n    padding?: BarCommonProps<RawDatum>['padding']\n    innerPadding?: BarCommonProps<RawDatum>['innerPadding']\n    valueScale?: BarCommonProps<RawDatum>['valueScale']\n    indexScale?: BarCommonProps<RawDatum>['indexScale']\n    initialHiddenIds?: BarCommonProps<RawDatum>['initialHiddenIds']\n    enableLabel?: BarCommonProps<RawDatum>['enableLabel']\n    labelSkipWidth?: BarCommonProps<RawDatum>['labelSkipWidth']\n    labelSkipHeight?: BarCommonProps<RawDatum>['labelSkipHeight']\n    legends?: BarCommonProps<RawDatum>['legends']\n    legendLabel?: BarCommonProps<RawDatum>['legendLabel']\n}) => {\n    const [hiddenIds, setHiddenIds] = useState(initialHiddenIds ?? [])\n    const toggleSerie = useCallback(id => {\n        setHiddenIds(state =>\n            state.indexOf(id) > -1 ? state.filter(item => item !== id) : [...state, id]\n        )\n    }, [])\n\n    const getIndex = usePropertyAccessor(indexBy)\n    const getLabel = usePropertyAccessor(label)\n    const getTooltipLabel = usePropertyAccessor(tooltipLabel)\n    const formatValue = useValueFormatter(valueFormat)\n\n    const theme = useTheme()\n    const getColor = useOrdinalColorScale(colors, colorBy)\n    const getBorderColor = useInheritedColor<ComputedBarDatumWithValue<RawDatum>>(\n        borderColor,\n        theme\n    )\n    const getLabelColor = useInheritedColor<ComputedBarDatumWithValue<RawDatum>>(\n        labelTextColor,\n        theme\n    )\n\n    const generateBars = groupMode === 'grouped' ? generateGroupedBars : generateStackedBars\n    const { bars, xScale, yScale } = generateBars({\n        layout,\n        reverse,\n        data,\n        getIndex,\n        keys,\n        minValue,\n        maxValue,\n        width,\n        height,\n        getColor,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        hiddenIds,\n        formatValue,\n        getTooltipLabel,\n        margin,\n    })\n\n    const barsWithValue = useMemo(\n        () =>\n            bars\n                .filter(\n                    (bar): bar is ComputedBarDatumWithValue<RawDatum> => bar.data.value !== null\n                )\n                .map((bar, index) => ({\n                    ...bar,\n                    index,\n                })),\n        [bars]\n    )\n\n    const shouldRenderBarLabel = useCallback(\n        ({ width, height }: { height: number; width: number }) => {\n            if (!enableLabel) return false\n            if (labelSkipWidth > 0 && width < labelSkipWidth) return false\n            if (labelSkipHeight > 0 && height < labelSkipHeight) return false\n            return true\n        },\n        [enableLabel, labelSkipWidth, labelSkipHeight]\n    )\n\n    const legendData = useMemo(\n        () =>\n            keys.map(key => {\n                const bar = bars.find(bar => bar.data.id === key)\n\n                return { ...bar, data: { id: key, ...bar?.data, hidden: hiddenIds.includes(key) } }\n            }),\n        [hiddenIds, keys, bars]\n    )\n\n    const legendsWithData: [BarLegendProps, LegendData[]][] = useMemo(\n        () =>\n            legends.map(legend => {\n                const data = getLegendData({\n                    bars: legend.dataFrom === 'keys' ? legendData : bars,\n                    direction: legend.direction,\n                    from: legend.dataFrom,\n                    groupMode,\n                    layout,\n                    legendLabel,\n                    reverse,\n                })\n\n                return [legend, data]\n            }),\n        [legends, legendData, bars, groupMode, layout, legendLabel, reverse]\n    )\n\n    return {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getIndex,\n        getLabel,\n        getTooltipLabel,\n        formatValue,\n        getColor,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        hiddenIds,\n        toggleSerie,\n        legendsWithData,\n    }\n}\n","import { Axes, Grid } from '@nivo/axes'\nimport { BarAnnotations } from './BarAnnotations'\nimport { BarDatum, BarLayer, BarLayerId, BarSvgProps, ComputedBarDatumWithValue } from './types'\nimport { BarLegends } from './BarLegends'\nimport {\n    CartesianMarkers,\n    Container,\n    SvgWrapper,\n    // @ts-ignore\n    bindDefs,\n    useDimensions,\n    useMotionConfig,\n} from '@nivo/core'\nimport { Fragment, ReactNode, createElement, useMemo } from 'react'\nimport { svgDefaultProps } from './props'\nimport { useTransition } from '@react-spring/web'\nimport { useBar } from './hooks'\n\ntype InnerBarProps<RawDatum extends BarDatum> = Omit<\n    BarSvgProps<RawDatum>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerBar = <RawDatum extends BarDatum>({\n    data,\n    indexBy,\n    keys,\n\n    margin: partialMargin,\n    width,\n    height,\n\n    groupMode,\n    layout,\n    reverse,\n    minValue,\n    maxValue,\n\n    valueScale,\n    indexScale,\n\n    padding,\n    innerPadding,\n\n    axisTop,\n    axisRight,\n    axisBottom = svgDefaultProps.axisBottom,\n    axisLeft = svgDefaultProps.axisLeft,\n    enableGridX = svgDefaultProps.enableGridX,\n    enableGridY = svgDefaultProps.enableGridY,\n    gridXValues,\n    gridYValues,\n\n    layers = svgDefaultProps.layers as BarLayer<RawDatum>[],\n    barComponent = svgDefaultProps.barComponent,\n\n    enableLabel,\n    label,\n    labelSkipWidth,\n    labelSkipHeight,\n    labelTextColor,\n\n    markers = svgDefaultProps.markers,\n\n    colorBy,\n    colors,\n    defs = svgDefaultProps.defs,\n    fill = svgDefaultProps.fill,\n    borderRadius = svgDefaultProps.borderRadius,\n    borderWidth = svgDefaultProps.borderWidth,\n    borderColor,\n\n    annotations = svgDefaultProps.annotations,\n\n    legendLabel,\n    tooltipLabel,\n\n    valueFormat,\n\n    isInteractive = svgDefaultProps.isInteractive,\n    tooltip = svgDefaultProps.tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n\n    legends,\n\n    role = svgDefaultProps.role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n    isFocusable = svgDefaultProps.isFocusable,\n    barAriaLabel,\n    barAriaLabelledBy,\n    barAriaDescribedBy,\n\n    initialHiddenIds,\n}: InnerBarProps<RawDatum>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getLabel,\n        getTooltipLabel,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        toggleSerie,\n        legendsWithData,\n    } = useBar<RawDatum>({\n        indexBy,\n        label,\n        tooltipLabel,\n        valueFormat,\n        colors,\n        colorBy,\n        borderColor,\n        labelTextColor,\n        groupMode,\n        layout,\n        reverse,\n        data,\n        keys,\n        minValue,\n        maxValue,\n        margin,\n        width: innerWidth,\n        height: innerHeight,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        enableLabel,\n        labelSkipWidth,\n        labelSkipHeight,\n        legends,\n        legendLabel,\n        initialHiddenIds,\n    })\n\n    const transition = useTransition<\n        ComputedBarDatumWithValue<RawDatum>,\n        {\n            borderColor: string\n            color: string\n            height: number\n            labelColor: string\n            labelOpacity: number\n            labelX: number\n            labelY: number\n            opacity: number\n            transform: string\n            width: number\n        }\n    >(barsWithValue, {\n        keys: bar => bar.key,\n        from: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: 0,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 0,\n            labelX: bar.width / 2,\n            labelY: bar.height / 2,\n            transform: `translate(${bar.x}, ${bar.y + bar.height})`,\n            width: bar.width,\n            ...(layout === 'vertical'\n                ? {}\n                : {\n                      height: bar.height,\n                      transform: `translate(${bar.x}, ${bar.y})`,\n                      width: 0,\n                  }),\n        }),\n        enter: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: bar.height,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 1,\n            labelX: bar.width / 2,\n            labelY: bar.height / 2,\n            transform: `translate(${bar.x}, ${bar.y})`,\n            width: bar.width,\n        }),\n        update: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: bar.height,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 1,\n            labelX: bar.width / 2,\n            labelY: bar.height / 2,\n            transform: `translate(${bar.x}, ${bar.y})`,\n            width: bar.width,\n        }),\n        leave: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: 0,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 0,\n            labelX: bar.width / 2,\n            labelY: 0,\n            transform: `translate(${bar.x}, ${bar.y + bar.height})`,\n            width: bar.width,\n            ...(layout === 'vertical'\n                ? {}\n                : {\n                      labelX: 0,\n                      labelY: bar.height / 2,\n                      height: bar.height,\n                      transform: `translate(${bar.x}, ${bar.y})`,\n                      width: 0,\n                  }),\n        }),\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const commonProps = useMemo(\n        () => ({\n            borderRadius,\n            borderWidth,\n            enableLabel,\n            isInteractive,\n            labelSkipWidth,\n            labelSkipHeight,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            getTooltipLabel,\n            tooltip,\n            isFocusable,\n            ariaLabel: barAriaLabel,\n            ariaLabelledBy: barAriaLabelledBy,\n            ariaDescribedBy: barAriaDescribedBy,\n        }),\n        [\n            borderRadius,\n            borderWidth,\n            enableLabel,\n            getTooltipLabel,\n            isInteractive,\n            labelSkipHeight,\n            labelSkipWidth,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            tooltip,\n            isFocusable,\n            barAriaLabel,\n            barAriaLabelledBy,\n            barAriaDescribedBy,\n        ]\n    )\n\n    const boundDefs = bindDefs(defs, bars, fill, {\n        dataKey: 'data',\n        targetKey: 'data.fill',\n    })\n\n    const layerById: Record<BarLayerId, ReactNode> = {\n        annotations: null,\n        axes: null,\n        bars: null,\n        grid: null,\n        legends: null,\n        markers: null,\n    }\n\n    if (layers.includes('annotations')) {\n        layerById.annotations = (\n            <BarAnnotations key=\"annotations\" bars={bars} annotations={annotations} />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale as any}\n                yScale={yScale as any}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    if (layers.includes('bars')) {\n        layerById.bars = (\n            <Fragment key=\"bars\">\n                {transition((style, bar) =>\n                    createElement(barComponent, {\n                        ...commonProps,\n                        bar,\n                        style,\n                        shouldRenderLabel: shouldRenderBarLabel(bar),\n                        label: getLabel(bar.data),\n                    })\n                )}\n            </Fragment>\n        )\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? (xScale as any) : null}\n                yScale={enableGridY ? (yScale as any) : null}\n                xValues={gridXValues}\n                yValues={gridYValues}\n            />\n        )\n    }\n\n    if (layers.includes('legends')) {\n        layerById.legends = (\n            <BarLegends\n                key=\"legends\"\n                width={innerWidth}\n                height={innerHeight}\n                legends={legendsWithData}\n                toggleSerie={toggleSerie}\n            />\n        )\n    }\n\n    if (layers.includes('markers')) {\n        layerById.markers = (\n            <CartesianMarkers<number | string, number>\n                key=\"markers\"\n                markers={markers as any[]}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={xScale as (v: number | string) => number}\n                yScale={yScale as (v: number) => number}\n            />\n        )\n    }\n\n    // We use `any` here until we can figure out the best way to type xScale/yScale\n    const layerContext: any = useMemo(\n        () => ({\n            ...commonProps,\n            margin,\n            innerWidth,\n            innerHeight,\n            width,\n            height,\n            bars,\n            xScale,\n            yScale,\n        }),\n        [commonProps, margin, innerWidth, innerHeight, width, height, bars, xScale, yScale]\n    )\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n            isFocusable={isFocusable}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Bar = <RawDatum extends BarDatum>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: BarSvgProps<RawDatum>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerBar<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { BarCanvasLayer, BarCanvasProps, BarDatum, ComputedBarDatum } from './types'\nimport {\n    Container,\n    Margin,\n    getRelativeCursor,\n    isCursorInRect,\n    useDimensions,\n    useTheme,\n} from '@nivo/core'\nimport {\n    ForwardedRef,\n    createElement,\n    forwardRef,\n    useCallback,\n    useEffect,\n    useMemo,\n    useRef,\n} from 'react'\nimport { canvasDefaultProps } from './props'\nimport {\n    renderAnnotationsToCanvas,\n    useAnnotations,\n    useComputedAnnotations,\n} from '@nivo/annotations'\nimport { renderAxesToCanvas, renderGridLinesToCanvas } from '@nivo/axes'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useBar } from './hooks'\n\ntype InnerBarCanvasProps<RawDatum extends BarDatum> = Omit<\n    BarCanvasProps<RawDatum>,\n    'renderWrapper' | 'theme'\n> & {\n    canvasRef: ForwardedRef<HTMLCanvasElement>\n}\n\nconst findBarUnderCursor = <RawDatum,>(\n    nodes: ComputedBarDatum<RawDatum>[],\n    margin: Margin,\n    x: number,\n    y: number\n) =>\n    nodes.find(node =>\n        isCursorInRect(node.x + margin.left, node.y + margin.top, node.width, node.height, x, y)\n    )\n\nconst isNumber = (value: unknown): value is number => typeof value === 'number'\n\nconst InnerBarCanvas = <RawDatum extends BarDatum>({\n    data,\n    indexBy,\n    keys,\n\n    margin: partialMargin,\n    width,\n    height,\n\n    groupMode,\n    layout,\n    reverse,\n    minValue,\n    maxValue,\n\n    valueScale,\n    indexScale,\n\n    padding,\n    innerPadding,\n\n    axisTop,\n    axisRight,\n    axisBottom = canvasDefaultProps.axisBottom,\n    axisLeft = canvasDefaultProps.axisLeft,\n    enableGridX = canvasDefaultProps.enableGridX,\n    enableGridY = canvasDefaultProps.enableGridY,\n    gridXValues,\n    gridYValues,\n\n    layers = canvasDefaultProps.layers as BarCanvasLayer<RawDatum>[],\n    renderBar = (\n        ctx,\n        {\n            bar: { color, height, width, x, y },\n\n            borderColor,\n            borderRadius,\n            borderWidth,\n            label,\n            labelColor,\n            shouldRenderLabel,\n        }\n    ) => {\n        ctx.fillStyle = color\n\n        if (borderWidth > 0) {\n            ctx.strokeStyle = borderColor\n            ctx.lineWidth = borderWidth\n        }\n\n        ctx.beginPath()\n\n        if (borderRadius > 0) {\n            const radius = Math.min(borderRadius, height)\n\n            ctx.moveTo(x + radius, y)\n            ctx.lineTo(x + width - radius, y)\n            ctx.quadraticCurveTo(x + width, y, x + width, y + radius)\n            ctx.lineTo(x + width, y + height - radius)\n            ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height)\n            ctx.lineTo(x + radius, y + height)\n            ctx.quadraticCurveTo(x, y + height, x, y + height - radius)\n            ctx.lineTo(x, y + radius)\n            ctx.quadraticCurveTo(x, y, x + radius, y)\n            ctx.closePath()\n        } else {\n            ctx.rect(x, y, width, height)\n        }\n\n        ctx.fill()\n\n        if (borderWidth > 0) {\n            ctx.stroke()\n        }\n\n        if (shouldRenderLabel) {\n            ctx.textBaseline = 'middle'\n            ctx.textAlign = 'center'\n            ctx.fillStyle = labelColor\n            ctx.fillText(label, x + width / 2, y + height / 2)\n        }\n    },\n\n    enableLabel,\n    label,\n    labelSkipWidth,\n    labelSkipHeight,\n    labelTextColor,\n\n    colorBy,\n    colors,\n    borderRadius = canvasDefaultProps.borderRadius,\n    borderWidth = canvasDefaultProps.borderWidth,\n    borderColor,\n\n    annotations = canvasDefaultProps.annotations,\n\n    legendLabel,\n    tooltipLabel,\n\n    valueFormat,\n\n    isInteractive = canvasDefaultProps.isInteractive,\n    tooltip = canvasDefaultProps.tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n\n    legends,\n\n    pixelRatio = canvasDefaultProps.pixelRatio,\n\n    canvasRef,\n}: InnerBarCanvasProps<RawDatum>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n\n    const theme = useTheme()\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getLabel,\n        getTooltipLabel,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        legendsWithData,\n    } = useBar<RawDatum>({\n        indexBy,\n        label,\n        tooltipLabel,\n        valueFormat,\n        colors,\n        colorBy,\n        borderColor,\n        labelTextColor,\n        groupMode,\n        layout,\n        reverse,\n        data,\n        keys,\n        minValue,\n        maxValue,\n        margin,\n        width: innerWidth,\n        height: innerHeight,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        enableLabel,\n        labelSkipWidth,\n        labelSkipHeight,\n        legends,\n        legendLabel,\n    })\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    // Using any because return type isn't correct\n    const boundAnnotations: any = useComputedAnnotations({\n        annotations: useAnnotations({\n            data: bars,\n            annotations,\n            getPosition: node => ({\n                x: node.x,\n                y: node.y,\n            }),\n            getDimensions: ({ width, height }) => ({\n                width,\n                height,\n                size: Math.max(width, height),\n            }),\n        }),\n    })\n\n    // We use `any` here until we can figure out the best way to type xScale/yScale\n    const layerContext: any = useMemo(\n        () => ({\n            borderRadius,\n            borderWidth,\n            enableLabel,\n            isInteractive,\n            labelSkipWidth,\n            labelSkipHeight,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            getTooltipLabel,\n            tooltip,\n            margin,\n            innerWidth,\n            innerHeight,\n            width,\n            height,\n            bars,\n            xScale,\n            yScale,\n        }),\n        [\n            borderRadius,\n            borderWidth,\n            enableLabel,\n            getTooltipLabel,\n            height,\n            innerHeight,\n            innerWidth,\n            isInteractive,\n            labelSkipHeight,\n            labelSkipWidth,\n            margin,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            bars,\n            xScale,\n            yScale,\n            tooltip,\n            width,\n        ]\n    )\n\n    useEffect(() => {\n        const ctx = canvasEl.current?.getContext('2d')\n\n        if (!canvasEl.current) return\n        if (!ctx) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (layer === 'grid') {\n                if (isNumber(theme.grid.line.strokeWidth) && theme.grid.line.strokeWidth > 0) {\n                    ctx.lineWidth = theme.grid.line.strokeWidth\n                    ctx.strokeStyle = theme.grid.line.stroke as string\n\n                    if (enableGridX) {\n                        renderGridLinesToCanvas<string | number>(ctx, {\n                            width,\n                            height,\n                            scale: xScale as any,\n                            axis: 'x',\n                            values: gridXValues,\n                        })\n                    }\n\n                    if (enableGridY) {\n                        renderGridLinesToCanvas<string | number>(ctx, {\n                            width,\n                            height,\n                            scale: yScale as any,\n                            axis: 'y',\n                            values: gridYValues,\n                        })\n                    }\n                }\n            } else if (layer === 'axes') {\n                renderAxesToCanvas(ctx, {\n                    xScale: xScale as any,\n                    yScale: yScale as any,\n                    width: innerWidth,\n                    height: innerHeight,\n                    top: axisTop,\n                    right: axisRight,\n                    bottom: axisBottom,\n                    left: axisLeft,\n                    theme,\n                })\n            } else if (layer === 'bars') {\n                barsWithValue.forEach(bar => {\n                    renderBar(ctx, {\n                        bar,\n                        borderColor: getBorderColor(bar) as string,\n                        borderRadius,\n                        borderWidth,\n                        label: getLabel(bar.data),\n                        labelColor: getLabelColor(bar) as string,\n                        shouldRenderLabel: shouldRenderBarLabel(bar),\n                    })\n                })\n            } else if (layer === 'legends') {\n                legendsWithData.forEach(([legend, data]) => {\n                    renderLegendToCanvas(ctx, {\n                        ...legend,\n                        data,\n                        containerWidth: innerWidth,\n                        containerHeight: innerHeight,\n                        theme,\n                    })\n                })\n            } else if (layer === 'annotations') {\n                renderAnnotationsToCanvas(ctx, { annotations: boundAnnotations, theme })\n            } else if (typeof layer === 'function') {\n                layer(ctx, layerContext)\n            }\n        })\n\n        ctx.save()\n    }, [\n        axisBottom,\n        axisLeft,\n        axisRight,\n        axisTop,\n        barsWithValue,\n        borderRadius,\n        borderWidth,\n        boundAnnotations,\n        enableGridX,\n        enableGridY,\n        getBorderColor,\n        getLabel,\n        getLabelColor,\n        gridXValues,\n        gridYValues,\n        groupMode,\n        height,\n        innerHeight,\n        innerWidth,\n        layerContext,\n        layers,\n        layout,\n        legendsWithData,\n        margin.left,\n        margin.top,\n        outerHeight,\n        outerWidth,\n        pixelRatio,\n        renderBar,\n        xScale,\n        yScale,\n        reverse,\n        shouldRenderBarLabel,\n        theme,\n        width,\n    ])\n\n    const handleMouseHover = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar !== undefined) {\n                showTooltipFromEvent(\n                    createElement(tooltip, {\n                        ...bar.data,\n                        color: bar.color,\n                        label: bar.label,\n                        value: Number(bar.data.value),\n                    }),\n                    event\n                )\n\n                if (event.type === 'mouseenter') {\n                    onMouseEnter?.(bar.data, event)\n                }\n            } else {\n                hideTooltip()\n            }\n        },\n        [hideTooltip, margin, onMouseEnter, bars, showTooltipFromEvent, tooltip]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            hideTooltip()\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar) {\n                onMouseLeave?.(bar.data, event)\n            }\n        },\n        [hideTooltip, margin, onMouseLeave, bars]\n    )\n\n    const handleClick = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar !== undefined) {\n                onClick?.({ ...bar.data, color: bar.color }, event)\n            }\n        },\n        [margin, onClick, bars]\n    )\n\n    return (\n        <canvas\n            ref={canvas => {\n                canvasEl.current = canvas\n                if (canvasRef && 'current' in canvasRef) canvasRef.current = canvas\n            }}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nexport const BarCanvas = forwardRef(\n    <RawDatum extends BarDatum>(\n        { isInteractive, renderWrapper, theme, ...props }: BarCanvasProps<RawDatum>,\n        ref: ForwardedRef<HTMLCanvasElement>\n    ) => (\n        <Container {...{ isInteractive, renderWrapper, theme }} animate={false}>\n            <InnerBarCanvas<RawDatum> {...props} canvasRef={ref} />\n        </Container>\n    )\n)\n","import { Bar } from './Bar'\nimport { BarDatum, BarSvgProps } from './types'\nimport { ResponsiveWrapper } from '@nivo/core'\n\nexport const ResponsiveBar = <RawDatum extends BarDatum>(\n    props: Omit<BarSvgProps<RawDatum>, 'height' | 'width'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Bar<RawDatum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n","import { BarDatum, BarCanvasProps } from './types'\nimport { BarCanvas } from './BarCanvas'\nimport { ForwardedRef, forwardRef } from 'react'\nimport { ResponsiveWrapper } from '@nivo/core'\n\nexport const ResponsiveBarCanvas = forwardRef(function ResponsiveBarCanvas<\n    RawDatum extends BarDatum\n>(props: Omit<BarCanvasProps<RawDatum>, 'height' | 'width'>, ref: ForwardedRef<HTMLCanvasElement>) {\n    return (\n        <ResponsiveWrapper>\n            {({ width, height }) => (\n                <BarCanvas\n                    width={width}\n                    height={height}\n                    {...(props as Omit<BarCanvasProps<BarDatum>, 'height' | 'width'>)}\n                    ref={ref}\n                />\n            )}\n        </ResponsiveWrapper>\n    )\n})\n","import React, {useState} from 'react'\nimport PropTypes from 'prop-types'\nimport {ResponsiveBar}  from '@nivo/bar'\nimport { CButton, CButtonGroup, CCard, CCardBody, CCardHeader, CCol, CHeader, CRow } from '@coreui/react'\nimport DataTableView from './DataTable';\n\nconst NivoBar = () => {\n\n    const [vertOrHor, setVertOrHor] = useState('vertical')\n    const [viewType, setViewType] = useState('Graph')\n    \n    const barData = [\n        {\n          \"country\": \"AD\",\n          \"hot dog\": 121,\n          \"hot dogColor\": \"hsl(13, 70%, 50%)\",\n          \"burger\": 71,\n          \"burgerColor\": \"hsl(257, 70%, 50%)\",\n          \"sandwich\": 28,\n          \"sandwichColor\": \"hsl(168, 70%, 50%)\",\n          \"kebab\": 95,\n          \"kebabColor\": \"hsl(234, 70%, 50%)\",\n          \"fries\": 83,\n          \"friesColor\": \"hsl(44, 70%, 50%)\",\n          \"donut\": 10,\n          \"donutColor\": \"hsl(293, 70%, 50%)\"\n        },\n        {\n          \"country\": \"AE\",\n          \"hot dog\": 162,\n          \"hot dogColor\": \"hsl(258, 70%, 50%)\",\n          \"burger\": 176,\n          \"burgerColor\": \"hsl(86, 70%, 50%)\",\n          \"sandwich\": 47,\n          \"sandwichColor\": \"hsl(258, 70%, 50%)\",\n          \"kebab\": 40,\n          \"kebabColor\": \"hsl(331, 70%, 50%)\",\n          \"fries\": 78,\n          \"friesColor\": \"hsl(84, 70%, 50%)\",\n          \"donut\": 154,\n          \"donutColor\": \"hsl(57, 70%, 50%)\"\n        },\n        {\n          \"country\": \"AF\",\n          \"hot dog\": 195,\n          \"hot dogColor\": \"hsl(25, 70%, 50%)\",\n          \"burger\": 89,\n          \"burgerColor\": \"hsl(60, 70%, 50%)\",\n          \"sandwich\": 67,\n          \"sandwichColor\": \"hsl(201, 70%, 50%)\",\n          \"kebab\": 66,\n          \"kebabColor\": \"hsl(254, 70%, 50%)\",\n          \"fries\": 27,\n          \"friesColor\": \"hsl(101, 70%, 50%)\",\n          \"donut\": 99,\n          \"donutColor\": \"hsl(211, 70%, 50%)\"\n        },\n        {\n          \"country\": \"AG\",\n          \"hot dog\": 97,\n          \"hot dogColor\": \"hsl(68, 70%, 50%)\",\n          \"burger\": 159,\n          \"burgerColor\": \"hsl(290, 70%, 50%)\",\n          \"sandwich\": 181,\n          \"sandwichColor\": \"hsl(214, 70%, 50%)\",\n          \"kebab\": 158,\n          \"kebabColor\": \"hsl(255, 70%, 50%)\",\n          \"fries\": 25,\n          \"friesColor\": \"hsl(190, 70%, 50%)\",\n          \"donut\": 117,\n          \"donutColor\": \"hsl(105, 70%, 50%)\"\n        },\n        {\n          \"country\": \"AI\",\n          \"hot dog\": 164,\n          \"hot dogColor\": \"hsl(114, 70%, 50%)\",\n          \"burger\": 191,\n          \"burgerColor\": \"hsl(52, 70%, 50%)\",\n          \"sandwich\": 104,\n          \"sandwichColor\": \"hsl(283, 70%, 50%)\",\n          \"kebab\": 182,\n          \"kebabColor\": \"hsl(357, 70%, 50%)\",\n          \"fries\": 121,\n          \"friesColor\": \"hsl(89, 70%, 50%)\",\n          \"donut\": 167,\n          \"donutColor\": \"hsl(321, 70%, 50%)\"\n        },\n        {\n          \"country\": \"AL\",\n          \"hot dog\": 167,\n          \"hot dogColor\": \"hsl(172, 70%, 50%)\",\n          \"burger\": 0,\n          \"burgerColor\": \"hsl(155, 70%, 50%)\",\n          \"sandwich\": 39,\n          \"sandwichColor\": \"hsl(96, 70%, 50%)\",\n          \"kebab\": 124,\n          \"kebabColor\": \"hsl(113, 70%, 50%)\",\n          \"fries\": 78,\n          \"friesColor\": \"hsl(45, 70%, 50%)\",\n          \"donut\": 195,\n          \"donutColor\": \"hsl(27, 70%, 50%)\"\n        },\n        {\n          \"country\": \"AM\",\n          \"hot dog\": 42,\n          \"hot dogColor\": \"hsl(290, 70%, 50%)\",\n          \"burger\": 51,\n          \"burgerColor\": \"hsl(70, 70%, 50%)\",\n          \"sandwich\": 63,\n          \"sandwichColor\": \"hsl(113, 70%, 50%)\",\n          \"kebab\": 193,\n          \"kebabColor\": \"hsl(69, 70%, 50%)\",\n          \"fries\": 178,\n          \"friesColor\": \"hsl(33, 70%, 50%)\",\n          \"donut\": 90,\n          \"donutColor\": \"hsl(329, 70%, 50%)\"\n        }\n    ]\n\n    const MyResponsiveBar = ({data, vertOrHor}) => (\n        <ResponsiveBar\n            data={data}\n            keys={[\n                'hot dog',\n                'burger',\n                'sandwich',\n                'kebab',\n                'fries',\n                'donut'\n            ]}\n            indexBy=\"country\"\n            layout={vertOrHor}\n            margin={{ top: 50, right: 130, bottom: 50, left: 60 }}\n            padding={0.3}\n            valueScale={{ type: 'linear' }}\n            indexScale={{ type: 'band', round: true }}\n            colors={{ scheme: 'nivo' }}\n            defs={[\n                {\n                    id: 'dots',\n                    type: 'patternDots',\n                    background: 'inherit',\n                    color: '#38bcb2',\n                    size: 4,\n                    padding: 1,\n                    stagger: true\n                },\n                {\n                    id: 'lines',\n                    type: 'patternLines',\n                    background: 'inherit',\n                    color: '#eed312',\n                    rotation: -45,\n                    lineWidth: 6,\n                    spacing: 10\n                }\n            ]}\n            fill={[\n                {\n                    match: {\n                        id: 'fries'\n                    },\n                    id: 'dots'\n                },\n                {\n                    match: {\n                        id: 'sandwich'\n                    },\n                    id: 'lines'\n                }\n            ]}\n            borderColor={{\n                from: 'color',\n                modifiers: [\n                    [\n                        'darker',\n                        1.6\n                    ]\n                ]\n            }}\n            axisTop={null}\n            axisRight={null}\n            axisBottom={{\n                tickSize: 5,\n                tickPadding: 5,\n                tickRotation: 0,\n                legend:(vertOrHor === 'vertical' ? 'country' : 'food'),\n                legendPosition: 'middle',\n                legendOffset: 32\n            }}\n            axisLeft={{\n                tickSize: 5,\n                tickPadding: 5,\n                tickRotation: 0,\n                legend:(vertOrHor === 'vertical' ? 'food' : 'country'),\n                legendPosition: 'middle',\n                legendOffset: -40\n            }}\n            labelSkipWidth={12}\n            labelSkipHeight={20}\n            labelTextColor={{\n                from: 'color',\n                modifiers: [\n                    [\n                        'darker',\n                        1.6\n                    ]\n                ]\n            }}\n            legends={[\n                {\n                    dataFrom: 'keys',\n                    anchor: 'bottom-right', //'top', // '\n                    direction: 'column',\n                    justify: false,\n                    translateX: 120,\n                    translateY: 0,\n                    itemsSpacing: 2,\n                    itemWidth: 100,\n                    itemHeight: 30,\n                    itemDirection: 'left-to-right',\n                    itemOpacity: 0.85,\n                    symbolSize: 20,\n                    effects: [\n                        {\n                            on: 'hover',\n                            style: {\n                                itemOpacity: 1\n                            }\n                        }\n                    ]\n                }\n            ]}\n            tooltip={({ id, value, color }) => (\n                <div\n                    style={{\n                        padding: 12,\n                        color,\n                        background: '#222222',\n                    }}\n                >\n                    <span>\n                        Bar Graph Value\n                    </span>\n                    <br />\n                    <strong>\n                        {id}: {value}\n                    </strong>\n                </div>\n            )}\n            role=\"application\"\n            ariaLabel=\"Nivo bar chart demo\"\n            barAriaLabel={function(e){return e.id+\": \"+e.formattedValue+\" in country: \"+e.indexValue}}\n        />\n    )\n\n    MyResponsiveBar.propTypes = {\n        data: PropTypes.object.isRequired,\n        vertOrHor: PropTypes.string.isRequired\n    } \n\n    return(\n        <>\n        <CCard>\n            <CCardHeader>\n                <CRow>\n                    <CCol sm={6}>\n                    <h4>Bar Graph</h4>\n                    </CCol>\n                    <CCol sm={3}>\n                        <CButtonGroup>\n                            {['Graph', 'Data'].map( (value) => (\n                                <CButton \n                                color='outline-secondary'\n                                active={value === viewType}\n                                onClick={() => setViewType(value)}\n                                key={value}>\n                                    {value}\n                                </CButton>\n                            ))}\n                        </CButtonGroup>\n                    </CCol>\n                    <CCol sm={3}>\n                        <CButtonGroup>\n                            {['horizontal', 'vertical'].map( (value) => (\n                                <CButton \n                                color='outline-secondary'\n                                active={value === vertOrHor}\n                                onClick={() => setVertOrHor(value.toLowerCase())}\n                                key={value}>\n                                    {value}\n                                </CButton>\n                            ))}\n                        </CButtonGroup>\n                    </CCol>\n                </CRow>\n                \n            </CCardHeader>\n            <CCardBody style={{height:'600px'}}>\n                {viewType === 'Graph'\n                ?<MyResponsiveBar \n                    data={barData}\n                    vertOrHor={vertOrHor}\n                     />\n                :<DataTableView tableData={barData} />\n                }\n            </CCardBody>\n        </CCard>\n        </>\n    )\n}\nexport default NivoBar\n","var baseForOwn = require('./_baseForOwn'),\n    createBaseEach = require('./_createBaseEach');\n\n/**\n * The base implementation of `_.forEach` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array|Object} Returns `collection`.\n */\nvar baseEach = createBaseEach(baseForOwn);\n\nmodule.exports = baseEach;\n","var baseFor = require('./_baseFor'),\n    keys = require('./keys');\n\n/**\n * The base implementation of `_.forOwn` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Object} Returns `object`.\n */\nfunction baseForOwn(object, iteratee) {\n  return object && baseFor(object, iteratee, keys);\n}\n\nmodule.exports = baseForOwn;\n","var Stack = require('./_Stack'),\n    baseIsEqual = require('./_baseIsEqual');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * The base implementation of `_.isMatch` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to inspect.\n * @param {Object} source The object of property values to match.\n * @param {Array} matchData The property names, values, and compare flags to match.\n * @param {Function} [customizer] The function to customize comparisons.\n * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n */\nfunction baseIsMatch(object, source, matchData, customizer) {\n  var index = matchData.length,\n      length = index,\n      noCustomizer = !customizer;\n\n  if (object == null) {\n    return !length;\n  }\n  object = Object(object);\n  while (index--) {\n    var data = matchData[index];\n    if ((noCustomizer && data[2])\n          ? data[1] !== object[data[0]]\n          : !(data[0] in object)\n        ) {\n      return false;\n    }\n  }\n  while (++index < length) {\n    data = matchData[index];\n    var key = data[0],\n        objValue = object[key],\n        srcValue = data[1];\n\n    if (noCustomizer && data[2]) {\n      if (objValue === undefined && !(key in object)) {\n        return false;\n      }\n    } else {\n      var stack = new Stack;\n      if (customizer) {\n        var result = customizer(objValue, srcValue, key, object, source, stack);\n      }\n      if (!(result === undefined\n            ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)\n            : result\n          )) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\nmodule.exports = baseIsMatch;\n","var baseMatches = require('./_baseMatches'),\n    baseMatchesProperty = require('./_baseMatchesProperty'),\n    identity = require('./identity'),\n    isArray = require('./isArray'),\n    property = require('./property');\n\n/**\n * The base implementation of `_.iteratee`.\n *\n * @private\n * @param {*} [value=_.identity] The value to convert to an iteratee.\n * @returns {Function} Returns the iteratee.\n */\nfunction baseIteratee(value) {\n  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n  if (typeof value == 'function') {\n    return value;\n  }\n  if (value == null) {\n    return identity;\n  }\n  if (typeof value == 'object') {\n    return isArray(value)\n      ? baseMatchesProperty(value[0], value[1])\n      : baseMatches(value);\n  }\n  return property(value);\n}\n\nmodule.exports = baseIteratee;\n","var baseIsMatch = require('./_baseIsMatch'),\n    getMatchData = require('./_getMatchData'),\n    matchesStrictComparable = require('./_matchesStrictComparable');\n\n/**\n * The base implementation of `_.matches` which doesn't clone `source`.\n *\n * @private\n * @param {Object} source The object of property values to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatches(source) {\n  var matchData = getMatchData(source);\n  if (matchData.length == 1 && matchData[0][2]) {\n    return matchesStrictComparable(matchData[0][0], matchData[0][1]);\n  }\n  return function(object) {\n    return object === source || baseIsMatch(object, source, matchData);\n  };\n}\n\nmodule.exports = baseMatches;\n","var baseIsEqual = require('./_baseIsEqual'),\n    get = require('./get'),\n    hasIn = require('./hasIn'),\n    isKey = require('./_isKey'),\n    isStrictComparable = require('./_isStrictComparable'),\n    matchesStrictComparable = require('./_matchesStrictComparable'),\n    toKey = require('./_toKey');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n *\n * @private\n * @param {string} path The path of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatchesProperty(path, srcValue) {\n  if (isKey(path) && isStrictComparable(srcValue)) {\n    return matchesStrictComparable(toKey(path), srcValue);\n  }\n  return function(object) {\n    var objValue = get(object, path);\n    return (objValue === undefined && objValue === srcValue)\n      ? hasIn(object, path)\n      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\n  };\n}\n\nmodule.exports = baseMatchesProperty;\n","/**\n * The base implementation of `_.property` without support for deep paths.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction baseProperty(key) {\n  return function(object) {\n    return object == null ? undefined : object[key];\n  };\n}\n\nmodule.exports = baseProperty;\n","var baseGet = require('./_baseGet');\n\n/**\n * A specialized version of `baseProperty` which supports deep paths.\n *\n * @private\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction basePropertyDeep(path) {\n  return function(object) {\n    return baseGet(object, path);\n  };\n}\n\nmodule.exports = basePropertyDeep;\n","var isArrayLike = require('./isArrayLike');\n\n/**\n * Creates a `baseEach` or `baseEachRight` function.\n *\n * @private\n * @param {Function} eachFunc The function to iterate over a collection.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseEach(eachFunc, fromRight) {\n  return function(collection, iteratee) {\n    if (collection == null) {\n      return collection;\n    }\n    if (!isArrayLike(collection)) {\n      return eachFunc(collection, iteratee);\n    }\n    var length = collection.length,\n        index = fromRight ? length : -1,\n        iterable = Object(collection);\n\n    while ((fromRight ? index-- : ++index < length)) {\n      if (iteratee(iterable[index], index, iterable) === false) {\n        break;\n      }\n    }\n    return collection;\n  };\n}\n\nmodule.exports = createBaseEach;\n","var isStrictComparable = require('./_isStrictComparable'),\n    keys = require('./keys');\n\n/**\n * Gets the property names, values, and compare flags of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the match data of `object`.\n */\nfunction getMatchData(object) {\n  var result = keys(object),\n      length = result.length;\n\n  while (length--) {\n    var key = result[length],\n        value = object[key];\n\n    result[length] = [key, value, isStrictComparable(value)];\n  }\n  return result;\n}\n\nmodule.exports = getMatchData;\n","var isObject = require('./isObject');\n\n/**\n * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` if suitable for strict\n *  equality comparisons, else `false`.\n */\nfunction isStrictComparable(value) {\n  return value === value && !isObject(value);\n}\n\nmodule.exports = isStrictComparable;\n","/**\n * A specialized version of `matchesProperty` for source values suitable\n * for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction matchesStrictComparable(key, srcValue) {\n  return function(object) {\n    if (object == null) {\n      return false;\n    }\n    return object[key] === srcValue &&\n      (srcValue !== undefined || (key in Object(object)));\n  };\n}\n\nmodule.exports = matchesStrictComparable;\n","var baseProperty = require('./_baseProperty'),\n    basePropertyDeep = require('./_basePropertyDeep'),\n    isKey = require('./_isKey'),\n    toKey = require('./_toKey');\n\n/**\n * Creates a function that returns the value at `path` of a given object.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n * @example\n *\n * var objects = [\n *   { 'a': { 'b': 2 } },\n *   { 'a': { 'b': 1 } }\n * ];\n *\n * _.map(objects, _.property('a.b'));\n * // => [2, 1]\n *\n * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n * // => [1, 2]\n */\nfunction property(path) {\n  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\n}\n\nmodule.exports = property;\n"],"names":["require","CTable","CTableHead","CTableBody","CTableRow","CTableHeaderCell","CTableDataCell","tableData","columns","Object","keys","bordered","striped","map","data","scope","toUpperCase","rowData","colId","slice","Array","prototype","stackValue","d","key","BarAnnotations","bars","annotations","boundAnnotations","useAnnotations","getPosition","bar","x","width","y","height","getDimensions","size","Math","max","_jsx","annotation","i","Annotation","BarLegends","legends","toggleSerie","legend","BoxLegendSvg","containerWidth","containerHeight","dataFrom","label","defaultProps","indexBy","groupMode","layout","reverse","minValue","maxValue","valueScale","type","indexScale","round","padding","innerPadding","axisBottom","axisLeft","enableGridX","enableGridY","enableLabel","labelSkipWidth","labelSkipHeight","labelTextColor","from","theme","colorBy","colors","scheme","borderRadius","borderWidth","borderColor","isInteractive","tooltip","color","BasicTooltip","id","value","formattedValue","enableChip","tooltipLabel","datum","indexValue","initialHiddenIds","markers","svgDefaultProps","layers","barComponent","style","labelColor","labelOpacity","labelX","labelY","transform","shouldRenderLabel","onClick","onMouseEnter","onMouseLeave","isFocusable","ariaLabel","ariaLabelledBy","ariaDescribedBy","useTheme","useTooltip","showTooltipFromEvent","showTooltipAt","hideTooltip","renderTooltip","useMemo","createElement","handleClick","useCallback","event","handleTooltip","handleMouseEnter","handleMouseLeave","handleFocus","absX","absY","handleBlur","_jsxs","animated","g","rect","to","rx","ry","fill","strokeWidth","stroke","focusable","tabIndex","undefined","onMouseMove","onFocus","onBlur","text","textAnchor","dominantBaseline","fillOpacity","labels","pointerEvents","defs","animate","motionConfig","role","canvasDefaultProps","pixelRatio","window","devicePixelRatio","getIndexScale","getIndex","axis","computeScale","all","min","normalizeData","item","reduce","acc","filterNullValues","coerceValue","Number","gt","other","lt","range","start","end","repeat","_","index","clampToZero","generateVerticalGroupedBars","barWidth","yRef","formatValue","getColor","getTooltipLabel","u","xScale","yScale","margin","compare","cleanedData","forEach","domain","length","rawValue","barHeight","barData","hidden","push","left","top","generateHorizontalGroupedBars","xRef","c","generateGroupedBars","s","indexScaleConfig","hiddenIds","v","props","filter","includes","otherAxis","scaleSpec","clampMin","values","entry","k","Boolean","isFinite","scale","bandwidth","params","a","ge","flattenDeep","arr","some","isArray","concat","generateVerticalStackedBars","stackedData","stackedDataItem","t","generateHorizontalStackedBars","generateStackedBars","array","b","constant","order","orderNone","offset","offsetNone","stack","oz","kz","apply","this","arguments","m","n","sz","sij","ki","si","j","call","stackOffsetDiverging","num","getLegendData","direction","legendLabel","getLegendLabel","getPropertyAccessor","_uniqBy","useBar","valueFormat","useState","setHiddenIds","state","indexOf","usePropertyAccessor","getLabel","useValueFormatter","useOrdinalColorScale","getBorderColor","useInheritedColor","getLabelColor","barsWithValue","shouldRenderBarLabel","legendData","find","legendsWithData","InnerBar","partialMargin","axisTop","axisRight","gridXValues","gridYValues","barAriaLabel","barAriaLabelledBy","barAriaDescribedBy","useMotionConfig","springConfig","config","useDimensions","outerWidth","outerHeight","innerWidth","innerHeight","transition","useTransition","enter","update","leave","immediate","commonProps","boundDefs","bindDefs","dataKey","targetKey","layerById","axes","grid","Axes","right","bottom","Fragment","Grid","xValues","yValues","CartesianMarkers","layerContext","SvgWrapper","layer","Bar","renderWrapper","otherProps","Container","findBarUnderCursor","nodes","node","isCursorInRect","InnerBarCanvas","renderBar","ctx","fillStyle","strokeStyle","lineWidth","beginPath","radius","moveTo","lineTo","quadraticCurveTo","closePath","textBaseline","textAlign","fillText","N","canvasRef","canvasEl","useRef","useComputedAnnotations","useEffect","current","_canvasEl$current","getContext","background","fillRect","translate","line","renderGridLinesToCanvas","renderAxesToCanvas","renderLegendToCanvas","renderAnnotationsToCanvas","save","handleMouseHover","getRelativeCursor","ref","canvas","cursor","BarCanvas","forwardRef","children","ResponsiveBar","ResponsiveWrapper","vertOrHor","setVertOrHor","viewType","setViewType","MyResponsiveBar","stagger","rotation","spacing","match","modifiers","tickSize","tickPadding","tickRotation","legendPosition","legendOffset","anchor","justify","translateX","translateY","itemsSpacing","itemWidth","itemHeight","itemDirection","itemOpacity","symbolSize","effects","on","e","CCard","CCardHeader","CRow","CCol","sm","CButtonGroup","CButton","active","toLowerCase","CCardBody","DataTable","baseForOwn","baseEach","createBaseEach","module","exports","baseFor","object","iteratee","Stack","baseIsEqual","source","matchData","customizer","noCustomizer","objValue","srcValue","result","COMPARE_PARTIAL_FLAG","baseMatches","baseMatchesProperty","identity","property","baseIsMatch","getMatchData","matchesStrictComparable","get","hasIn","isKey","isStrictComparable","toKey","path","baseGet","isArrayLike","eachFunc","fromRight","collection","iterable","isObject","baseProperty","basePropertyDeep"],"sourceRoot":""}