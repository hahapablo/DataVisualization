{"version":3,"file":"static/js/3830.fa169019.chunk.js","mappings":"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","sources":["../node_modules/d3-shape/src/arc.js","../node_modules/@nivo/arcs/src/arc_labels/ArcLabel.tsx","../node_modules/@nivo/arcs/src/utils.ts","../node_modules/@nivo/arcs/src/arcTransitionMode.ts","../node_modules/@nivo/arcs/src/centers.ts","../node_modules/@nivo/arcs/src/arc_labels/ArcLabelsLayer.tsx","../node_modules/@nivo/arcs/src/arc_link_labels/ArcLinkLabel.tsx","../node_modules/@nivo/arcs/src/arc_link_labels/compute.ts","../node_modules/@nivo/arcs/src/arc_link_labels/useArcLinkLabelsTransition.ts","../node_modules/@nivo/arcs/src/arc_link_labels/ArcLinkLabelsLayer.tsx","../node_modules/@nivo/arcs/src/ArcShape.tsx","../node_modules/@nivo/arcs/src/interpolateArc.ts","../node_modules/@nivo/arcs/src/ArcsLayer.tsx","../node_modules/@nivo/arcs/src/useArcsTransition.ts","../node_modules/@nivo/arcs/src/useArcGenerator.ts","../node_modules/d3-shape/src/descending.js","../node_modules/d3-shape/src/identity.js","../node_modules/@nivo/pie/src/PieLegends.tsx","../node_modules/@nivo/pie/src/props.ts","../node_modules/@nivo/pie/src/PieTooltip.tsx","../node_modules/@nivo/pie/src/hooks.ts","../node_modules/d3-shape/src/pie.js","../node_modules/@nivo/arcs/src/boundingBox.ts","../node_modules/@nivo/pie/src/Arcs.tsx","../node_modules/@nivo/pie/src/Pie.tsx","../node_modules/@nivo/pie/src/ResponsivePie.tsx","../node_modules/d3-path/src/path.js","../node_modules/d3-shape/src/constant.js","../node_modules/d3-shape/src/line.js","../node_modules/d3-shape/src/point.js"],"sourcesContent":["import {path} from \"d3-path\";\nimport constant from \"./constant.js\";\nimport {abs, acos, asin, atan2, cos, epsilon, halfPi, max, min, pi, sin, sqrt, tau} from \"./math.js\";\n\nfunction arcInnerRadius(d) {\n  return d.innerRadius;\n}\n\nfunction arcOuterRadius(d) {\n  return d.outerRadius;\n}\n\nfunction arcStartAngle(d) {\n  return d.startAngle;\n}\n\nfunction arcEndAngle(d) {\n  return d.endAngle;\n}\n\nfunction arcPadAngle(d) {\n  return d && d.padAngle; // Note: optional!\n}\n\nfunction intersect(x0, y0, x1, y1, x2, y2, x3, y3) {\n  var x10 = x1 - x0, y10 = y1 - y0,\n      x32 = x3 - x2, y32 = y3 - y2,\n      t = y32 * x10 - x32 * y10;\n  if (t * t < epsilon) return;\n  t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / t;\n  return [x0 + t * x10, y0 + t * y10];\n}\n\n// Compute perpendicular offset line of length rc.\n// http://mathworld.wolfram.com/Circle-LineIntersection.html\nfunction cornerTangents(x0, y0, x1, y1, r1, rc, cw) {\n  var x01 = x0 - x1,\n      y01 = y0 - y1,\n      lo = (cw ? rc : -rc) / sqrt(x01 * x01 + y01 * y01),\n      ox = lo * y01,\n      oy = -lo * x01,\n      x11 = x0 + ox,\n      y11 = y0 + oy,\n      x10 = x1 + ox,\n      y10 = y1 + oy,\n      x00 = (x11 + x10) / 2,\n      y00 = (y11 + y10) / 2,\n      dx = x10 - x11,\n      dy = y10 - y11,\n      d2 = dx * dx + dy * dy,\n      r = r1 - rc,\n      D = x11 * y10 - x10 * y11,\n      d = (dy < 0 ? -1 : 1) * sqrt(max(0, r * r * d2 - D * D)),\n      cx0 = (D * dy - dx * d) / d2,\n      cy0 = (-D * dx - dy * d) / d2,\n      cx1 = (D * dy + dx * d) / d2,\n      cy1 = (-D * dx + dy * d) / d2,\n      dx0 = cx0 - x00,\n      dy0 = cy0 - y00,\n      dx1 = cx1 - x00,\n      dy1 = cy1 - y00;\n\n  // Pick the closer of the two intersection points.\n  // TODO Is there a faster way to determine which intersection to use?\n  if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;\n\n  return {\n    cx: cx0,\n    cy: cy0,\n    x01: -ox,\n    y01: -oy,\n    x11: cx0 * (r1 / r - 1),\n    y11: cy0 * (r1 / r - 1)\n  };\n}\n\nexport default function() {\n  var innerRadius = arcInnerRadius,\n      outerRadius = arcOuterRadius,\n      cornerRadius = constant(0),\n      padRadius = null,\n      startAngle = arcStartAngle,\n      endAngle = arcEndAngle,\n      padAngle = arcPadAngle,\n      context = null;\n\n  function arc() {\n    var buffer,\n        r,\n        r0 = +innerRadius.apply(this, arguments),\n        r1 = +outerRadius.apply(this, arguments),\n        a0 = startAngle.apply(this, arguments) - halfPi,\n        a1 = endAngle.apply(this, arguments) - halfPi,\n        da = abs(a1 - a0),\n        cw = a1 > a0;\n\n    if (!context) context = buffer = path();\n\n    // Ensure that the outer radius is always larger than the inner radius.\n    if (r1 < r0) r = r1, r1 = r0, r0 = r;\n\n    // Is it a point?\n    if (!(r1 > epsilon)) context.moveTo(0, 0);\n\n    // Or is it a circle or annulus?\n    else if (da > tau - epsilon) {\n      context.moveTo(r1 * cos(a0), r1 * sin(a0));\n      context.arc(0, 0, r1, a0, a1, !cw);\n      if (r0 > epsilon) {\n        context.moveTo(r0 * cos(a1), r0 * sin(a1));\n        context.arc(0, 0, r0, a1, a0, cw);\n      }\n    }\n\n    // Or is it a circular or annular sector?\n    else {\n      var a01 = a0,\n          a11 = a1,\n          a00 = a0,\n          a10 = a1,\n          da0 = da,\n          da1 = da,\n          ap = padAngle.apply(this, arguments) / 2,\n          rp = (ap > epsilon) && (padRadius ? +padRadius.apply(this, arguments) : sqrt(r0 * r0 + r1 * r1)),\n          rc = min(abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments)),\n          rc0 = rc,\n          rc1 = rc,\n          t0,\n          t1;\n\n      // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.\n      if (rp > epsilon) {\n        var p0 = asin(rp / r0 * sin(ap)),\n            p1 = asin(rp / r1 * sin(ap));\n        if ((da0 -= p0 * 2) > epsilon) p0 *= (cw ? 1 : -1), a00 += p0, a10 -= p0;\n        else da0 = 0, a00 = a10 = (a0 + a1) / 2;\n        if ((da1 -= p1 * 2) > epsilon) p1 *= (cw ? 1 : -1), a01 += p1, a11 -= p1;\n        else da1 = 0, a01 = a11 = (a0 + a1) / 2;\n      }\n\n      var x01 = r1 * cos(a01),\n          y01 = r1 * sin(a01),\n          x10 = r0 * cos(a10),\n          y10 = r0 * sin(a10);\n\n      // Apply rounded corners?\n      if (rc > epsilon) {\n        var x11 = r1 * cos(a11),\n            y11 = r1 * sin(a11),\n            x00 = r0 * cos(a00),\n            y00 = r0 * sin(a00),\n            oc;\n\n        // Restrict the corner radius according to the sector angle.\n        if (da < pi && (oc = intersect(x01, y01, x00, y00, x11, y11, x10, y10))) {\n          var ax = x01 - oc[0],\n              ay = y01 - oc[1],\n              bx = x11 - oc[0],\n              by = y11 - oc[1],\n              kc = 1 / sin(acos((ax * bx + ay * by) / (sqrt(ax * ax + ay * ay) * sqrt(bx * bx + by * by))) / 2),\n              lc = sqrt(oc[0] * oc[0] + oc[1] * oc[1]);\n          rc0 = min(rc, (r0 - lc) / (kc - 1));\n          rc1 = min(rc, (r1 - lc) / (kc + 1));\n        }\n      }\n\n      // Is the sector collapsed to a line?\n      if (!(da1 > epsilon)) context.moveTo(x01, y01);\n\n      // Does the sector’s outer ring have rounded corners?\n      else if (rc1 > epsilon) {\n        t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);\n        t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);\n\n        context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01);\n\n        // Have the corners merged?\n        if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw);\n\n        // Otherwise, draw the two corners and the ring.\n        else {\n          context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);\n          context.arc(0, 0, r1, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), !cw);\n          context.arc(t1.cx, t1.cy, rc1, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);\n        }\n      }\n\n      // Or is the outer ring just a circular arc?\n      else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);\n\n      // Is there no inner ring, and it’s a circular sector?\n      // Or perhaps it’s an annular sector collapsed due to padding?\n      if (!(r0 > epsilon) || !(da0 > epsilon)) context.lineTo(x10, y10);\n\n      // Does the sector’s inner ring (or point) have rounded corners?\n      else if (rc0 > epsilon) {\n        t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);\n        t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);\n\n        context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01);\n\n        // Have the corners merged?\n        if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw);\n\n        // Otherwise, draw the two corners and the ring.\n        else {\n          context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);\n          context.arc(0, 0, r0, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), cw);\n          context.arc(t1.cx, t1.cy, rc0, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);\n        }\n      }\n\n      // Or is the inner ring just a circular arc?\n      else context.arc(0, 0, r0, a10, a00, cw);\n    }\n\n    context.closePath();\n\n    if (buffer) return context = null, buffer + \"\" || null;\n  }\n\n  arc.centroid = function() {\n    var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,\n        a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi / 2;\n    return [cos(a) * r, sin(a) * r];\n  };\n\n  arc.innerRadius = function(_) {\n    return arguments.length ? (innerRadius = typeof _ === \"function\" ? _ : constant(+_), arc) : innerRadius;\n  };\n\n  arc.outerRadius = function(_) {\n    return arguments.length ? (outerRadius = typeof _ === \"function\" ? _ : constant(+_), arc) : outerRadius;\n  };\n\n  arc.cornerRadius = function(_) {\n    return arguments.length ? (cornerRadius = typeof _ === \"function\" ? _ : constant(+_), arc) : cornerRadius;\n  };\n\n  arc.padRadius = function(_) {\n    return arguments.length ? (padRadius = _ == null ? null : typeof _ === \"function\" ? _ : constant(+_), arc) : padRadius;\n  };\n\n  arc.startAngle = function(_) {\n    return arguments.length ? (startAngle = typeof _ === \"function\" ? _ : constant(+_), arc) : startAngle;\n  };\n\n  arc.endAngle = function(_) {\n    return arguments.length ? (endAngle = typeof _ === \"function\" ? _ : constant(+_), arc) : endAngle;\n  };\n\n  arc.padAngle = function(_) {\n    return arguments.length ? (padAngle = typeof _ === \"function\" ? _ : constant(+_), arc) : padAngle;\n  };\n\n  arc.context = function(_) {\n    return arguments.length ? ((context = _ == null ? null : _), arc) : context;\n  };\n\n  return arc;\n}\n","import { CSSProperties } from 'react'\nimport { SpringValue, Interpolation, animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { DatumWithArcAndColor } from '../types'\n\nconst staticStyle: CSSProperties = {\n    pointerEvents: 'none',\n}\n\nexport interface ArcLabelProps<Datum extends DatumWithArcAndColor> {\n    datum: Datum\n    label: string\n    style: {\n        progress: SpringValue<number>\n        transform: Interpolation<string>\n        textColor: string\n    }\n}\n\nexport const ArcLabel = <Datum extends DatumWithArcAndColor>({\n    label,\n    style,\n}: ArcLabelProps<Datum>) => {\n    const theme = useTheme()\n\n    return (\n        <animated.g transform={style.transform} opacity={style.progress} style={staticStyle}>\n            <animated.text\n                textAnchor=\"middle\"\n                dominantBaseline=\"central\"\n                style={{\n                    ...theme.labels.text,\n                    fill: style.textColor,\n                }}\n            >\n                {label}\n            </animated.text>\n        </animated.g>\n    )\n}\n","import { useMemo } from 'react'\nimport { radiansToDegrees, positionFromAngle, degreesToRadians } from '@nivo/core'\nimport { DatumWithArc } from './types'\n\n/**\n * Make sure an angle (expressed in radians)\n * always falls in the range 0~2*PI.\n */\nexport const getNormalizedAngle = (angle: number) => {\n    let normalizedAngle = angle % (Math.PI * 2)\n    if (normalizedAngle < 0) {\n        normalizedAngle += Math.PI * 2\n    }\n\n    return normalizedAngle\n}\n\n/**\n * Filter out arcs with a length below `skipAngle`.\n */\nexport const filterDataBySkipAngle = <Datum extends DatumWithArc>(\n    data: Datum[],\n    skipAngle: number\n) =>\n    data.filter(\n        datum => Math.abs(radiansToDegrees(datum.arc.endAngle - datum.arc.startAngle)) >= skipAngle\n    )\n\n/**\n * Memoized version of `filterDataBySkipAngle`.\n */\nexport const useFilteredDataBySkipAngle = <Datum extends DatumWithArc>(\n    data: Datum[],\n    skipAngle: number\n) => useMemo(() => filterDataBySkipAngle(data, skipAngle), [data, skipAngle])\n\nexport const svgEllipticalArcCommand = (\n    radius: number,\n    largeArcFlag: 0 | 1,\n    sweepFlag: 0 | 1,\n    x: number,\n    y: number\n) =>\n    [\n        'A',\n        radius,\n        radius,\n        0, // x-axis-rotation\n        largeArcFlag,\n        sweepFlag,\n        x,\n        y,\n    ].join(' ')\n\nexport const generateSvgArc = (\n    radius: number,\n    originalStartAngle: number,\n    originalEndAngle: number\n): string => {\n    const startAngle = Math.min(originalStartAngle, originalEndAngle)\n    const endAngle = Math.max(originalStartAngle, originalEndAngle)\n\n    const start = positionFromAngle(degreesToRadians(endAngle), radius)\n    const end = positionFromAngle(degreesToRadians(startAngle), radius)\n\n    // we have a full circle, we cannot use a single elliptical arc\n    // to draw it, so we use 2 in that case.\n    if (endAngle - startAngle >= 360) {\n        const mid = positionFromAngle(degreesToRadians(startAngle + 180), radius)\n\n        return [\n            `M ${start.x} ${start.y}`,\n            svgEllipticalArcCommand(radius, 1, 1, mid.x, mid.y),\n            `M ${start.x} ${start.y}`,\n            svgEllipticalArcCommand(radius, 1, 0, mid.x, mid.y),\n        ].join(' ')\n    }\n\n    const largeArcFlag = endAngle - startAngle <= 180 ? 0 : 1\n\n    return [\n        `M ${start.x} ${start.y}`,\n        svgEllipticalArcCommand(radius, largeArcFlag, 0, end.x, end.y),\n    ].join(' ')\n}\n","import { Arc, DatumWithArc } from './types'\nimport { useMemo } from 'react'\n\nexport interface ArcTransitionModeConfig {\n    enter: (arc: Arc) => Arc\n    update: (arc: Arc) => Arc\n    leave: (arc: Arc) => Arc\n}\n\nexport const arcTransitionModes = [\n    'startAngle',\n    'middleAngle',\n    'endAngle',\n    'innerRadius',\n    'centerRadius',\n    'outerRadius',\n    'pushIn',\n    'pushOut',\n] as const\nexport type ArcTransitionMode = typeof arcTransitionModes[number]\n\nexport const arcTransitionModeById: Record<ArcTransitionMode, ArcTransitionModeConfig> = {\n    startAngle: {\n        enter: (arc: Arc) => ({\n            ...arc,\n            endAngle: arc.startAngle,\n        }),\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => ({\n            ...arc,\n            startAngle: arc.endAngle,\n        }),\n    },\n    middleAngle: {\n        enter: (arc: Arc) => {\n            const middleAngle = arc.startAngle + (arc.endAngle - arc.startAngle) / 2\n\n            return {\n                ...arc,\n                startAngle: middleAngle,\n                endAngle: middleAngle,\n            }\n        },\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => {\n            const middleAngle = arc.startAngle + (arc.endAngle - arc.startAngle) / 2\n\n            return {\n                ...arc,\n                startAngle: middleAngle,\n                endAngle: middleAngle,\n            }\n        },\n    },\n    endAngle: {\n        enter: (arc: Arc) => ({\n            ...arc,\n            startAngle: arc.endAngle,\n        }),\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => ({\n            ...arc,\n            endAngle: arc.startAngle,\n        }),\n    },\n    innerRadius: {\n        enter: (arc: Arc) => ({\n            ...arc,\n            outerRadius: arc.innerRadius,\n        }),\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => ({\n            ...arc,\n            innerRadius: arc.outerRadius,\n        }),\n    },\n    centerRadius: {\n        enter: (arc: Arc) => {\n            const centerRadius = arc.innerRadius + (arc.outerRadius - arc.innerRadius) / 2\n\n            return {\n                ...arc,\n                innerRadius: centerRadius,\n                outerRadius: centerRadius,\n            }\n        },\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => {\n            const centerRadius = arc.innerRadius + (arc.outerRadius - arc.innerRadius) / 2\n\n            return {\n                ...arc,\n                innerRadius: centerRadius,\n                outerRadius: centerRadius,\n            }\n        },\n    },\n    outerRadius: {\n        enter: (arc: Arc) => ({\n            ...arc,\n            innerRadius: arc.outerRadius,\n        }),\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => ({\n            ...arc,\n            outerRadius: arc.innerRadius,\n        }),\n    },\n    pushIn: {\n        enter: (arc: Arc) => ({\n            ...arc,\n            innerRadius: arc.innerRadius - arc.outerRadius + arc.innerRadius,\n            outerRadius: arc.innerRadius,\n        }),\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => ({\n            ...arc,\n            innerRadius: arc.outerRadius,\n            outerRadius: arc.outerRadius + arc.outerRadius - arc.innerRadius,\n        }),\n    },\n    pushOut: {\n        enter: (arc: Arc) => ({\n            ...arc,\n            innerRadius: arc.outerRadius,\n            outerRadius: arc.outerRadius + arc.outerRadius - arc.innerRadius,\n        }),\n        update: (arc: Arc) => arc,\n        leave: (arc: Arc) => ({\n            ...arc,\n            innerRadius: arc.innerRadius - arc.outerRadius + arc.innerRadius,\n            outerRadius: arc.innerRadius,\n        }),\n    },\n}\n\nexport interface TransitionExtra<Datum extends DatumWithArc, ExtraProps> {\n    enter: (datum: Datum) => ExtraProps\n    update: (datum: Datum) => ExtraProps\n    leave: (datum: Datum) => ExtraProps\n}\n\nexport const useArcTransitionMode = <Datum extends DatumWithArc, ExtraProps>(\n    mode: ArcTransitionMode,\n    extraTransition?: TransitionExtra<Datum, ExtraProps>\n) =>\n    useMemo(() => {\n        const transitionMode = arcTransitionModeById[mode]\n\n        return {\n            enter: (datum: Datum) => ({\n                progress: 0,\n                ...transitionMode.enter(datum.arc),\n                ...(extraTransition ? extraTransition.enter(datum) : {}),\n            }),\n            update: (datum: Datum) => ({\n                progress: 1,\n                ...transitionMode.update(datum.arc),\n                ...(extraTransition ? extraTransition.update(datum) : {}),\n            }),\n            leave: (datum: Datum) => ({\n                progress: 0,\n                ...transitionMode.leave(datum.arc),\n                ...(extraTransition ? extraTransition.leave(datum) : {}),\n            }),\n        }\n    }, [mode, extraTransition])\n","import { useMemo } from 'react'\nimport { useTransition, to, SpringValue } from '@react-spring/web'\nimport {\n    // @ts-ignore\n    midAngle,\n    positionFromAngle,\n    useMotionConfig,\n} from '@nivo/core'\nimport { Arc, DatumWithArc, Point } from './types'\nimport { filterDataBySkipAngle } from './utils'\nimport { ArcTransitionMode, TransitionExtra, useArcTransitionMode } from './arcTransitionMode'\n\nexport const computeArcCenter = (arc: Arc, offset: number): Point => {\n    const angle = midAngle(arc) - Math.PI / 2\n    const radius = arc.innerRadius + (arc.outerRadius - arc.innerRadius) * offset\n\n    return positionFromAngle(angle, radius)\n}\n\nexport const interpolateArcCenter =\n    (offset: number) =>\n    (\n        startAngleValue: SpringValue<number>,\n        endAngleValue: SpringValue<number>,\n        innerRadiusValue: SpringValue<number>,\n        outerRadiusValue: SpringValue<number>\n    ) =>\n        to(\n            [startAngleValue, endAngleValue, innerRadiusValue, outerRadiusValue],\n            (startAngle, endAngle, innerRadius, outerRadius) => {\n                const centroid = computeArcCenter(\n                    { startAngle, endAngle, innerRadius, outerRadius },\n                    offset\n                )\n\n                return `translate(${centroid.x},${centroid.y})`\n            }\n        )\n\nexport const useArcCentersTransition = <Datum extends DatumWithArc, ExtraProps = unknown>(\n    data: Datum[],\n    // define where the centers should be placed,\n    // 0.0: inner radius\n    // 0.5: center\n    // 1.0: outer radius\n    offset = 0.5,\n    mode: ArcTransitionMode = 'innerRadius',\n    extra?: TransitionExtra<Datum, ExtraProps>\n) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const phases = useArcTransitionMode<Datum, ExtraProps>(mode, extra)\n\n    const transition = useTransition<\n        Datum,\n        {\n            progress: number\n            startAngle: number\n            endAngle: number\n            innerRadius: number\n            outerRadius: number\n        } & ExtraProps\n    >(data, {\n        keys: datum => datum.id,\n        initial: phases.update,\n        from: phases.enter,\n        enter: phases.update,\n        update: phases.update,\n        leave: phases.leave,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return {\n        transition,\n        interpolate: interpolateArcCenter(offset),\n    }\n}\n\nexport interface ArcCenter<Datum extends DatumWithArc> extends Point {\n    data: Datum\n}\n\n/**\n * Compute an array of arc centers from an array of data containing arcs.\n *\n * If you plan to animate those, you could use `useArcCentersTransition`\n * instead, you could use the returned array with react-spring `useTransition`,\n * but this would lead to cartesian transitions (x/y), while `useArcCentersTransition`\n * will generate proper transitions using radius/angle.\n */\nexport const useArcCenters = <\n    Datum extends DatumWithArc,\n    ExtraProps extends Record<string, any> = Record<string, any>\n>({\n    data,\n    offset = 0.5,\n    skipAngle = 0,\n    computeExtraProps = () => ({} as ExtraProps),\n}: {\n    data: Datum[]\n    // define where the centers should be placed,\n    // 0.0: inner radius\n    // 0.5: center\n    // 1.0: outer radius\n    offset?: number\n    // arcs with a length below this (end angle - start angle in degrees)\n    // are going to be excluded, this can typically be used to avoid having\n    // overlapping labels.\n    skipAngle?: number\n    // this can be used to append extra properties to the centers,\n    // can be used to compute a color/label for example.\n    computeExtraProps?: (datum: Datum) => ExtraProps\n}): (ArcCenter<Datum> & ExtraProps)[] =>\n    useMemo(\n        () =>\n            filterDataBySkipAngle<Datum>(data, skipAngle)\n                // compute position and extra props for each eligible datum\n                .map(datum => {\n                    const position = computeArcCenter(datum.arc, offset)\n\n                    return {\n                        ...computeExtraProps(datum),\n                        x: position.x,\n                        y: position.y,\n                        data: datum,\n                    }\n                }),\n        [data, offset, skipAngle, computeExtraProps]\n    )\n","import { createElement, useMemo } from 'react'\nimport { PropertyAccessor, usePropertyAccessor, radiansToDegrees, useTheme } from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { useArcCentersTransition } from '../centers'\nimport { ArcTransitionMode } from '../arcTransitionMode'\nimport { DatumWithArcAndColor } from '../types'\nimport { ArcLabelsProps } from './props'\nimport { ArcLabel, ArcLabelProps } from './ArcLabel'\n\nexport type ArcLabelComponent<Datum extends DatumWithArcAndColor> = (\n    props: ArcLabelProps<Datum>\n) => JSX.Element\n\ninterface ArcLabelsLayerProps<Datum extends DatumWithArcAndColor> {\n    center: [number, number]\n    data: Datum[]\n    label: PropertyAccessor<Datum, string>\n    radiusOffset: ArcLabelsProps<Datum>['arcLabelsRadiusOffset']\n    skipAngle: ArcLabelsProps<Datum>['arcLabelsSkipAngle']\n    textColor: ArcLabelsProps<Datum>['arcLabelsTextColor']\n    transitionMode: ArcTransitionMode\n    component?: ArcLabelsProps<Datum>['arcLabelsComponent']\n}\n\nexport const ArcLabelsLayer = <Datum extends DatumWithArcAndColor>({\n    center,\n    data,\n    transitionMode,\n    label: labelAccessor,\n    radiusOffset,\n    skipAngle,\n    textColor,\n    component = ArcLabel,\n}: ArcLabelsLayerProps<Datum>) => {\n    const getLabel = usePropertyAccessor<Datum, string>(labelAccessor)\n    const theme = useTheme()\n    const getTextColor = useInheritedColor<Datum>(textColor, theme)\n\n    const filteredData = useMemo(\n        () =>\n            data.filter(datum => {\n                return (\n                    Math.abs(radiansToDegrees(datum.arc.endAngle - datum.arc.startAngle)) >=\n                    skipAngle\n                )\n            }),\n        [data, skipAngle]\n    )\n\n    const { transition, interpolate } = useArcCentersTransition<Datum>(\n        filteredData,\n        radiusOffset,\n        transitionMode\n    )\n\n    const Label: ArcLabelComponent<Datum> = component\n\n    return (\n        <g transform={`translate(${center[0]},${center[1]})`}>\n            {transition((transitionProps, datum) => {\n                return createElement(Label, {\n                    key: datum.id,\n                    datum,\n                    label: getLabel(datum),\n                    style: {\n                        ...transitionProps,\n                        transform: interpolate(\n                            transitionProps.startAngle,\n                            transitionProps.endAngle,\n                            transitionProps.innerRadius,\n                            transitionProps.outerRadius\n                        ),\n                        textColor: getTextColor(datum),\n                    },\n                })\n            })}\n        </g>\n    )\n}\n","import { useTheme } from '@nivo/core'\nimport { SpringValue, Interpolation, animated } from '@react-spring/web'\nimport { DatumWithArcAndColor } from '../types'\n\nexport interface ArcLinkLabelProps<Datum extends DatumWithArcAndColor> {\n    datum: Datum\n    label: string\n    style: {\n        path: Interpolation<string>\n        thickness: number\n        textPosition: Interpolation<string>\n        textAnchor: Interpolation<'start' | 'end'>\n        linkColor: SpringValue<string>\n        opacity: SpringValue<number>\n        textColor: SpringValue<string>\n    }\n}\n\nexport const ArcLinkLabel = <Datum extends DatumWithArcAndColor>({\n    label,\n    style,\n}: ArcLinkLabelProps<Datum>) => {\n    const theme = useTheme()\n\n    return (\n        <animated.g opacity={style.opacity}>\n            <animated.path\n                fill=\"none\"\n                stroke={style.linkColor}\n                strokeWidth={style.thickness}\n                d={style.path}\n            />\n            <animated.text\n                transform={style.textPosition}\n                textAnchor={style.textAnchor}\n                dominantBaseline=\"central\"\n                style={{\n                    ...theme.labels.text,\n                    fill: style.textColor,\n                }}\n            >\n                {label}\n            </animated.text>\n        </animated.g>\n    )\n}\n","import { positionFromAngle } from '@nivo/core'\nimport { Arc, Point } from '../types'\nimport { getNormalizedAngle } from '../utils'\nimport { ArcLink } from './types'\n\n/**\n * Compute text anchor for a given arc.\n *\n * `computeArcLink` already computes a `side`, but when using\n * `react-spring`, you cannot have a single interpolation\n * returning several output values, so we need to compute\n * them in separate interpolations.\n */\nexport const computeArcLinkTextAnchor = (arc: Arc): 'start' | 'end' => {\n    const centerAngle = getNormalizedAngle(\n        arc.startAngle + (arc.endAngle - arc.startAngle) / 2 - Math.PI / 2\n    )\n\n    if (centerAngle < Math.PI / 2 || centerAngle > Math.PI * 1.5) {\n        return 'start'\n    }\n\n    return 'end'\n}\n\n/**\n * Compute the link of a single arc, returning its points,\n * please note that points coordinates are relative to\n * the center of the arc.\n */\nexport const computeArcLink = (\n    arc: Arc,\n    offset: number,\n    diagonalLength: number,\n    straightLength: number\n): ArcLink => {\n    const centerAngle = getNormalizedAngle(\n        arc.startAngle + (arc.endAngle - arc.startAngle) / 2 - Math.PI / 2\n    )\n    const point0: Point = positionFromAngle(centerAngle, arc.outerRadius + offset)\n    const point1: Point = positionFromAngle(centerAngle, arc.outerRadius + offset + diagonalLength)\n\n    let side: ArcLink['side']\n    let point2: Point\n    if (centerAngle < Math.PI / 2 || centerAngle > Math.PI * 1.5) {\n        side = 'after'\n        point2 = {\n            x: point1.x + straightLength,\n            y: point1.y,\n        }\n    } else {\n        side = 'before'\n        point2 = {\n            x: point1.x - straightLength,\n            y: point1.y,\n        }\n    }\n\n    return {\n        side,\n        points: [point0, point1, point2],\n    }\n}\n","import { useMemo } from 'react'\nimport { SpringValue, useTransition, to } from '@react-spring/web'\nimport { line } from 'd3-shape'\nimport { useMotionConfig, useTheme } from '@nivo/core'\nimport { InheritedColorConfig, useInheritedColor } from '@nivo/colors'\nimport { DatumWithArcAndColor, Point } from '../types'\nimport { useFilteredDataBySkipAngle } from '../utils'\nimport { computeArcLink, computeArcLinkTextAnchor } from './compute'\n\nconst lineGenerator = line<Point>()\n    .x(d => d.x)\n    .y(d => d.y)\n\ntype AnimatedProps = {\n    startAngle: number\n    endAngle: number\n    innerRadius: number\n    outerRadius: number\n    offset: number\n    diagonalLength: number\n    straightLength: number\n    textOffset: number\n    linkColor: string\n    textColor: string\n    opacity: number\n}\n\nconst useTransitionPhases = <Datum extends DatumWithArcAndColor>({\n    offset,\n    diagonalLength,\n    straightLength,\n    textOffset,\n    getLinkColor,\n    getTextColor,\n}: Pick<AnimatedProps, 'offset' | 'diagonalLength' | 'straightLength' | 'textOffset'> & {\n    getLinkColor: (datum: Datum) => string\n    getTextColor: (datum: Datum) => string\n}): Record<'enter' | 'update' | 'leave', (datum: Datum) => AnimatedProps> =>\n    useMemo(\n        () => ({\n            enter: (datum: Datum) => ({\n                startAngle: datum.arc.startAngle,\n                endAngle: datum.arc.endAngle,\n                innerRadius: datum.arc.innerRadius,\n                outerRadius: datum.arc.outerRadius,\n                offset,\n                diagonalLength: 0,\n                straightLength: 0,\n                textOffset,\n                linkColor: getLinkColor(datum),\n                textColor: getTextColor(datum),\n                opacity: 0,\n            }),\n            update: (d: Datum) => ({\n                startAngle: d.arc.startAngle,\n                endAngle: d.arc.endAngle,\n                innerRadius: d.arc.innerRadius,\n                outerRadius: d.arc.outerRadius,\n                offset,\n                diagonalLength,\n                straightLength,\n                textOffset,\n                linkColor: getLinkColor(d),\n                textColor: getTextColor(d),\n                opacity: 1,\n            }),\n            leave: (d: Datum) => ({\n                startAngle: d.arc.startAngle,\n                endAngle: d.arc.endAngle,\n                innerRadius: d.arc.innerRadius,\n                outerRadius: d.arc.outerRadius,\n                offset,\n                diagonalLength: 0,\n                straightLength: 0,\n                textOffset,\n                linkColor: getLinkColor(d),\n                textColor: getTextColor(d),\n                opacity: 0,\n            }),\n        }),\n        [diagonalLength, straightLength, textOffset, getLinkColor, getTextColor]\n    )\n\nconst interpolateLink = (\n    startAngleValue: SpringValue<AnimatedProps['startAngle']>,\n    endAngleValue: SpringValue<AnimatedProps['endAngle']>,\n    innerRadiusValue: SpringValue<AnimatedProps['innerRadius']>,\n    outerRadiusValue: SpringValue<AnimatedProps['outerRadius']>,\n    offsetValue: SpringValue<AnimatedProps['offset']>,\n    diagonalLengthValue: SpringValue<AnimatedProps['diagonalLength']>,\n    straightLengthValue: SpringValue<AnimatedProps['straightLength']>\n) =>\n    to(\n        [\n            startAngleValue,\n            endAngleValue,\n            innerRadiusValue,\n            outerRadiusValue,\n            offsetValue,\n            diagonalLengthValue,\n            straightLengthValue,\n        ],\n        (\n            startAngle,\n            endAngle,\n            innerRadius,\n            outerRadius,\n            offset,\n            diagonalLengthAnimated,\n            straightLengthAnimated\n        ) => {\n            const { points } = computeArcLink(\n                {\n                    startAngle,\n                    endAngle,\n                    innerRadius,\n                    outerRadius,\n                },\n                offset,\n                diagonalLengthAnimated,\n                straightLengthAnimated\n            )\n\n            return lineGenerator(points)\n        }\n    )\n\nconst interpolateTextAnchor = (\n    startAngleValue: SpringValue<AnimatedProps['startAngle']>,\n    endAngleValue: SpringValue<AnimatedProps['endAngle']>,\n    innerRadiusValue: SpringValue<AnimatedProps['innerRadius']>,\n    outerRadiusValue: SpringValue<AnimatedProps['outerRadius']>\n) =>\n    to(\n        [startAngleValue, endAngleValue, innerRadiusValue, outerRadiusValue],\n        (startAngle, endAngle, innerRadius, outerRadius) => {\n            return computeArcLinkTextAnchor({\n                startAngle,\n                endAngle,\n                innerRadius,\n                outerRadius,\n            })\n        }\n    )\n\n/**\n * Interpolating the text position involves almost the same computation\n * as `interpolateLink`, unfortunately `react-spring` does not support\n * multiple output values from a single interpolation.\n *\n * We should revise this if `react-spring` adds this feature at some point.\n */\nconst interpolateTextPosition = (\n    startAngleValue: SpringValue<AnimatedProps['startAngle']>,\n    endAngleValue: SpringValue<AnimatedProps['endAngle']>,\n    innerRadiusValue: SpringValue<AnimatedProps['innerRadius']>,\n    outerRadiusValue: SpringValue<AnimatedProps['outerRadius']>,\n    offsetValue: SpringValue<AnimatedProps['offset']>,\n    diagonalLengthValue: SpringValue<AnimatedProps['diagonalLength']>,\n    straightLengthValue: SpringValue<AnimatedProps['straightLength']>,\n    textOffsetValue: SpringValue<AnimatedProps['textOffset']>\n) =>\n    to(\n        [\n            startAngleValue,\n            endAngleValue,\n            innerRadiusValue,\n            outerRadiusValue,\n            offsetValue,\n            diagonalLengthValue,\n            straightLengthValue,\n            textOffsetValue,\n        ],\n        (\n            startAngle,\n            endAngle,\n            innerRadius,\n            outerRadius,\n            offset,\n            diagonalLengthAnimated,\n            straightLengthAnimated,\n            textOffset\n        ) => {\n            const { points, side } = computeArcLink(\n                {\n                    startAngle,\n                    endAngle,\n                    innerRadius,\n                    outerRadius,\n                },\n                offset,\n                diagonalLengthAnimated,\n                straightLengthAnimated\n            )\n\n            const position = points[2]\n            if (side === 'before') {\n                position.x -= textOffset\n            } else {\n                position.x += textOffset\n            }\n\n            return `translate(${position.x},${position.y})`\n        }\n    )\n\n/**\n * This hook can be used to animate a group of arc link labels,\n * if you just want to compute the labels, please use `useArcLinkLabels`.\n */\nexport const useArcLinkLabelsTransition = <Datum extends DatumWithArcAndColor>({\n    data,\n    offset = 0,\n    diagonalLength,\n    straightLength,\n    skipAngle = 0,\n    textOffset,\n    linkColor,\n    textColor,\n}: {\n    data: Datum[]\n    offset?: number\n    diagonalLength: number\n    straightLength: number\n    skipAngle?: number\n    textOffset: number\n    linkColor: InheritedColorConfig<Datum>\n    textColor: InheritedColorConfig<Datum>\n}) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const theme = useTheme()\n    const getLinkColor = useInheritedColor<Datum>(linkColor, theme)\n    const getTextColor = useInheritedColor<Datum>(textColor, theme)\n\n    const filteredData = useFilteredDataBySkipAngle<Datum>(data, skipAngle)\n    const transitionPhases = useTransitionPhases<Datum>({\n        offset,\n        diagonalLength,\n        straightLength,\n        textOffset,\n        getLinkColor,\n        getTextColor,\n    })\n\n    const transition = useTransition<Datum, AnimatedProps>(filteredData, {\n        keys: datum => datum.id,\n        initial: transitionPhases.update,\n        from: transitionPhases.enter,\n        enter: transitionPhases.update,\n        update: transitionPhases.update,\n        leave: transitionPhases.leave,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return {\n        transition,\n        interpolateLink,\n        interpolateTextAnchor,\n        interpolateTextPosition,\n    }\n}\n","import { createElement } from 'react'\nimport { usePropertyAccessor } from '@nivo/core'\nimport { DatumWithArcAndColor } from '../types'\nimport { useArcLinkLabelsTransition } from './useArcLinkLabelsTransition'\nimport { ArcLinkLabelsProps } from './props'\nimport { ArcLinkLabel, ArcLinkLabelProps } from './ArcLinkLabel'\n\nexport type ArcLinkLabelComponent<Datum extends DatumWithArcAndColor> = (\n    props: ArcLinkLabelProps<Datum>\n) => JSX.Element\n\ninterface ArcLinkLabelsLayerProps<Datum extends DatumWithArcAndColor> {\n    center: [number, number]\n    data: Datum[]\n    label: ArcLinkLabelsProps<Datum>['arcLinkLabel']\n    skipAngle: ArcLinkLabelsProps<Datum>['arcLinkLabelsSkipAngle']\n    offset: ArcLinkLabelsProps<Datum>['arcLinkLabelsOffset']\n    diagonalLength: ArcLinkLabelsProps<Datum>['arcLinkLabelsDiagonalLength']\n    straightLength: ArcLinkLabelsProps<Datum>['arcLinkLabelsStraightLength']\n    strokeWidth: ArcLinkLabelsProps<Datum>['arcLinkLabelsThickness']\n    textOffset: ArcLinkLabelsProps<Datum>['arcLinkLabelsTextOffset']\n    textColor: ArcLinkLabelsProps<Datum>['arcLinkLabelsTextColor']\n    linkColor: ArcLinkLabelsProps<Datum>['arcLinkLabelsColor']\n    component?: ArcLinkLabelComponent<Datum>\n}\n\nexport const ArcLinkLabelsLayer = <Datum extends DatumWithArcAndColor>({\n    center,\n    data,\n    label: labelAccessor,\n    skipAngle,\n    offset,\n    diagonalLength,\n    straightLength,\n    strokeWidth,\n    textOffset,\n    textColor,\n    linkColor,\n    component = ArcLinkLabel,\n}: ArcLinkLabelsLayerProps<Datum>) => {\n    const getLabel = usePropertyAccessor<Datum, string>(labelAccessor)\n\n    const { transition, interpolateLink, interpolateTextAnchor, interpolateTextPosition } =\n        useArcLinkLabelsTransition<Datum>({\n            data,\n            skipAngle,\n            offset,\n            diagonalLength,\n            straightLength,\n            textOffset,\n            linkColor,\n            textColor,\n        })\n\n    const Label: ArcLinkLabelComponent<Datum> = component\n\n    return (\n        <g transform={`translate(${center[0]},${center[1]})`}>\n            {transition((transitionProps, datum) => {\n                return createElement(Label, {\n                    key: datum.id,\n                    datum,\n                    label: getLabel(datum),\n                    style: {\n                        ...transitionProps,\n                        thickness: strokeWidth,\n                        path: interpolateLink(\n                            transitionProps.startAngle,\n                            transitionProps.endAngle,\n                            transitionProps.innerRadius,\n                            transitionProps.outerRadius,\n                            transitionProps.offset,\n                            transitionProps.diagonalLength,\n                            transitionProps.straightLength\n                        ),\n                        textAnchor: interpolateTextAnchor(\n                            transitionProps.startAngle,\n                            transitionProps.endAngle,\n                            transitionProps.innerRadius,\n                            transitionProps.outerRadius\n                        ),\n                        textPosition: interpolateTextPosition(\n                            transitionProps.startAngle,\n                            transitionProps.endAngle,\n                            transitionProps.innerRadius,\n                            transitionProps.outerRadius,\n                            transitionProps.offset,\n                            transitionProps.diagonalLength,\n                            transitionProps.straightLength,\n                            transitionProps.textOffset\n                        ),\n                    },\n                })\n            })}\n        </g>\n    )\n}\n","import { useCallback } from 'react'\nimport * as React from 'react'\nimport { SpringValue, Interpolation, animated } from '@react-spring/web'\nimport { DatumWithArcAndColor } from './types'\n\nexport type ArcMouseHandler<Datum extends DatumWithArcAndColor> = (\n    datum: Datum,\n    event: React.MouseEvent<SVGPathElement>\n) => void\n\nexport interface ArcShapeProps<Datum extends DatumWithArcAndColor> {\n    datum: Datum\n    style: {\n        opacity: SpringValue<number>\n        color: SpringValue<string>\n        borderWidth: number\n        borderColor: SpringValue<string>\n        path: Interpolation<string>\n    }\n    onClick?: ArcMouseHandler<Datum>\n    onMouseEnter?: ArcMouseHandler<Datum>\n    onMouseMove?: ArcMouseHandler<Datum>\n    onMouseLeave?: ArcMouseHandler<Datum>\n}\n\n/**\n * A simple arc component to be used typically with an `ArcsLayer`.\n *\n * Please note that the component accepts `SpringValue`s instead of\n * regular values to support animations.\n */\nexport const ArcShape = <Datum extends DatumWithArcAndColor>({\n    datum,\n    style,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n}: ArcShapeProps<Datum>) => {\n    const handleClick = useCallback(event => onClick?.(datum, event), [onClick, datum])\n\n    const handleMouseEnter = useCallback(\n        event => onMouseEnter?.(datum, event),\n        [onMouseEnter, datum]\n    )\n\n    const handleMouseMove = useCallback(event => onMouseMove?.(datum, event), [onMouseMove, datum])\n\n    const handleMouseLeave = useCallback(\n        event => onMouseLeave?.(datum, event),\n        [onMouseLeave, datum]\n    )\n\n    return (\n        <animated.path\n            d={style.path}\n            opacity={style.opacity}\n            fill={datum.fill || style.color}\n            stroke={style.borderColor}\n            strokeWidth={style.borderWidth}\n            onClick={onClick ? handleClick : undefined}\n            onMouseEnter={onMouseEnter ? handleMouseEnter : undefined}\n            onMouseMove={onMouseMove ? handleMouseMove : undefined}\n            onMouseLeave={onMouseLeave ? handleMouseLeave : undefined}\n        />\n    )\n}\n","import { to, SpringValue } from '@react-spring/web'\nimport { ArcGenerator } from './types'\n\n/**\n * Directly animating paths for arcs leads to sub-optimal results\n * as the interpolation is going to be linear while we deal with polar coordinates,\n * this interpolator is going to generate proper arc transitions.\n * It should be used with the `useAnimatedArc` or `useArcsTransition` hooks.\n */\nexport const interpolateArc = (\n    startAngleValue: SpringValue<number>,\n    endAngleValue: SpringValue<number>,\n    innerRadiusValue: SpringValue<number>,\n    outerRadiusValue: SpringValue<number>,\n    arcGenerator: ArcGenerator\n) =>\n    to(\n        [startAngleValue, endAngleValue, innerRadiusValue, outerRadiusValue],\n        (startAngle, endAngle, innerRadius, outerRadius) => {\n            return arcGenerator({\n                startAngle,\n                endAngle,\n                innerRadius: Math.max(0, innerRadius),\n                outerRadius: Math.max(0, outerRadius),\n            })\n        }\n    )\n","import { createElement } from 'react'\nimport { useTheme } from '@nivo/core'\nimport { InheritedColorConfig, useInheritedColor } from '@nivo/colors'\nimport { DatumWithArcAndColor, ArcGenerator } from './types'\nimport { useArcsTransition } from './useArcsTransition'\nimport { ArcTransitionMode } from './arcTransitionMode'\nimport { ArcMouseHandler, ArcShape, ArcShapeProps } from './ArcShape'\n\nexport type ArcComponent<Datum extends DatumWithArcAndColor> = (\n    props: ArcShapeProps<Datum>\n) => JSX.Element\n\ninterface ArcsLayerProps<Datum extends DatumWithArcAndColor> {\n    center: [number, number]\n    data: Datum[]\n    arcGenerator: ArcGenerator\n    borderWidth: number\n    borderColor: InheritedColorConfig<Datum>\n    onClick?: ArcMouseHandler<Datum>\n    onMouseEnter?: ArcMouseHandler<Datum>\n    onMouseMove?: ArcMouseHandler<Datum>\n    onMouseLeave?: ArcMouseHandler<Datum>\n    transitionMode: ArcTransitionMode\n    component?: ArcComponent<Datum>\n}\n\nexport const ArcsLayer = <Datum extends DatumWithArcAndColor>({\n    center,\n    data,\n    arcGenerator,\n    borderWidth,\n    borderColor,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    transitionMode,\n    component = ArcShape,\n}: ArcsLayerProps<Datum>) => {\n    const theme = useTheme()\n    const getBorderColor = useInheritedColor<Datum>(borderColor, theme)\n\n    const { transition, interpolate } = useArcsTransition<\n        Datum,\n        {\n            opacity: number\n            color: string\n            borderColor: string\n        }\n    >(data, transitionMode, {\n        enter: datum => ({\n            opacity: 0,\n            color: datum.color,\n            borderColor: getBorderColor(datum),\n        }),\n        update: datum => ({\n            opacity: 1,\n            color: datum.color,\n            borderColor: getBorderColor(datum),\n        }),\n        leave: datum => ({\n            opacity: 0,\n            color: datum.color,\n            borderColor: getBorderColor(datum),\n        }),\n    })\n\n    const Arc: ArcComponent<Datum> = component\n\n    return (\n        <g transform={`translate(${center[0]},${center[1]})`}>\n            {transition((transitionProps, datum) => {\n                return createElement(Arc, {\n                    key: datum.id,\n                    datum,\n                    style: {\n                        ...transitionProps,\n                        borderWidth,\n                        path: interpolate(\n                            transitionProps.startAngle,\n                            transitionProps.endAngle,\n                            transitionProps.innerRadius,\n                            transitionProps.outerRadius,\n                            arcGenerator\n                        ),\n                    },\n                    onClick,\n                    onMouseEnter,\n                    onMouseMove,\n                    onMouseLeave,\n                })\n            })}\n        </g>\n    )\n}\n","import { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { DatumWithArc } from './types'\nimport { ArcTransitionMode, useArcTransitionMode, TransitionExtra } from './arcTransitionMode'\nimport { interpolateArc } from './interpolateArc'\n\n/**\n * This hook can be used to animate a group of arcs,\n * if you want to animate a single arc,\n * please have a look at the `useAnimatedArc` hook.\n */\nexport const useArcsTransition = <Datum extends DatumWithArc, ExtraProps = unknown>(\n    data: Datum[],\n    mode: ArcTransitionMode = 'innerRadius',\n    extra?: TransitionExtra<Datum, ExtraProps>\n) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const phases = useArcTransitionMode<Datum, ExtraProps>(mode, extra)\n\n    const transition = useTransition<\n        Datum,\n        {\n            progress: number\n            startAngle: number\n            endAngle: number\n            innerRadius: number\n            outerRadius: number\n        } & ExtraProps\n    >(data, {\n        keys: datum => datum.id,\n        initial: phases.update,\n        from: phases.enter,\n        enter: phases.update,\n        update: phases.update,\n        leave: phases.leave,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return {\n        transition,\n        interpolate: interpolateArc,\n    }\n}\n","import { useMemo } from 'react'\nimport { arc as d3Arc } from 'd3-shape'\nimport { ArcGenerator, Arc } from './types'\n\n/**\n * Memoize a d3 arc generator.\n *\n * Please note that both inner/outer radius aren't static\n * and should come from the arc itself, while it requires\n * more props on the arcs, it provides more flexibility\n * because it's not limited to pie then but can also work\n * with charts such as sunbursts.\n */\nexport const useArcGenerator = ({\n    cornerRadius = 0,\n    padAngle = 0,\n}: {\n    cornerRadius?: number\n    padAngle?: number\n} = {}): ArcGenerator =>\n    useMemo(\n        () =>\n            d3Arc<Arc>()\n                .innerRadius(arc => arc.innerRadius)\n                .outerRadius(arc => arc.outerRadius)\n                .cornerRadius(cornerRadius)\n                .padAngle(padAngle),\n        [cornerRadius, padAngle]\n    )\n","export default function(a, b) {\n  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;\n}\n","export default function(d) {\n  return d;\n}\n","import { BoxLegendSvg } from '@nivo/legends'\nimport { CompletePieSvgProps, ComputedDatum, DatumId } from './types'\n\ninterface PieLegendsProps<RawDatum> {\n    width: number\n    height: number\n    legends: CompletePieSvgProps<RawDatum>['legends']\n    data: Omit<ComputedDatum<RawDatum>, 'arc'>[]\n    toggleSerie: (id: DatumId) => void\n}\n\nconst PieLegends = <RawDatum,>({\n    width,\n    height,\n    legends,\n    data,\n    toggleSerie,\n}: PieLegendsProps<RawDatum>) => {\n    return (\n        <>\n            {legends.map((legend, i) => (\n                <BoxLegendSvg\n                    key={i}\n                    {...legend}\n                    containerWidth={width}\n                    containerHeight={height}\n                    data={legend.data ?? data}\n                    toggleSerie={legend.toggleSerie ? toggleSerie : undefined}\n                />\n            ))}\n        </>\n    )\n}\n\nexport default PieLegends\n","import { OrdinalColorScaleConfig } from '@nivo/colors'\nimport { ArcTransitionMode } from '@nivo/arcs'\nimport { PieTooltip } from './PieTooltip'\n\nexport const defaultProps = {\n    id: 'id',\n    value: 'value',\n    sortByValue: false,\n    innerRadius: 0,\n    padAngle: 0,\n    cornerRadius: 0,\n\n    layers: ['arcLinkLabels', 'arcs', 'arcLabels', 'legends'],\n\n    // layout\n    startAngle: 0,\n    endAngle: 360,\n    fit: true,\n    activeInnerRadiusOffset: 0,\n    activeOuterRadiusOffset: 0,\n\n    // border\n    borderWidth: 0,\n    borderColor: {\n        from: 'color',\n        modifiers: [['darker', 1]],\n    },\n\n    // arc labels\n    enableArcLabels: true,\n    arcLabel: 'formattedValue',\n    arcLabelsSkipAngle: 0,\n    arcLabelsRadiusOffset: 0.5,\n    arcLabelsTextColor: { theme: 'labels.text.fill' },\n\n    // arc link labels\n    enableArcLinkLabels: true,\n    arcLinkLabel: 'id',\n    arcLinkLabelsSkipAngle: 0,\n    arcLinkLabelsOffset: 0,\n    arcLinkLabelsDiagonalLength: 16,\n    arcLinkLabelsStraightLength: 24,\n    arcLinkLabelsThickness: 1,\n    arcLinkLabelsTextOffset: 6,\n    arcLinkLabelsTextColor: { theme: 'labels.text.fill' },\n    arcLinkLabelsColor: { theme: 'axis.ticks.line.stroke' },\n\n    colors: { scheme: 'nivo' } as unknown as OrdinalColorScaleConfig,\n    defs: [],\n    fill: [],\n\n    isInteractive: true,\n\n    animate: true,\n    motionConfig: 'gentle',\n    transitionMode: 'innerRadius' as ArcTransitionMode,\n\n    tooltip: PieTooltip,\n\n    legends: [],\n\n    role: 'img',\n\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio ?? 1 : 1,\n}\n","import { BasicTooltip } from '@nivo/tooltip'\nimport { ComputedDatum } from './types'\n\nexport const PieTooltip = <RawDatum,>({ datum }: { datum: ComputedDatum<RawDatum> }) => (\n    <BasicTooltip\n        id={datum.id}\n        value={datum.formattedValue}\n        enableChip={true}\n        color={datum.color}\n    />\n)\n\nexport default PieTooltip\n","import { useCallback, useMemo, useState } from 'react'\nimport { pie as d3Pie } from 'd3-shape'\nimport { useArcGenerator, computeArcBoundingBox } from '@nivo/arcs'\nimport {\n    degreesToRadians,\n    radiansToDegrees,\n    useValueFormatter,\n    usePropertyAccessor,\n} from '@nivo/core'\nimport { OrdinalColorScaleConfig, useOrdinalColorScale } from '@nivo/colors'\nimport { defaultProps } from './props'\nimport { CompletePieSvgProps, ComputedDatum, DatumId, PieArc, PieCustomLayerProps } from './types'\n\ninterface MayHaveLabel {\n    label?: string | number\n}\n\n/**\n * Format data so that we get a consistent data structure.\n * It will also add the `formattedValue` and `color` property.\n */\nexport const useNormalizedData = <RawDatum extends MayHaveLabel>({\n    data,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueFormat,\n    colors = defaultProps.colors as OrdinalColorScaleConfig<\n        Omit<ComputedDatum<RawDatum>, 'arc' | 'color' | 'fill'>\n    >,\n}: Pick<CompletePieSvgProps<RawDatum>, 'id' | 'value' | 'valueFormat' | 'colors'> & {\n    data: RawDatum[]\n}): Omit<ComputedDatum<RawDatum>, 'arc' | 'fill'>[] => {\n    const getId = usePropertyAccessor<RawDatum, DatumId>(id)\n    const getValue = usePropertyAccessor<RawDatum, number>(value)\n    const formatValue = useValueFormatter<number>(valueFormat)\n\n    const getColor = useOrdinalColorScale<Omit<ComputedDatum<RawDatum>, 'arc' | 'color' | 'fill'>>(\n        colors,\n        'id'\n    )\n\n    return useMemo(\n        () =>\n            data.map(datum => {\n                const datumId = getId(datum)\n                const datumValue = getValue(datum)\n\n                const normalizedDatum: Omit<ComputedDatum<RawDatum>, 'arc' | 'color' | 'fill'> = {\n                    id: datumId,\n                    label: datum.label ?? datumId,\n                    hidden: false,\n                    value: datumValue,\n                    formattedValue: formatValue(datumValue),\n                    data: datum,\n                }\n\n                return {\n                    ...normalizedDatum,\n                    color: getColor(normalizedDatum),\n                }\n            }),\n        [data, getId, getValue, formatValue, getColor]\n    )\n}\n\n/**\n * Compute arcs, which don't depend yet on radius.\n */\nexport const usePieArcs = <RawDatum>({\n    data,\n    startAngle,\n    endAngle,\n    innerRadius,\n    outerRadius,\n    padAngle,\n    sortByValue,\n    activeId,\n    activeInnerRadiusOffset,\n    activeOuterRadiusOffset,\n    hiddenIds,\n}: {\n    data: Omit<ComputedDatum<RawDatum>, 'arc' | 'fill'>[]\n    // in degrees\n    startAngle: number\n    // in degrees\n    endAngle: number\n    // in pixels\n    innerRadius: number\n    // in pixels\n    outerRadius: number\n    padAngle: number\n    sortByValue: boolean\n    activeId: null | DatumId\n    activeInnerRadiusOffset: number\n    activeOuterRadiusOffset: number\n    hiddenIds: DatumId[]\n}): {\n    dataWithArc: Omit<ComputedDatum<RawDatum>, 'fill'>[]\n    legendData: Omit<ComputedDatum<RawDatum>, 'arc' | 'fill'>[]\n} => {\n    const pie = useMemo(() => {\n        const innerPie = d3Pie<Omit<ComputedDatum<RawDatum>, 'arc' | 'fill'>>()\n            .value(d => d.value)\n            .startAngle(degreesToRadians(startAngle))\n            .endAngle(degreesToRadians(endAngle))\n            .padAngle(degreesToRadians(padAngle))\n\n        if (!sortByValue) {\n            innerPie.sortValues(null)\n        }\n\n        return innerPie\n    }, [startAngle, endAngle, padAngle, sortByValue])\n\n    return useMemo(() => {\n        const hiddenData = data.filter(item => !hiddenIds.includes(item.id))\n        const dataWithArc = pie(hiddenData).map(\n            (\n                arc: Omit<\n                    PieArc,\n                    'angle' | 'angleDeg' | 'innerRadius' | 'outerRadius' | 'thickness'\n                > & {\n                    data: Omit<ComputedDatum<RawDatum>, 'arc' | 'fill'>\n                }\n            ) => {\n                const angle = Math.abs(arc.endAngle - arc.startAngle)\n\n                return {\n                    ...arc.data,\n                    arc: {\n                        index: arc.index,\n                        startAngle: arc.startAngle,\n                        endAngle: arc.endAngle,\n                        innerRadius:\n                            activeId === arc.data.id\n                                ? innerRadius - activeInnerRadiusOffset\n                                : innerRadius,\n                        outerRadius:\n                            activeId === arc.data.id\n                                ? outerRadius + activeOuterRadiusOffset\n                                : outerRadius,\n                        thickness: outerRadius - innerRadius,\n                        padAngle: arc.padAngle,\n                        angle,\n                        angleDeg: radiansToDegrees(angle),\n                    },\n                }\n            }\n        )\n        const legendData = data.map(item => ({ ...item, hidden: hiddenIds.includes(item.id) }))\n\n        return { dataWithArc, legendData }\n    }, [\n        pie,\n        data,\n        hiddenIds,\n        activeId,\n        innerRadius,\n        activeInnerRadiusOffset,\n        outerRadius,\n        activeOuterRadiusOffset,\n    ])\n}\n\n/**\n * Compute pie layout using explicit radius/innerRadius,\n * expressed in pixels.\n */\nexport const usePie = <RawDatum>({\n    data,\n    radius,\n    innerRadius,\n    startAngle = defaultProps.startAngle,\n    endAngle = defaultProps.endAngle,\n    padAngle = defaultProps.padAngle,\n    sortByValue = defaultProps.sortByValue,\n    cornerRadius = defaultProps.cornerRadius,\n    activeInnerRadiusOffset = defaultProps.activeInnerRadiusOffset,\n    activeOuterRadiusOffset = defaultProps.activeOuterRadiusOffset,\n}: Pick<\n    Partial<CompletePieSvgProps<RawDatum>>,\n    | 'startAngle'\n    | 'endAngle'\n    | 'padAngle'\n    | 'sortByValue'\n    | 'cornerRadius'\n    | 'activeInnerRadiusOffset'\n    | 'activeOuterRadiusOffset'\n> & {\n    data: Omit<ComputedDatum<RawDatum>, 'arc'>[]\n    radius: number\n    innerRadius: number\n}) => {\n    const [activeId, setActiveId] = useState<DatumId | null>(null)\n    const [hiddenIds, setHiddenIds] = useState<DatumId[]>([])\n    const pieArcs = usePieArcs({\n        data,\n        startAngle,\n        endAngle,\n        innerRadius,\n        outerRadius: radius,\n        padAngle,\n        sortByValue,\n        activeId,\n        activeInnerRadiusOffset,\n        activeOuterRadiusOffset,\n        hiddenIds,\n    })\n\n    const toggleSerie = useCallback((id: DatumId) => {\n        setHiddenIds(state =>\n            state.indexOf(id) > -1 ? state.filter(item => item !== id) : [...state, id]\n        )\n    }, [])\n\n    const arcGenerator = useArcGenerator({ cornerRadius, padAngle: degreesToRadians(padAngle) })\n\n    return { ...pieArcs, arcGenerator, setActiveId, toggleSerie }\n}\n\n/**\n * Compute pie layout using a box to find radius/innerRadius,\n * expressed in ratio (0~1), can optionally use the `fit`\n * attribute to find the most space efficient layout.\n *\n * It also returns `centerX`/`centerY` as those can be altered\n * if `fit` is `true`.\n */\nexport const usePieFromBox = <RawDatum>({\n    data,\n    width,\n    height,\n    innerRadius: innerRadiusRatio = defaultProps.innerRadius,\n    startAngle = defaultProps.startAngle,\n    endAngle = defaultProps.endAngle,\n    padAngle = defaultProps.padAngle,\n    sortByValue = defaultProps.sortByValue,\n    cornerRadius = defaultProps.cornerRadius,\n    fit = defaultProps.fit,\n    activeInnerRadiusOffset = defaultProps.activeInnerRadiusOffset,\n    activeOuterRadiusOffset = defaultProps.activeOuterRadiusOffset,\n}: Pick<\n    CompletePieSvgProps<RawDatum>,\n    | 'width'\n    | 'height'\n    | 'innerRadius'\n    | 'startAngle'\n    | 'endAngle'\n    | 'padAngle'\n    | 'sortByValue'\n    | 'cornerRadius'\n    | 'fit'\n    | 'activeInnerRadiusOffset'\n    | 'activeOuterRadiusOffset'\n> & {\n    data: Omit<ComputedDatum<RawDatum>, 'arc'>[]\n}) => {\n    const [activeId, setActiveId] = useState<string | number | null>(null)\n    const [hiddenIds, setHiddenIds] = useState<DatumId[]>([])\n    const computedProps = useMemo(() => {\n        let radius = Math.min(width, height) / 2\n        let innerRadius = radius * Math.min(innerRadiusRatio, 1)\n\n        let centerX = width / 2\n        let centerY = height / 2\n\n        let boundingBox\n        if (fit) {\n            const { points, ...box } = computeArcBoundingBox(\n                centerX,\n                centerY,\n                radius,\n                startAngle - 90,\n                endAngle - 90\n            )\n            const ratio = Math.min(width / box.width, height / box.height)\n\n            const adjustedBox: {\n                width: number\n                height: number\n                x?: number\n                y?: number\n            } = {\n                width: box.width * ratio,\n                height: box.height * ratio,\n            }\n            adjustedBox.x = (width - adjustedBox.width) / 2\n            adjustedBox.y = (height - adjustedBox.height) / 2\n\n            centerX = ((centerX - box.x) / box.width) * box.width * ratio + adjustedBox.x\n            centerY = ((centerY - box.y) / box.height) * box.height * ratio + adjustedBox.y\n\n            boundingBox = { box, ratio, points }\n\n            radius = radius * ratio\n            innerRadius = innerRadius * ratio\n        }\n\n        return {\n            centerX,\n            centerY,\n            radius,\n            innerRadius,\n            debug: boundingBox,\n        }\n    }, [width, height, innerRadiusRatio, startAngle, endAngle, fit, cornerRadius])\n\n    const pieArcs = usePieArcs({\n        data,\n        startAngle,\n        endAngle,\n        innerRadius: computedProps.innerRadius,\n        outerRadius: computedProps.radius,\n        padAngle,\n        sortByValue,\n        activeId,\n        activeInnerRadiusOffset,\n        activeOuterRadiusOffset,\n        hiddenIds,\n    })\n\n    const toggleSerie = useCallback((id: DatumId) => {\n        setHiddenIds(state =>\n            state.indexOf(id) > -1 ? state.filter(item => item !== id) : [...state, id]\n        )\n    }, [])\n\n    const arcGenerator = useArcGenerator({\n        cornerRadius,\n        padAngle: degreesToRadians(padAngle),\n    })\n\n    return {\n        arcGenerator,\n        setActiveId,\n        toggleSerie,\n        ...pieArcs,\n        ...computedProps,\n    }\n}\n\n/**\n * Memoize the context to pass to custom layers.\n */\nexport const usePieLayerContext = <RawDatum>({\n    dataWithArc,\n    arcGenerator,\n    centerX,\n    centerY,\n    radius,\n    innerRadius,\n}: PieCustomLayerProps<RawDatum>): PieCustomLayerProps<RawDatum> =>\n    useMemo(\n        () => ({\n            dataWithArc,\n            arcGenerator,\n            centerX,\n            centerY,\n            radius,\n            innerRadius,\n        }),\n        [dataWithArc, arcGenerator, centerX, centerY, radius, innerRadius]\n    )\n","import constant from \"./constant.js\";\nimport descending from \"./descending.js\";\nimport identity from \"./identity.js\";\nimport {tau} from \"./math.js\";\n\nexport default function() {\n  var value = identity,\n      sortValues = descending,\n      sort = null,\n      startAngle = constant(0),\n      endAngle = constant(tau),\n      padAngle = constant(0);\n\n  function pie(data) {\n    var i,\n        n = data.length,\n        j,\n        k,\n        sum = 0,\n        index = new Array(n),\n        arcs = new Array(n),\n        a0 = +startAngle.apply(this, arguments),\n        da = Math.min(tau, Math.max(-tau, endAngle.apply(this, arguments) - a0)),\n        a1,\n        p = Math.min(Math.abs(da) / n, padAngle.apply(this, arguments)),\n        pa = p * (da < 0 ? -1 : 1),\n        v;\n\n    for (i = 0; i < n; ++i) {\n      if ((v = arcs[index[i] = i] = +value(data[i], i, data)) > 0) {\n        sum += v;\n      }\n    }\n\n    // Optionally sort the arcs by previously-computed values or by data.\n    if (sortValues != null) index.sort(function(i, j) { return sortValues(arcs[i], arcs[j]); });\n    else if (sort != null) index.sort(function(i, j) { return sort(data[i], data[j]); });\n\n    // Compute the arcs! They are stored in the original data's order.\n    for (i = 0, k = sum ? (da - n * pa) / sum : 0; i < n; ++i, a0 = a1) {\n      j = index[i], v = arcs[j], a1 = a0 + (v > 0 ? v * k : 0) + pa, arcs[j] = {\n        data: data[j],\n        index: i,\n        value: v,\n        startAngle: a0,\n        endAngle: a1,\n        padAngle: p\n      };\n    }\n\n    return arcs;\n  }\n\n  pie.value = function(_) {\n    return arguments.length ? (value = typeof _ === \"function\" ? _ : constant(+_), pie) : value;\n  };\n\n  pie.sortValues = function(_) {\n    return arguments.length ? (sortValues = _, sort = null, pie) : sortValues;\n  };\n\n  pie.sort = function(_) {\n    return arguments.length ? (sort = _, sortValues = null, pie) : sort;\n  };\n\n  pie.startAngle = function(_) {\n    return arguments.length ? (startAngle = typeof _ === \"function\" ? _ : constant(+_), pie) : startAngle;\n  };\n\n  pie.endAngle = function(_) {\n    return arguments.length ? (endAngle = typeof _ === \"function\" ? _ : constant(+_), pie) : endAngle;\n  };\n\n  pie.padAngle = function(_) {\n    return arguments.length ? (padAngle = typeof _ === \"function\" ? _ : constant(+_), pie) : padAngle;\n  };\n\n  return pie;\n}\n","import { positionFromAngle, degreesToRadians } from '@nivo/core'\n\n/**\n * Computes the bounding box for a circle arc.\n *\n * Assumptions:\n *   - Anywhere the arc intersects an axis will be a max or a min.\n *   - If the arc doesn't intersect an axis, then the center\n *     will be one corner of the bounding rectangle,\n *     and this is the only case when it will be.\n *   - The only other possible extreme points of the sector to consider\n *     are the endpoints of the radii.\n *\n * This script was built within the help of this answer on stackoverflow:\n *   https://stackoverflow.com/questions/1336663/2d-bounding-box-of-a-sector\n */\nexport const computeArcBoundingBox = (\n    centerX: number,\n    centerY: number,\n    radius: number,\n    // in degrees\n    startAngle: number,\n    // in degrees\n    endAngle: number,\n    includeCenter = true\n) => {\n    let points: [number, number][] = []\n\n    const p0 = positionFromAngle(degreesToRadians(startAngle), radius)\n    points.push([p0.x, p0.y])\n\n    const p1 = positionFromAngle(degreesToRadians(endAngle), radius)\n    points.push([p1.x, p1.y])\n\n    for (\n        let angle = Math.round(Math.min(startAngle, endAngle));\n        angle <= Math.round(Math.max(startAngle, endAngle));\n        angle++\n    ) {\n        if (angle % 90 === 0) {\n            const p = positionFromAngle(degreesToRadians(angle), radius)\n            points.push([p.x, p.y])\n        }\n    }\n\n    points = points.map(([x, y]) => [centerX + x, centerY + y])\n    if (includeCenter) {\n        points.push([centerX, centerY])\n    }\n\n    const xs = points.map(([x]) => x)\n    const ys = points.map(([, y]) => y)\n\n    const x0 = Math.min(...xs)\n    const x1 = Math.max(...xs)\n\n    const y0 = Math.min(...ys)\n    const y1 = Math.max(...ys)\n\n    return {\n        points,\n        x: x0,\n        y: y0,\n        width: x1 - x0,\n        height: y1 - y0,\n    }\n}\n","import { createElement, useMemo } from 'react'\nimport * as React from 'react'\nimport { ArcGenerator, ArcsLayer } from '@nivo/arcs'\nimport { useTooltip } from '@nivo/tooltip'\nimport { ComputedDatum, CompletePieSvgProps } from './types'\n\ninterface ArcsProps<RawDatum> {\n    center: [number, number]\n    data: ComputedDatum<RawDatum>[]\n    arcGenerator: ArcGenerator\n    borderWidth: CompletePieSvgProps<RawDatum>['borderWidth']\n    borderColor: CompletePieSvgProps<RawDatum>['borderColor']\n    isInteractive: CompletePieSvgProps<RawDatum>['isInteractive']\n    onClick?: CompletePieSvgProps<RawDatum>['onClick']\n    onMouseEnter?: CompletePieSvgProps<RawDatum>['onMouseEnter']\n    onMouseMove?: CompletePieSvgProps<RawDatum>['onMouseMove']\n    onMouseLeave?: CompletePieSvgProps<RawDatum>['onMouseLeave']\n    setActiveId: (id: null | string | number) => void\n    tooltip: CompletePieSvgProps<RawDatum>['tooltip']\n    transitionMode: CompletePieSvgProps<RawDatum>['transitionMode']\n}\n\nexport const Arcs = <RawDatum,>({\n    center,\n    data,\n    arcGenerator,\n    borderWidth,\n    borderColor,\n    isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    setActiveId,\n    tooltip,\n    transitionMode,\n}: ArcsProps<RawDatum>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleClick = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            onClick?.(datum, event)\n        }\n    }, [isInteractive, onClick])\n\n    const handleMouseEnter = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            showTooltipFromEvent(createElement(tooltip, { datum }), event)\n            setActiveId(datum.id)\n            onMouseEnter?.(datum, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, setActiveId, onMouseEnter])\n\n    const handleMouseMove = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            showTooltipFromEvent(createElement(tooltip, { datum }), event)\n            onMouseMove?.(datum, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, onMouseMove])\n\n    const handleMouseLeave = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (datum: ComputedDatum<RawDatum>, event: React.MouseEvent<SVGPathElement>) => {\n            hideTooltip()\n            setActiveId(null)\n            onMouseLeave?.(datum, event)\n        }\n    }, [isInteractive, hideTooltip, setActiveId, onMouseLeave])\n\n    return (\n        <ArcsLayer<ComputedDatum<RawDatum>>\n            center={center}\n            data={data}\n            arcGenerator={arcGenerator}\n            borderWidth={borderWidth}\n            borderColor={borderColor}\n            transitionMode={transitionMode}\n            onClick={handleClick}\n            onMouseEnter={handleMouseEnter}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n        />\n    )\n}\n","import { ReactNode, Fragment, createElement } from 'react'\nimport {\n    // @ts-ignore\n    bindDefs,\n    useDimensions,\n    Container,\n    SvgWrapper,\n} from '@nivo/core'\nimport { ArcLabelsLayer, ArcLinkLabelsLayer } from '@nivo/arcs'\nimport { InheritedColorConfig } from '@nivo/colors'\nimport PieLegends from './PieLegends'\nimport { useNormalizedData, usePieFromBox, usePieLayerContext } from './hooks'\nimport { ComputedDatum, PieLayer, PieSvgProps, PieLayerId } from './types'\nimport { defaultProps } from './props'\nimport { Arcs } from './Arcs'\n\nconst InnerPie = <RawDatum,>({\n    data,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueFormat,\n    sortByValue = defaultProps.sortByValue,\n\n    layers = defaultProps.layers as PieLayer<RawDatum>[],\n\n    startAngle = defaultProps.startAngle,\n    endAngle = defaultProps.endAngle,\n    padAngle = defaultProps.padAngle,\n    fit = defaultProps.fit,\n    innerRadius: innerRadiusRatio = defaultProps.innerRadius,\n    cornerRadius = defaultProps.cornerRadius,\n    activeInnerRadiusOffset = defaultProps.activeInnerRadiusOffset,\n    activeOuterRadiusOffset = defaultProps.activeOuterRadiusOffset,\n\n    width,\n    height,\n    margin: partialMargin,\n\n    colors = defaultProps.colors,\n\n    // border\n    borderWidth = defaultProps.borderWidth,\n    borderColor = defaultProps.borderColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n\n    // arc labels\n    enableArcLabels = defaultProps.enableArcLabels,\n    arcLabel = defaultProps.arcLabel,\n    arcLabelsSkipAngle = defaultProps.arcLabelsSkipAngle,\n    arcLabelsTextColor = defaultProps.arcLabelsTextColor,\n    arcLabelsRadiusOffset = defaultProps.arcLabelsRadiusOffset,\n    arcLabelsComponent,\n\n    // arc link labels\n    enableArcLinkLabels = defaultProps.enableArcLinkLabels,\n    arcLinkLabel = defaultProps.arcLinkLabel,\n    arcLinkLabelsSkipAngle = defaultProps.arcLinkLabelsSkipAngle,\n    arcLinkLabelsOffset = defaultProps.arcLinkLabelsOffset,\n    arcLinkLabelsDiagonalLength = defaultProps.arcLinkLabelsDiagonalLength,\n    arcLinkLabelsStraightLength = defaultProps.arcLinkLabelsStraightLength,\n    arcLinkLabelsThickness = defaultProps.arcLinkLabelsThickness,\n    arcLinkLabelsTextOffset = defaultProps.arcLinkLabelsTextOffset,\n    arcLinkLabelsTextColor = defaultProps.arcLinkLabelsTextColor,\n    arcLinkLabelsColor = defaultProps.arcLinkLabelsColor,\n    arcLinkLabelComponent,\n\n    // styling\n    defs = defaultProps.defs,\n    fill = defaultProps.fill,\n\n    // interactivity\n    isInteractive = defaultProps.isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    tooltip = defaultProps.tooltip,\n\n    transitionMode = defaultProps.transitionMode,\n\n    legends = defaultProps.legends,\n    role = defaultProps.role,\n}: PieSvgProps<RawDatum>) => {\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const normalizedData = useNormalizedData<RawDatum>({\n        data,\n        id,\n        value,\n        valueFormat,\n        colors,\n    })\n\n    const {\n        dataWithArc,\n        legendData,\n        arcGenerator,\n        centerX,\n        centerY,\n        radius,\n        innerRadius,\n        setActiveId,\n        toggleSerie,\n    } = usePieFromBox<RawDatum>({\n        data: normalizedData,\n        width: innerWidth,\n        height: innerHeight,\n        fit,\n        innerRadius: innerRadiusRatio,\n        startAngle,\n        endAngle,\n        padAngle,\n        sortByValue,\n        cornerRadius,\n        activeInnerRadiusOffset,\n        activeOuterRadiusOffset,\n    })\n\n    const boundDefs = bindDefs(defs, dataWithArc, fill)\n\n    const layerById: Record<PieLayerId, ReactNode> = {\n        arcLinkLabels: null,\n        arcs: null,\n        arcLabels: null,\n        legends: null,\n    }\n\n    if (enableArcLinkLabels && layers.includes('arcLinkLabels')) {\n        layerById.arcLinkLabels = (\n            <ArcLinkLabelsLayer<ComputedDatum<RawDatum>>\n                key=\"arcLinkLabels\"\n                center={[centerX, centerY]}\n                data={dataWithArc}\n                label={arcLinkLabel}\n                skipAngle={arcLinkLabelsSkipAngle}\n                offset={arcLinkLabelsOffset}\n                diagonalLength={arcLinkLabelsDiagonalLength}\n                straightLength={arcLinkLabelsStraightLength}\n                strokeWidth={arcLinkLabelsThickness}\n                textOffset={arcLinkLabelsTextOffset}\n                textColor={arcLinkLabelsTextColor}\n                linkColor={arcLinkLabelsColor}\n                component={arcLinkLabelComponent}\n            />\n        )\n    }\n\n    if (layers.includes('arcs')) {\n        layerById.arcs = (\n            <Arcs<RawDatum>\n                key=\"arcs\"\n                center={[centerX, centerY]}\n                data={dataWithArc}\n                arcGenerator={arcGenerator}\n                borderWidth={borderWidth}\n                borderColor={borderColor}\n                isInteractive={isInteractive}\n                onClick={onClick}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                setActiveId={setActiveId}\n                tooltip={tooltip}\n                transitionMode={transitionMode}\n            />\n        )\n    }\n\n    if (enableArcLabels && layers.includes('arcLabels')) {\n        layerById.arcLabels = (\n            <ArcLabelsLayer<ComputedDatum<RawDatum>>\n                key=\"arcLabels\"\n                center={[centerX, centerY]}\n                data={dataWithArc}\n                label={arcLabel}\n                radiusOffset={arcLabelsRadiusOffset}\n                skipAngle={arcLabelsSkipAngle}\n                textColor={arcLabelsTextColor}\n                transitionMode={transitionMode}\n                component={arcLabelsComponent}\n            />\n        )\n    }\n\n    if (legends.length > 0 && layers.includes('legends')) {\n        layerById.legends = (\n            <PieLegends<RawDatum>\n                key=\"legends\"\n                width={innerWidth}\n                height={innerHeight}\n                data={legendData}\n                legends={legends}\n                toggleSerie={toggleSerie}\n            />\n        )\n    }\n\n    const layerContext = usePieLayerContext<RawDatum>({\n        dataWithArc,\n        arcGenerator,\n        centerX,\n        centerY,\n        radius,\n        innerRadius,\n    })\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (layerById[layer as PieLayerId] !== undefined) {\n                    return layerById[layer as PieLayerId]\n                }\n\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Pie = <RawDatum,>({\n    isInteractive = defaultProps.isInteractive,\n    animate = defaultProps.animate,\n    motionConfig = defaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: PieSvgProps<RawDatum>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerPie<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { Pie } from './Pie'\nimport { PieSvgProps } from './types'\n\nexport const ResponsivePie = <RawDatum,>(\n    props: Omit<PieSvgProps<RawDatum>, 'width' | 'height'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }: { width: number; height: number }) => (\n            <Pie<RawDatum> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n","var pi = Math.PI,\n    tau = 2 * pi,\n    epsilon = 1e-6,\n    tauEpsilon = tau - epsilon;\n\nfunction Path() {\n  this._x0 = this._y0 = // start of current subpath\n  this._x1 = this._y1 = null; // end of current subpath\n  this._ = \"\";\n}\n\nfunction path() {\n  return new Path;\n}\n\nPath.prototype = path.prototype = {\n  constructor: Path,\n  moveTo: function(x, y) {\n    this._ += \"M\" + (this._x0 = this._x1 = +x) + \",\" + (this._y0 = this._y1 = +y);\n  },\n  closePath: function() {\n    if (this._x1 !== null) {\n      this._x1 = this._x0, this._y1 = this._y0;\n      this._ += \"Z\";\n    }\n  },\n  lineTo: function(x, y) {\n    this._ += \"L\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\n  },\n  quadraticCurveTo: function(x1, y1, x, y) {\n    this._ += \"Q\" + (+x1) + \",\" + (+y1) + \",\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\n  },\n  bezierCurveTo: function(x1, y1, x2, y2, x, y) {\n    this._ += \"C\" + (+x1) + \",\" + (+y1) + \",\" + (+x2) + \",\" + (+y2) + \",\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\n  },\n  arcTo: function(x1, y1, x2, y2, r) {\n    x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;\n    var x0 = this._x1,\n        y0 = this._y1,\n        x21 = x2 - x1,\n        y21 = y2 - y1,\n        x01 = x0 - x1,\n        y01 = y0 - y1,\n        l01_2 = x01 * x01 + y01 * y01;\n\n    // Is the radius negative? Error.\n    if (r < 0) throw new Error(\"negative radius: \" + r);\n\n    // Is this path empty? Move to (x1,y1).\n    if (this._x1 === null) {\n      this._ += \"M\" + (this._x1 = x1) + \",\" + (this._y1 = y1);\n    }\n\n    // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.\n    else if (!(l01_2 > epsilon));\n\n    // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?\n    // Equivalently, is (x1,y1) coincident with (x2,y2)?\n    // Or, is the radius zero? Line to (x1,y1).\n    else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {\n      this._ += \"L\" + (this._x1 = x1) + \",\" + (this._y1 = y1);\n    }\n\n    // Otherwise, draw an arc!\n    else {\n      var x20 = x2 - x0,\n          y20 = y2 - y0,\n          l21_2 = x21 * x21 + y21 * y21,\n          l20_2 = x20 * x20 + y20 * y20,\n          l21 = Math.sqrt(l21_2),\n          l01 = Math.sqrt(l01_2),\n          l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),\n          t01 = l / l01,\n          t21 = l / l21;\n\n      // If the start tangent is not coincident with (x0,y0), line to.\n      if (Math.abs(t01 - 1) > epsilon) {\n        this._ += \"L\" + (x1 + t01 * x01) + \",\" + (y1 + t01 * y01);\n      }\n\n      this._ += \"A\" + r + \",\" + r + \",0,0,\" + (+(y01 * x20 > x01 * y20)) + \",\" + (this._x1 = x1 + t21 * x21) + \",\" + (this._y1 = y1 + t21 * y21);\n    }\n  },\n  arc: function(x, y, r, a0, a1, ccw) {\n    x = +x, y = +y, r = +r, ccw = !!ccw;\n    var dx = r * Math.cos(a0),\n        dy = r * Math.sin(a0),\n        x0 = x + dx,\n        y0 = y + dy,\n        cw = 1 ^ ccw,\n        da = ccw ? a0 - a1 : a1 - a0;\n\n    // Is the radius negative? Error.\n    if (r < 0) throw new Error(\"negative radius: \" + r);\n\n    // Is this path empty? Move to (x0,y0).\n    if (this._x1 === null) {\n      this._ += \"M\" + x0 + \",\" + y0;\n    }\n\n    // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).\n    else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {\n      this._ += \"L\" + x0 + \",\" + y0;\n    }\n\n    // Is this arc empty? We’re done.\n    if (!r) return;\n\n    // Does the angle go the wrong way? Flip the direction.\n    if (da < 0) da = da % tau + tau;\n\n    // Is this a complete circle? Draw two arcs to complete the circle.\n    if (da > tauEpsilon) {\n      this._ += \"A\" + r + \",\" + r + \",0,1,\" + cw + \",\" + (x - dx) + \",\" + (y - dy) + \"A\" + r + \",\" + r + \",0,1,\" + cw + \",\" + (this._x1 = x0) + \",\" + (this._y1 = y0);\n    }\n\n    // Is this arc non-empty? Draw an arc!\n    else if (da > epsilon) {\n      this._ += \"A\" + r + \",\" + r + \",0,\" + (+(da >= pi)) + \",\" + cw + \",\" + (this._x1 = x + r * Math.cos(a1)) + \",\" + (this._y1 = y + r * Math.sin(a1));\n    }\n  },\n  rect: function(x, y, w, h) {\n    this._ += \"M\" + (this._x0 = this._x1 = +x) + \",\" + (this._y0 = this._y1 = +y) + \"h\" + (+w) + \"v\" + (+h) + \"h\" + (-w) + \"Z\";\n  },\n  toString: function() {\n    return this._;\n  }\n};\n\nexport default path;\n","export default function(x) {\n  return function constant() {\n    return x;\n  };\n}\n","import {path} from \"d3-path\";\nimport constant from \"./constant.js\";\nimport curveLinear from \"./curve/linear.js\";\nimport {x as pointX, y as pointY} from \"./point.js\";\n\nexport default function() {\n  var x = pointX,\n      y = pointY,\n      defined = constant(true),\n      context = null,\n      curve = curveLinear,\n      output = null;\n\n  function line(data) {\n    var i,\n        n = data.length,\n        d,\n        defined0 = false,\n        buffer;\n\n    if (context == null) output = curve(buffer = path());\n\n    for (i = 0; i <= n; ++i) {\n      if (!(i < n && defined(d = data[i], i, data)) === defined0) {\n        if (defined0 = !defined0) output.lineStart();\n        else output.lineEnd();\n      }\n      if (defined0) output.point(+x(d, i, data), +y(d, i, data));\n    }\n\n    if (buffer) return output = null, buffer + \"\" || null;\n  }\n\n  line.x = function(_) {\n    return arguments.length ? (x = typeof _ === \"function\" ? _ : constant(+_), line) : x;\n  };\n\n  line.y = function(_) {\n    return arguments.length ? (y = typeof _ === \"function\" ? _ : constant(+_), line) : y;\n  };\n\n  line.defined = function(_) {\n    return arguments.length ? (defined = typeof _ === \"function\" ? _ : constant(!!_), line) : defined;\n  };\n\n  line.curve = function(_) {\n    return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;\n  };\n\n  line.context = function(_) {\n    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;\n  };\n\n  return line;\n}\n","export function x(p) {\n  return p[0];\n}\n\nexport function y(p) {\n  return p[1];\n}\n"],"names":["arcInnerRadius","d","innerRadius","arcOuterRadius","outerRadius","arcStartAngle","startAngle","arcEndAngle","endAngle","arcPadAngle","padAngle","intersect","x0","y0","x1","y1","x2","y2","x3","y3","x10","y10","x32","y32","t","epsilon","cornerTangents","r1","rc","cw","x01","y01","lo","sqrt","ox","oy","x11","y11","x00","y00","dx","dy","d2","r","D","max","cx0","cy0","cx1","cy1","dx0","dy0","dx1","dy1","cx","cy","staticStyle","pointerEvents","ArcLabel","label","style","theme","useTheme","_jsx","animated","g","transform","opacity","progress","text","textAnchor","dominantBaseline","labels","fill","textColor","getNormalizedAngle","angle","normalizedAngle","Math","PI","filterDataBySkipAngle","data","skipAngle","filter","datum","abs","radiansToDegrees","arc","arcTransitionModeById","enter","update","leave","middleAngle","centerRadius","pushIn","pushOut","useArcTransitionMode","mode","extraTransition","useMemo","transitionMode","computeArcCenter","offset","midAngle","radius","positionFromAngle","interpolateArcCenter","startAngleValue","endAngleValue","innerRadiusValue","outerRadiusValue","to","centroid","x","y","ArcLabelsLayer","center","labelAccessor","radiusOffset","component","getLabel","usePropertyAccessor","getTextColor","useInheritedColor","filteredData","extra","useMotionConfig","animate","springConfig","config","phases","transition","useTransition","keys","id","initial","from","immediate","interpolate","useArcCentersTransition","Label","children","transitionProps","createElement","key","ArcLinkLabel","_jsxs","path","stroke","linkColor","strokeWidth","thickness","textPosition","computeArcLink","diagonalLength","straightLength","side","point2","centerAngle","point0","point1","points","lineGenerator","line","interpolateLink","offsetValue","diagonalLengthValue","straightLengthValue","diagonalLengthAnimated","straightLengthAnimated","interpolateTextAnchor","computeArcLinkTextAnchor","interpolateTextPosition","textOffsetValue","textOffset","position","ArcLinkLabelsLayer","l","getLinkColor","transitionPhases","useArcLinkLabelsTransition","ArcShape","onClick","onMouseEnter","onMouseMove","onMouseLeave","handleClick","useCallback","event","handleMouseEnter","handleMouseMove","handleMouseLeave","color","borderColor","borderWidth","interpolateArc","arcGenerator","ArcsLayer","getBorderColor","useArcsTransition","Arc","useArcGenerator","e","cornerRadius","i","constant","padRadius","context","buffer","r0","apply","this","arguments","a0","halfPi","a1","da","tau","moveTo","cos","sin","t0","t1","a01","a11","a00","a10","da0","da1","ap","rp","min","rc0","rc1","p0","asin","p1","oc","pi","ax","ay","bx","by","kc","acos","lc","atan2","lineTo","closePath","a","_","length","d3Arc","b","NaN","PieLegends","width","height","legends","toggleSerie","map","legend","BoxLegendSvg","containerWidth","containerHeight","defaultProps","value","sortByValue","layers","fit","activeInnerRadiusOffset","activeOuterRadiusOffset","modifiers","enableArcLabels","arcLabel","arcLabelsSkipAngle","arcLabelsRadiusOffset","arcLabelsTextColor","enableArcLinkLabels","arcLinkLabel","arcLinkLabelsSkipAngle","arcLinkLabelsOffset","arcLinkLabelsDiagonalLength","arcLinkLabelsStraightLength","arcLinkLabelsThickness","arcLinkLabelsTextOffset","arcLinkLabelsTextColor","arcLinkLabelsColor","colors","scheme","defs","isInteractive","motionConfig","tooltip","BasicTooltip","formattedValue","enableChip","role","pixelRatio","window","devicePixelRatio","j","useNormalizedData","valueFormat","getId","getValue","formatValue","useValueFormatter","getColor","useOrdinalColorScale","datumId","datumValue","normalizedDatum","hidden","usePieArcs","activeId","hiddenIds","pie","innerPie","identity","sortValues","descending","sort","k","v","n","sum","index","Array","arcs","p","pa","d3Pie","degreesToRadians","hiddenData","item","includes","dataWithArc","angleDeg","legendData","usePieFromBox","innerRadiusRatio","useState","setActiveId","setHiddenIds","computedProps","boundingBox","centerX","centerY","includeCenter","push","round","xs","ys","computeArcBoundingBox","box","ratio","adjustedBox","debug","pieArcs","state","indexOf","Arcs","useTooltip","showTooltipFromEvent","hideTooltip","InnerPie","partialMargin","margin","arcLabelsComponent","arcLinkLabelComponent","useDimensions","outerWidth","outerHeight","innerWidth","innerHeight","normalizedData","boundDefs","bindDefs","layerById","arcLinkLabels","arcLabels","layerContext","usePieLayerContext","SvgWrapper","layer","Fragment","Pie","renderWrapper","otherProps","Container","ResponsivePie","props","ResponsiveWrapper","tauEpsilon","Path","_x0","_y0","_x1","_y1","prototype","constructor","quadraticCurveTo","bezierCurveTo","arcTo","x21","y21","l01_2","Error","x20","y20","l21_2","l20_2","l21","l01","tan","t01","t21","ccw","rect","w","h","toString","pointX","pointY","defined","curve","curveLinear","output","defined0","lineStart","lineEnd","point"],"sourceRoot":""}