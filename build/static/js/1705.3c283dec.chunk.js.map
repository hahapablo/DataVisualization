{"version":3,"file":"static/js/1705.3c283dec.chunk.js","mappings":"4RAAWA,EAAQC,MAAMC,UAAUF,M,iCCKnC,SAASG,EAAWC,EAAGC,GACrB,OAAOD,EAAEC,EACX,C,yXCJO,IAAAC,ECWcC,EAAA,SCqGAC,EAAA,kBC7GRC,EAAe,CACxBC,QAAS,KACTC,KAAM,CAAC,SAEPC,UAAW,UACXC,OAAQ,WACRC,SAAA,EAEAC,SAAU,OACVC,SAAU,OAEVC,WAAY,CAAEC,KAAM,UACpBC,WAAY,CAAED,KAAM,OAAQE,OAAA,GAE5BC,QAAS,GACTC,aAAc,EAEdC,WAAY,CAAC,EACbC,SAAU,CAAC,EACXC,aAAA,EACAC,aAAA,EAEAC,aAAA,EACAC,MAAO,iBACPC,eAAgB,EAChBC,gBAAiB,EACjBC,eAAgB,CAAEC,KAAM,QAASC,MAAO,oBAExCC,QAAS,KACTC,OAAQ,CAAEC,OAAQ,QAElBC,aAAc,EACdC,YAAa,EACbC,YAAa,CAAEP,KAAM,SAErBQ,eAAA,EACAC,QCvCsB,SAAAC,GAAA,IAAcC,EAAAD,EAAAE,MAAOC,EAAAH,EAAAd,MAAUkB,EAAAC,EAAAL,EAAAlC,GAAA,OAC9CJ,EAAAA,EAAAA,KAAC4C,EAAAA,GAAA,CAAaC,GAAIJ,EAAOK,MAAOJ,EAAKK,eAAgBC,YAAA,EAAkBR,MAAOD,GAAA,EDuCrFU,aAAc,SAAWX,GAAA,OAAsCA,EAAMO,GAAA,MAAQP,EAAMY,UAAA,EAEnFC,QAAS,GACTC,iBAAkB,GAClBC,YAAa,GACbC,QAAS,IAkBAC,GAfAC,EAAA,GACNnD,EAAA,CACHoD,OAAQ,CAAC,OAAQ,OAAQ,OAAQ,UAAW,UAAW,eACvDC,aDhDmB,SAAApB,GAAA,IAAAC,EAAAE,EAAAH,EACnBqB,IAAOjB,EAAAD,EAAAmB,KAASC,EAAAlB,EAAAF,EAAAtC,GAAA2D,EAAAxB,EAEhByB,MACIC,EAAAF,EAAA3B,YACA8B,EAAAH,EAAAtB,MACA0B,EAAAJ,EAAAK,OACAC,EAAAN,EAAAO,WACAC,EAAAR,EAAAS,aACAC,EAAAV,EAAAW,OACAC,EAAAZ,EAAAa,OACAC,EAAAd,EAAAe,UACAC,EAAAhB,EAAAiB,MAGJC,EAAA1C,EAAAL,aACAgD,EAAA3C,EAAAJ,YAEAgD,EAAA5C,EAAAd,MACA2D,EAAA7C,EAAA8C,kBAEAC,EAAA/C,EAAAF,cACAkD,EAAAhD,EAAAiD,QACAC,EAAAlD,EAAAmD,aACAC,EAAApD,EAAAqD,aAEAC,EAAAtD,EAAAD,QAEAwD,EAAAvD,EAAAwD,YACAC,EAAAzD,EAAA0D,UACAC,EAAA3D,EAAA4D,eACAC,EAAA7D,EAAA8D,gBAEMC,GAAQC,EAAAA,EAAAA,MAAA1D,GAC+C2D,EAAAA,EAAAA,MAArDC,EAAA5D,EAAA6D,qBAAsBC,EAAA9D,EAAA+D,cAAeC,EAAAhE,EAAAiE,YAEvCC,GAAgBC,EAAAA,EAAAA,UAClB,kBAAM,kBAAMC,EAAAA,EAAAA,eAAcpB,EAAApC,EAAA,GAAcK,EAAQnB,GAAA,IAChD,CAACkD,EAAS/B,EAAKnB,IAGbuE,GAAcC,EAAAA,EAAAA,cAChB,SAAC5E,GAAA,MACGgD,GAAAA,EAAA9B,EAAA,CAAYhB,MAAOqB,EAAIrB,OAAUE,GAAQJ,EAAA,GAE7C,CAACuB,EAAKnB,EAAM4C,IAEV6B,GAAgBD,EAAAA,EAAAA,cAClB,SAAC5E,GAAA,OAAsCkE,EAAqBM,IAAiBxE,EAAA,GAC7E,CAACkE,EAAsBM,IAErB5G,GAAmBgH,EAAAA,EAAAA,cACrB,SAAC5E,GAAA,MACGkD,GAAAA,EAAe9C,EAAMJ,GACrBkE,EAAqBM,IAAiBxE,EAAA,GAE1C,CAACI,EAAM8C,EAAcgB,EAAsBM,IAEzCM,GAAmBF,EAAAA,EAAAA,cACrB,SAAC5E,GAAA,MACGoD,GAAAA,EAAehD,EAAMJ,GACrBsE,GAAA,GAEJ,CAAClE,EAAMkE,EAAalB,IAIlB2B,GAAcH,EAAAA,EAAAA,cAAY,WAC5BR,EAAcI,IAAiB,CAACjD,EAAIyD,KAAOzD,EAAIkB,MAAQ,EAAGlB,EAAI0D,MAAA,GAC/D,CAACb,EAAeI,EAAejD,IAC5B2D,GAAaN,EAAAA,EAAAA,cAAY,WAC3BN,GAAA,GACD,CAACA,IAAA,OAGAa,EAAAA,EAAAA,MAACC,EAAAA,SAAAA,EAAS,CAAE7C,UAAWD,EAAA+C,SAAA,EACnB3H,EAAAA,EAAAA,KAAC0H,EAAAA,SAAAA,KAAS,CACN3C,OAAO6C,EAAAA,EAAAA,IAAG9C,GAAO,SAAAxC,GAAA,OAASuF,KAAKC,IAAIxF,EAAO,MAC1C6B,QAAQyD,EAAAA,EAAAA,IAAG1D,GAAQ,SAAA5B,GAAA,OAASuF,KAAKC,IAAIxF,EAAO,MAC5CyF,GAAI/C,EACJgD,GAAIhD,EACJiD,KAAA,OAAA1F,EAAMG,EAAKuF,MAAA1F,EAAQ0B,EACnBiE,YAAajD,EACbkD,OAAQnE,EACRoE,UAAWvC,EACXwC,SAAUxC,EAAc,OAAI,eAChBE,EAAYA,EAAUrD,QAAA,EAAQ,kBACzBuD,EAAiBA,EAAevD,QAAA,EAAQ,mBACvCyD,EAAkBA,EAAgBzD,QAAA,EACpD+C,aAAcJ,EAAgBnF,OAAA,EAC9BoI,YAAajD,EAAgB8B,OAAA,EAC7BxB,aAAcN,EAAgB+B,OAAA,EAC9B7B,QAASF,EAAgB4B,OAAA,EACzBsB,QAASlD,GAAiBQ,EAAcwB,OAAA,EACxCmB,OAAQnD,GAAiBQ,EAAc2B,OAAA,IAE1CrC,IACGnF,EAAAA,EAAAA,KAAC0H,EAAAA,SAAAA,KAAS,CACNzC,EAAGT,EACHU,EAAGR,EACH+D,WAAW,SACXC,iBAAiB,UACjBC,YAAarE,EACbP,MAAAP,EAAA,GACO6C,EAAMuC,OAAOC,KAAA,CAChBC,cAAe,OACfb,KAAM7D,IAAAuD,SAGTzC,MAAA,EC3DjB6D,KAAM,GACNd,KAAM,GAENe,SAAA,EACAC,aAAc,UAEdC,KAAM,MACNpD,aAAA,IAGStC,EAAA,GACNnD,EAAA,CACHoD,OAAQ,CAAC,OAAQ,OAAQ,OAAQ,UAAW,eAE5C0F,WAA8B,oBAAXC,QAAA,OAAAlJ,EAAyBkJ,OAAOC,kBAAAnJ,EAAwB,KEjElEoJ,EAAgB,SACzBhH,EACAC,EACAE,EACAC,EACAmB,EACAC,GAAA,OAGI8C,EAAAA,EAAAA,IACIlE,EACA,CAAE6G,IAAKjH,EAAKkH,IAAIjH,GAAWkH,IAAK,EAAG3B,IAAK,GACxCjE,EACAC,GAEN7C,QAAQwB,EAAA,EAMDiH,EAAgB,SAAWpH,EAAkBC,GAAA,OACtDD,EAAKkH,KACD,SAAAlH,GAAA,OAAAkB,EAAA,GAEWjB,EAAKoH,QAAgC,SAACrH,EAAKC,GAAA,OAC1CD,EAAIC,GAAO,KACJD,CAAA,GACR,CAAC,GACDA,EAAA,KAINsH,EAAmB,SAA2CtH,GAAA,OACvEuH,OAAOtJ,KAAK+B,GAAMqH,QAAgC,SAACpH,EAAKE,GAAA,OAChDH,EAAKG,KACLF,EAAIE,GAAOH,EAAKG,IAEbF,CAAA,GACR,CAAC,EAAD,EAEMuH,EAAc,SAAIxH,GAAA,MAAa,CAACA,EAAOyH,OAAOzH,GAAA,EAAA0H,EAAA,2HC3BrDC,EAAK,SAAC3H,EAAeC,GAAA,OAAkBD,EAAQC,CAAA,EAC/C2H,EAAK,SAAC5H,EAAeC,GAAA,OAAkBD,EAAQC,CAAA,EAE/C4H,EAAQ,SAAC7H,EAAeC,GAAA,OAC1B1C,MAAM+B,KAAK,IAAIwI,OAAO7H,EAAMD,IAAQ,SAACC,EAAGE,GAAA,OAAUH,EAAQG,CAAA,KAExD4H,EAAc,SAAC/H,GAAA,OAAmB2H,EAAG3H,EAAO,GAAK,EAAIA,CAAA,EAMrDgI,EAA8B,SAAAhI,EAahCC,EACAE,EACAC,GAAA,IAbImB,EAAAvB,EAAAsB,KACAE,EAAAxB,EAAAiI,YACAvG,EAAA1B,EAAAkI,SACAvG,EAAA3B,EAAAmI,SACAzK,EAAAsC,EAAAoI,gBAAAxG,EAAA5B,EACApB,aAAAuG,OAAA,IAAAvD,EAAe,EAAAA,EACfE,EAAA9B,EAAA/B,KACA+D,EAAAhC,EAAAqI,OACArE,EAAAhE,EAAAsI,OACApG,EAAAlC,EAAAuI,OAMEnG,EAAUjC,EAAUyH,EAAKD,EAGzBrF,EAAcf,EAAK2F,IAAII,GAEvB9E,EAAqC,UAC3CV,EAAK0G,SAAQ,SAACxI,EAAKG,GAAA,OACf0H,EAAM,EAAG7F,EAAOyG,SAASC,QAAQF,SAAQ,SAAA5G,GAAA,IAAAE,EAN/BY,EAAAC,EAAAC,EAOoB4E,EAAYjG,EAAKK,GAAO5B,IAA3C6C,EAAAD,EAAA,GAAUG,EAAAH,EAAA,GACXI,EAAarB,EAASJ,EAAKK,IAC3BsB,GAAA,OAAApB,EAAKE,EAAOgB,IAAAlB,EAAe,GAAK7B,EAAWE,EAAIgF,EAAehF,EAC9DiD,EAVehB,EAAfM,EAUSK,EAViB,GAAK,OAALJ,EAAKqB,EAAOtB,IAAAC,EAAM,EAAIvC,EAWhDqE,EAVI,SAACzE,EAAWC,GAAA,IAAAE,EAAA,OAAeiC,EAAQpC,EAAG,GAAKI,EAAOH,GAAA,OAAAE,EAAK6D,EAAOhE,IAAAG,EAAM,GAAKC,CAAA,CAAzE,CAUkB2C,EAAOK,GAC7BsB,EAAmC,CACrCnE,GAAIP,EACJQ,MAAoB,OAAbqC,EAAoBA,EAAWE,EACtCtC,eAAgBe,EAAYuB,GAC5B4F,QAAA,EACAC,MAAAhH,EACAhB,WAAAoC,EACA1B,KAAMgB,EAAYV,IAGtBY,EAAKqG,KAAK,CACNlL,IAAQqC,EAAA,IAAO0E,EAAQ9D,WACvBgI,MAAOpG,EAAKkG,OACZpH,KAAMoD,EACN/B,EAAAO,EACAN,EAAAQ,EACA4B,KAAM9C,EAAO4G,KAAO5F,EACpB+B,KAAM/C,EAAO6G,IAAM3F,EACnBX,MAAOxC,EACP4B,OAAQ4C,EACRvE,MAAOwB,EAASgD,GAChBxF,MAAOxB,EAAgBgH,IAAA,OAK5BlC,CAAA,EAMLwG,EAAgC,SAAAhJ,EAalCC,EACAE,EACAC,GAAA,IAbImB,EAAAvB,EAAAsB,KACAE,EAAAxB,EAAAiI,YACAvG,EAAA1B,EAAAmI,SACAxG,EAAA3B,EAAAkI,SACAxK,EAAAsC,EAAAoI,gBACAxG,EAAA5B,EAAA/B,KAAAkH,EAAAnF,EACApB,aAAAkD,OAAA,IAAAqD,EAAe,EAAAA,EACfnD,EAAAhC,EAAAqI,OACArE,EAAAhE,EAAAsI,OACApG,EAAAlC,EAAAuI,OAMEnG,EAAUjC,EAAUyH,EAAKD,EAGzBrF,EAAcf,EAAK2F,IAAII,GAEvB9E,EAAqC,UAC3CZ,EAAK4G,SAAQ,SAACxI,EAAKG,GAAA,OACf0H,EAAM,EAAG7D,EAAOyE,SAASC,QAAQF,SAAQ,SAAA5G,GAAA,IAAAuD,EAN/BzC,EAAAC,EAAAC,EAOoB4E,EAAYjG,EAAKK,GAAO5B,IAA3C6C,EAAAD,EAAA,GAAUG,EAAAH,EAAA,GACXI,EAAatB,EAASH,EAAKK,IAC3BsB,EATed,EAAfM,EASSK,EATiB,GAAK3C,EAAA,OAAAuC,EAAOX,EAAOU,IAAAC,EAAM,EAUnDS,GAAA,OAAA+B,EAAKnB,EAAOhB,IAAAmC,EAAe,GAAKlF,EAAYE,EAAI2B,EAAe3B,EAC/DsE,EAVG,SAACzE,EAAWC,GAAA,IAAAE,EAAA,OAAeiC,EAAQpC,EAAG,IAAM,OAANG,EAAM6B,EAAOhC,IAAAG,EAAM,GAAKC,EAAOA,EAAOH,CAAA,CAA5E,CAUiB8C,EAAOG,GAC3BwB,EAAmC,CACrCnE,GAAIP,EACJQ,MAAoB,OAAbqC,EAAoBA,EAAWE,EACtCtC,eAAgBe,EAAYuB,GAC5B4F,QAAA,EACAC,MAAAhH,EACAhB,WAAAoC,EACA1B,KAAMgB,EAAYV,IAGtBY,EAAKqG,KAAK,CACNlL,IAAQqC,EAAA,IAAO0E,EAAQ9D,WACvBgI,MAAOpG,EAAKkG,OACZpH,KAAMoD,EACN/B,EAAAO,EACAN,EAAAQ,EACA4B,KAAM9C,EAAO4G,KAAO5F,EACpB+B,KAAM/C,EAAO6G,IAAM3F,EACnBX,MAAOgC,EACP5C,OAAQ5B,EACRC,MAAOyB,EAAS+C,GAChBxF,MAAOxB,EAAgBgH,IAAA,OAK5BlC,CAAA,EAMEyG,EAAsB,SAAAjJ,GAAA,IAAAC,EAjIVE,EAkIrBC,EAAAJ,EAAA7B,OACAoD,EAAAvB,EAAA3B,SACAmD,EAAAxB,EAAA1B,SACAoD,EAAA1B,EAAA5B,QACAuD,EAAA3B,EAAAyC,MACA/E,EAAAsC,EAAA6B,OAAAD,EAAA5B,EACArB,QAAAwG,OAAA,IAAAvD,EAAU,EAAAA,EAAAE,EAAA9B,EACVpB,aAAAoD,OAAA,IAAAF,EAAe,EAAAA,EACfkC,EAAAhE,EAAAzB,WACY2D,EAAAlC,EAAZvB,WAAA2D,EAAApC,EACAkJ,UAAA5G,OAAA,IAAAF,EAAY,GAAAA,EACTI,EAAAnC,EAAAL,EAAA0H,GAuBGhF,EAAOF,EAAMvE,KAAKkL,QAAO,SAAAnJ,GAAA,OAAQsC,EAAU8G,SAASpJ,EAAA,IACpD2C,EAAOyE,EAAc5E,EAAMlB,KAAMoB,GAAAE,EAExB,aAAXxC,EAAyB,CAAC,IAAK,IAAKuB,GAAoB,CAAC,IAAK,IAAKjE,GADhEmF,EAAAD,EAAA,GAAMG,EAAAH,EAAA,GAAWI,EAAAJ,EAAA,GAElBM,EAAa8D,EACfrE,EACAH,EAAM2F,SACNhD,EACAjD,EACAc,EACAD,GAGEK,EAAAlC,EAAA,CACFsE,IAAKhE,EACL2F,IAAK5F,EACLnD,QAAAsD,GACGsC,GAGDS,EAA6B,SAAlBrB,EAAU+D,IAAiBY,EAAc,SAAC/H,GAAA,OAAkBA,CAAA,EAEvE0E,EAAS/B,EACV0E,QAAiB,SAACrH,EAAKC,GAAA,SAAAoJ,OAAcrJ,EAAQ0C,EAAKwE,KAAI,SAAAlH,GAAA,OAAKC,EAAMD,EAAA,OAAgB,IACjFmJ,OAAOG,SACN1E,EAAMH,EAASc,KAAK4B,IAAAoC,MAALhE,KAAYb,IAC3BpB,GA9LenD,EA8LOoF,KAAKC,IAAA+D,MAALhE,KAAYb,GA9LA8E,SAASrJ,GAASA,EAAQ,GAgM5DoD,GAAQe,EAAAA,EAAAA,IACVlB,EACA,CAAE6D,IAAKvC,EAAQyC,IAAAvC,EAAKY,IAAAlC,GACX,MAATT,EAAelB,EAAQjE,EACvBmF,GAAAY,EAGgC,aAAXrD,EAAwB,CAAC8C,EAAYK,GAAS,CAACA,EAAOL,GAAxES,EAAAF,EAAA,GAAQI,EAAAJ,EAAA,GAET2B,GAAalC,EAAWuG,YAAczH,GAAgBU,EAAKgG,OAAS,IAAMhG,EAAKgG,OAC/EpD,EAAS,CAAApE,EAAA,GACNsB,EAAA,CAAOlB,KAAAqB,EAAM1E,KAAAyE,EAAM9D,aAAAoD,EAAcqG,OAAA1E,EAAQ2E,OAAAzE,IAC9CuB,EACAhC,EAAUhF,QAAA,OAAA6B,EACVsD,EAAM,IAAAtD,EAAM,SAUT,CAAEoI,OAAA1E,EAAQ2E,OAAAzE,EAAQ6F,KANrBtE,EAAY,EACK,aAAXhF,EACI4H,EAAAuB,WAAA,EAA+BjE,GAC/B0D,EAAAO,WAAA,EAAiCjE,GACrC,KAAAqE,EAAA,mHC3NRC,EAAc,SAAd5J,EAAkBC,GAAA,IAAAE,EAAA,OACpBF,EAAI4J,KAAKtM,MAAMuM,SAAW9J,GAAAG,EAAa,IAAWkJ,OAAAE,MAAApJ,EAAUF,IAASA,CAAA,EAQnE8J,EAA8B,SAAA/J,EAYhCC,EACAE,GAAA,IAXIC,EAAAJ,EAAAiI,YACA1G,EAAAvB,EAAAkI,SACA1G,EAAAxB,EAAAmI,SACAzG,EAAA1B,EAAAoI,gBACAzG,EAAA3B,EAAApB,aACAlB,EAAAsC,EAAAgK,YACApI,EAAA5B,EAAAqI,OACAlD,EAAAnF,EAAAsI,OACAxG,EAAA9B,EAAAuI,OAQEvG,EAAqC,UAC3CtE,EAAY8K,SAAQ,SAAAxI,GAAA,OAChB4B,EAAO6G,SAASD,SAAQ,SAAC9K,EAAOsG,GAAA,IAAA9B,EAAAE,EACtBE,EAAItC,EAAgBgE,GACpBxB,EAAA,OAAAN,EAAIN,EAAOJ,EAASc,EAAEhB,QAAAY,EAAU,EAChCQ,GAAA,OAAAN,EARD,SAACpC,GAAA,OAA4BmF,EAAOnF,EAAEG,EAAU,EAAI,IAApD,CAQWmC,IAAAF,EAAM,GAAoB,GAAfT,EACrBgB,EARI,SAAC3C,EAAyBC,GAAA,IAAAG,EAAA,cAAAA,EAAe+E,EAAOnF,EAAEG,EAAU,EAAI,KAAAC,EAAO,GAAKH,CAAA,CAA5E,CAQkBqC,EAAGI,GAAKf,EAAAiB,EACV4E,EAAYlF,EAAEhB,KAAKtB,EAAgBrC,MAAtDkF,EAAAD,EAAA,GAAUG,EAAAH,EAAA,GAEXI,EAAmC,CACrCzC,GAAIP,EAAgBrC,IACpB6C,MAAoB,OAAbqC,EAAoBA,EAAWE,EACtCtC,eAAgBL,EAAY2C,GAC5B4F,QAAA,EACAC,MAAO5E,EACPpD,WAAYlD,EACZ4D,KAAMgG,EAAiBhF,EAAEhB,OAG7BU,EAAK6G,KAAK,CACNlL,IAAQqC,EAAgBrC,IAAA,IAAOD,EAC/BkL,MAAO5G,EAAK0G,OACZpH,KAAM0B,EACNL,EAAAH,EACAI,EAAAF,EACAsC,KAAMlD,EAAOgH,KAAOtG,EACpByC,KAAMnD,EAAOiH,IAAMrG,EACnBD,MAAOxC,EACP4B,OAAQc,EACRzC,MAAOqB,EAASyB,GAChB9D,MAAOwC,EAAgBsB,IAAA,OAK5BhB,CAAA,EAMLiI,EAAgC,SAAAjK,EAYlCC,EACAE,GAAA,IAXIC,EAAAJ,EAAAiI,YACA1G,EAAAvB,EAAAkI,SACA1G,EAAAxB,EAAAmI,SACAzG,EAAA1B,EAAAoI,gBACAzG,EAAA3B,EAAApB,aACAlB,EAAAsC,EAAAgK,YACApI,EAAA5B,EAAAqI,OACAlD,EAAAnF,EAAAsI,OACAxG,EAAA9B,EAAAuI,OAQEvG,EAAqC,UAC3CtE,EAAY8K,SAAQ,SAAAxI,GAAA,OAChBmF,EAAOsD,SAASD,SAAQ,SAAC9K,EAAOsG,GAAA,IAAA9B,EAAAE,EACtBE,EAAItC,EAAgBgE,GACpBxB,EAAA,OAAAN,EAAIiD,EAAO3D,EAASc,EAAEhB,QAAAY,EAAU,EAChCQ,GAAA,OAAAN,EARD,SAACpC,GAAA,OAA4B4B,EAAO5B,EAAEG,EAAU,EAAI,IAApD,CAQWmC,IAAAF,EAAM,GAAoB,GAAfT,EACrBgB,EARG,SAAC3C,EAAyBC,GAAA,IAAAG,EAAA,cAAAA,EAAewB,EAAO5B,EAAEG,EAAU,EAAI,KAAAC,EAAO,GAAKH,CAAA,CAA5E,CAQiBqC,EAAGI,GAAKf,EAAAiB,EACR4E,EAAYlF,EAAEhB,KAAKtB,EAAgBrC,MAAtDkF,EAAAD,EAAA,GAAUG,EAAAH,EAAA,GAEXI,EAAmC,CACrCzC,GAAIP,EAAgBrC,IACpB6C,MAAoB,OAAbqC,EAAoBA,EAAWE,EACtCtC,eAAgBL,EAAY2C,GAC5B4F,QAAA,EACAC,MAAO5E,EACPpD,WAAYlD,EACZ4D,KAAMgG,EAAiBhF,EAAEhB,OAG7BU,EAAK6G,KAAK,CACNlL,IAAQqC,EAAgBrC,IAAA,IAAOD,EAC/BkL,MAAO5G,EAAK0G,OACZpH,KAAM0B,EACNL,EAAAD,EACAE,EAAAJ,EACAwC,KAAMlD,EAAOgH,KAAOpG,EACpBuC,KAAMnD,EAAOiH,IAAMvG,EACnBC,MAAOE,EACPd,OAAQ5B,EACRC,MAAOqB,EAASyB,GAChB9D,MAAOwC,EAAgBsB,IAAA,OAK5BhB,CAAA,EAMEkI,EAAsB,SAAAlK,GAAA,IA5HTC,EA6HtBE,EAAAH,EAAAsB,KACAlB,EAAAJ,EAAA7B,OACAoD,EAAAvB,EAAA3B,SACAmD,EAAAxB,EAAA1B,SACAoD,EAAA1B,EAAA5B,QACAuD,EAAA3B,EAAAyC,MACA/E,EAAAsC,EAAA6B,OAAAD,EAAA5B,EACArB,QAAAwG,OAAA,IAAAvD,EAAU,EAAAA,EACVE,EAAA9B,EAAAzB,WACYyD,EAAAhC,EAAZvB,WAAAuF,EAAAhE,EACAkJ,UAAAhH,OAAA,IAAA8B,EAAY,GAAAA,EACT5B,EAAA/B,EAAAL,EAAA2J,GAuBGrH,EAAOF,EAAMnE,KAAKkL,QAAO,SAAAnJ,GAAA,OAAQkC,EAAUkH,SAASpJ,EAAA,IACpDwC,ER/KK,WACb,IAAIvE,GAAOkM,EAAAA,EAAAA,GAAS,IAChBC,EAAQC,EAAAA,EACRC,EAASC,EAAAA,EACT/J,EAAQ/C,EAEZ,SAAS+M,EAAMlJ,GACb,IACInB,EAIAsK,EALAC,EAAKzM,EAAKsL,MAAMoB,KAAMC,WAEtBpI,EAAIlB,EAAKoH,OACTnH,EAAImJ,EAAGhC,OACPmC,EAAK,IAAItN,MAAMgE,GAGnB,IAAKpB,EAAI,EAAGA,EAAIoB,IAAKpB,EAAG,CACtB,IAAK,IAAkD2K,EAA9CC,EAAKL,EAAGvK,GAAI6K,EAAKH,EAAG1K,GAAK,IAAI5C,MAAMiF,GAAImC,EAAI,EAAQA,EAAInC,IAAKmC,EACnEqG,EAAGrG,GAAKmG,EAAM,CAAC,GAAItK,EAAMc,EAAKqD,GAAIoG,EAAIpG,EAAGrD,IACzCwJ,EAAIxJ,KAAOA,EAAKqD,GAElBqG,EAAGrN,IAAMoN,CACX,CAEA,IAAK5K,EAAI,EAAGsK,EAAKL,EAAMS,GAAK1K,EAAIoB,IAAKpB,EACnC0K,EAAGJ,EAAGtK,IAAIyI,MAAQzI,EAIpB,OADAmK,EAAOO,EAAIJ,GACJI,CACT,CAkBA,OAhBAL,EAAMvM,KAAO,SAASF,GACpB,OAAO6M,UAAUlC,QAAUzK,EAAoB,oBAANF,EAAmBA,GAAIoM,EAAAA,EAAAA,GAAS7M,EAAM2N,KAAKlN,IAAKyM,GAASvM,CACpG,EAEAuM,EAAMhK,MAAQ,SAASzC,GACrB,OAAO6M,UAAUlC,QAAUlI,EAAqB,oBAANzC,EAAmBA,GAAIoM,EAAAA,EAAAA,IAAUpM,GAAIyM,GAAShK,CAC1F,EAEAgK,EAAMJ,MAAQ,SAASrM,GACrB,OAAO6M,UAAUlC,QAAU0B,EAAa,MAALrM,EAAYsM,EAAAA,EAAyB,oBAANtM,EAAmBA,GAAIoM,EAAAA,EAAAA,GAAS7M,EAAM2N,KAAKlN,IAAKyM,GAASJ,CAC7H,EAEAI,EAAMF,OAAS,SAASvM,GACtB,OAAO6M,UAAUlC,QAAU4B,EAAc,MAALvM,EAAYwM,EAAAA,EAAaxM,EAAGyM,GAASF,CAC3E,EAEOE,CACT,CQgIwBhG,GAA0BvG,KAAKqE,GAAMgI,OAAO3F,EAAAA,EAA5CH,CAChB4C,EAAcjH,EAAMmC,IAAAI,EAIT,aAAXtC,EAAyB,CAAC,IAAK,IAAKuB,GAAoB,CAAC,IAAK,IAAKjE,GADhEiF,EAAAD,EAAA,GAAME,EAAAF,EAAA,GAAWG,EAAAH,EAAA,GAElBK,EAAaiE,EACf7G,EACAiC,EAAM+F,SACNhD,EACAnD,EACAa,EACAD,GAGEI,EAAA9B,EAAA,CACFsE,IAAKhE,EACL2F,IAAK5F,EACLnD,QAAAsD,GACGI,GAGDoB,GAtLgBjD,EAuLlB2J,EAAYpH,GAtLP,QAuLLV,EAAWtD,KAvLEyB,EAAMkJ,QAAO,SAAAnJ,GAAA,OAAe,IAARA,CAAA,IAAaC,GAyL5CmD,EAAMmC,KAAK4B,IAAAoC,MAALhE,KAAYrC,GAClBuB,EAAMc,KAAKC,IAAA+D,MAALhE,KAAYrC,GAElBwB,GAAQJ,EAAAA,EAAAA,IACVtB,EACA,CAAEiE,IAAK/D,EAAQiE,IAAA/D,EAAKoC,IAAAf,GACX,MAAT9B,EAAehB,EAAQjE,EACvBiF,GAAAiC,EAGgC,aAAXxE,EAAwB,CAAC2C,EAAY2B,GAAS,CAACA,EAAO3B,GAAxEO,EAAAsB,EAAA,GAAQrB,EAAAqB,EAAA,GAETnB,EAAerB,EAAMxD,aAAe,EAAIwD,EAAMxD,aAAe,EAC7D+E,EAAYZ,EAAW0G,YACvB5F,EAAS,CAAA3C,EAAA,GACNkB,EAAA,CAAOxD,aAAA6E,EAAcuG,YAAAxH,EAAa6F,OAAA/E,EAAQgF,OAAA/E,IAC/CI,EACAX,EAAU5E,SAAA,MAUP,CAAEiK,OAAA/E,EAAQgF,OAAA/E,EAAQmG,KANrB/F,EAAY,EACK,aAAXvD,EACI2J,EAAAR,WAAA,EAA+B1F,GAC/BoG,EAAAV,WAAA,EAAiC1F,GACrC,KC3KDqH,EAAgB,SAAAlL,GAAA,IACzBC,EAAAD,EAAA0J,KACAvJ,EAAAH,EAAAmL,UACA/K,EAAAJ,EAAAV,KACAiC,EAAAvB,EAAA9B,UACAsD,EAAAxB,EAAA7B,OACAuD,EAAA1B,EAAAoL,YACAzJ,EAAA3B,EAAA5B,QAOMV,GAAiBwE,EAAAA,EAAAA,IAAA,MACnBR,EAAAA,EAAyB,YAATtB,EAAqB,aAAe,YAG3C,YAATA,EAxC+B,SACnCJ,EACAC,EACAE,GAAA,IAEMC,EAAOyE,IACT7E,EAAKkH,KAAI,SAAAlH,GAAA,IAAAC,EAAAG,EAAA,MAAQ,CACbG,GAAA,OAAAN,EAAID,EAAIsB,KAAKV,YAAAX,EAAc,GAC3Bf,MAAOiB,EAAeH,EAAIsB,MAC1BqH,OAAQ3I,EAAIsB,KAAKqH,OACjBzI,MAAA,OAAAE,EAAOJ,EAAIE,OAAAE,EAAS,YAExB,SAAAJ,GAAA,OAAAA,EAAGO,EAAA,UAGQ,eAAXN,GACAG,EAAKhC,UAGFgC,CAAA,CAnB4B,CAyCAH,EAAMuB,EAAQ9D,GAxEjB,SAChCsC,EACAC,EACAE,EACAC,EACAmB,EACAC,GAAA,IAEME,EAAOmD,IACT7E,EAAKkH,KAAI,SAAAlH,GAAA,IAAAC,EAAA,MAAQ,CACbM,GAAIP,EAAIsB,KAAKf,GACbrB,MAAOsC,EAAexB,EAAIsB,MAC1BqH,OAAQ3I,EAAIsB,KAAKqH,OACjBzI,MAAA,OAAAD,EAAOD,EAAIE,OAAAD,EAAS,YAExB,SAAAD,GAAA,OAAAA,EAAGO,EAAA,WAIS,aAAXN,GACiB,YAAdG,GACc,WAAdD,IAAA,IACAoB,GACQ,eAAXtB,GAAyC,YAAdG,IAAA,IAA2BmB,IAEvDG,EAAKtD,UAGFsD,CAAA,CA5ByB,CA2EJzB,EAAMuB,EAAQrB,EAAWoB,EAAWI,EAASjE,EAAA,ECxEhE2N,EAAS,SAAArL,GAAA,IAAAC,EAAAD,EAClBhC,QAAAmC,OAAA,IAAAF,EAAUlC,EAAaC,QAAAiC,EAAAG,EAAAJ,EACvB/B,KAAAsD,OAAA,IAAAnB,EAAOrC,EAAaE,KAAAmC,EAAAoB,EAAAxB,EACpBd,MAAAwC,OAAA,IAAAF,EAAQzD,EAAamB,MAAAsC,EAAAG,EAAA3B,EACrBW,aAAAjD,OAAA,IAAAiE,EAAe5D,EAAa4C,aAAAgB,EAC5BC,EAAA5B,EAAAsL,YAAAnG,EAAAnF,EACAP,OAAAqC,OAAA,IAAAqD,EAASpH,EAAa0B,OAAA0F,EAAAnD,EAAAhC,EACtBR,QAAA0C,OAAA,IAAAF,EAAUjE,EAAayB,QAAAwC,EAAAQ,EAAAxC,EACvBH,YAAA6C,OAAA,IAAAF,EAAczE,EAAa8B,YAAA2C,EAAAG,EAAA3C,EAC3BX,eAAAuD,OAAA,IAAAD,EAAiB5E,EAAasB,eAAAsD,EAAAE,EAAA7C,EAC9B9B,UAAA6E,OAAA,IAAAF,EAAY9E,EAAaG,UAAA2E,EAAAG,EAAAhD,EACzB7B,OAAA+E,OAAA,IAAAF,EAASjF,EAAaI,OAAA6E,EAAAI,EAAApD,EACtB5B,QAAAsG,OAAA,IAAAtB,EAAUrF,EAAaK,QAAAgF,EACvBG,EAAAvD,EAAAsB,KAAAmC,EAAAzD,EACA3B,SAAAsF,OAAA,IAAAF,EAAW1F,EAAaM,SAAAoF,EAAAI,EAAA7D,EACxB1B,SAAA8G,OAAA,IAAAvB,EAAW9F,EAAaO,SAAAuF,EACxByB,EAAAtF,EAAAuI,OACAxE,EAAA/D,EAAAyC,MACAwB,EAAAjE,EAAA6B,OAAAvB,EAAAN,EACArB,QAAA2F,OAAA,IAAAhE,EAAUvC,EAAaY,QAAA2B,EAAAkE,EAAAxE,EACvBpB,aAAA+F,OAAA,IAAAH,EAAezG,EAAaa,aAAA4F,EAAAK,EAAA7E,EAC5BzB,WAAA8B,OAAA,IAAAwE,EAAa9G,EAAaQ,WAAAsG,EAAAjH,EAAAoC,EAC1BvB,WAAAqG,OAAA,IAAAlH,EAAaG,EAAaU,WAAAb,EAAAmH,EAAA/E,EAC1Bc,iBAAAjD,OAAA,IAAAkH,EAAmBhH,EAAa+C,iBAAAiE,EAAAG,EAAAlF,EAChCf,YAAAnB,OAAA,IAAAoH,EAAcnH,EAAakB,YAAAiG,EAAAqG,EAAAvL,EAC3Bb,eAAA8B,OAAA,IAAAsK,EAAiBxN,EAAaoB,eAAAoM,EAAAvE,GAAAhH,EAC9BZ,gBAAAgI,QAAA,IAAAJ,GAAkBjJ,EAAaqB,gBAAA4H,GAAAM,GAAAtH,EAC/Ba,QAAA2G,QAAA,IAAAF,GAAUvJ,EAAa8C,QAAAyG,GACvBI,GAAA1H,EAAAoL,YAAAzD,IA+BkCrE,EAAAA,EAAAA,UAAA,MAASzF,EAAAA,EAAoB,IAAxD+J,GAAAD,GAAA,GAAWE,GAAAF,GAAA,GACZI,IAAcnD,EAAAA,EAAAA,cAAY,SAAA5E,GAC5B6H,IAAa,SAAA5H,GAAA,OACTA,EAAMuL,QAAQxL,IAAO,EAAIC,EAAMkJ,QAAO,SAAAlJ,GAAA,OAAQA,IAASD,CAAA,OAAAqJ,OAAUpJ,EAAA,CAAOD,GAAA,MAE7E,IAEGgI,IAAW5F,EAAAA,EAAAA,IAAoBjC,GAC/B6I,IAAW5G,EAAAA,EAAAA,IAAoBV,GAC/BiI,IAAkBvH,EAAAA,EAAAA,IAAoB1E,GACtCkM,IAActH,EAAAA,EAAAA,IAAkBV,GAEhCmI,IAAQ/F,EAAAA,EAAAA,MACRiG,IAAW/F,EAAAA,EAAAA,GAAqBpC,EAAQI,GACxCmJ,IAAiBjH,EAAAA,EAAAA,IACnB1B,EACAqH,IAEE0B,IAAgBrH,EAAAA,EAAAA,IAClBxB,EACAmH,IAAA2B,IAG+B,YAAd3I,EAA0BkG,EAAsBiB,GACvB,CAC1C/L,OAAA+E,EACA9E,QAAAsG,EACApD,KAAAiC,EACA4E,SAAAH,GACA/J,KAAAsD,EACAlD,SAAAsF,EACArF,SAAA8G,EACA3C,MAAAsB,EACAlC,OAAAoC,EACAiE,SAAA+B,GACAtL,QAAA2F,EACA1F,aAAA+F,EACApG,WAAA8B,EACA5B,WAAAqG,EACAoE,UAAAtB,GACAK,YAAA2B,GACAxB,gBAAAuB,GACApB,OAAAjD,IAlBIqG,GAAAD,GAAAhC,KAAMkC,GAAAF,GAAArD,OAAQwD,GAAAH,GAAApD,OAqBhBwD,IAAgBrH,EAAAA,EAAAA,UAClB,kBACIkH,GACKxC,QACG,SAACnJ,GAAA,OAAuE,OAAnBA,EAAIsB,KAAKd,KAAA,IAEjE0G,KAAI,SAAClH,EAAKC,GAAA,OAAAiB,EAAA,GACJlB,EAAA,CACH4I,MAAA3I,GAAA,MAEZ,CAAC0L,KAGCI,IAAuBnH,EAAAA,EAAAA,cACzB,SAAA5E,GAAA,IAAGC,EAAAD,EAAAyC,MAAOtC,EAAAH,EAAA6B,OAAA,QACD/D,KACDmD,EAAiB,GAAKhB,EAAQgB,MAC9BmG,GAAkB,GAAKjH,EAASiH,GAAA,GAGxC,CAACtJ,EAAamD,EAAgBmG,KAG5B4E,IAAavH,EAAAA,EAAAA,UACf,kBACIlD,EAAK2F,KAAI,SAAAlH,GAAA,IACCC,EAAM0L,GAAKM,MAAK,SAAAhM,GAAA,OAAOA,EAAIqB,KAAKf,KAAOP,CAAA,WAAAkB,EAAA,GAEjCjB,EAAA,CAAKqB,KAAAJ,EAAA,CAAQX,GAAIP,GAAA,MAAQC,OAAA,EAAAA,EAAKqB,KAAA,CAAMqH,OAAQf,GAAUwB,SAASpJ,MAAA,MAEnF,CAAC4H,GAAWrG,EAAMoK,KAGhBO,IAAoDzH,EAAAA,EAAAA,UACtD,kBACI+C,GAAQN,KAAI,SAAAlH,GAAA,MAWD,CAACA,EAVKkL,EAAc,CACvBxB,KAA0B,SAApB1J,EAAOmM,SAAsBH,GAAaL,GAChDR,UAAWnL,EAAOmL,UAClB7L,KAAMU,EAAOmM,SACbjO,UAAA6E,EACA5E,OAAA+E,EACAkI,YAAA1D,GACAtJ,QAAAsG,IAAA,MAKZ,CAAC8C,GAASwE,GAAYL,GAAM5I,EAAWG,EAAQwE,GAAahD,IAAA,MAGzD,CACHgF,KAAAiC,GACAS,cAAAN,GACAzD,OAAAuD,GACAtD,OAAAuD,GACA1D,SAAAH,GACAqE,SAAArD,GACAZ,gBAAAuB,GACA1B,YAAA2B,GACA1B,SAAA+B,GACAqC,eAAAjB,GACAkB,cAAAd,GACAe,qBAAAT,GACA7C,UAAAtB,GACA6E,YAAA1E,GACA2E,gBAAAR,GAAA,ECoOsDN,EAAA,0CCxXxDC,EAAqB,SACvB7L,EACAC,EACAE,EACAC,GAAA,OAEAJ,EAAMiM,MAAK,SAAAjM,GAAA,OACPkD,EAAAA,EAAAA,IAAelD,EAAK2C,EAAI1C,EAAO6I,KAAM9I,EAAK4C,EAAI3C,EAAO8I,IAAK/I,EAAKyC,MAAOzC,EAAK6B,OAAQ1B,EAAGC,EAAA,KAKxF0L,EAAiB,SAAA9L,GAAA,IACnBC,EAAAD,EAAAsB,KACAE,EAAAxB,EAAAhC,QACA4D,EAAA5B,EAAA/B,KAEQkH,EAAAnF,EAARuI,OACAzG,EAAA9B,EAAAyC,MACAP,EAAAlC,EAAA6B,OAEAO,EAAApC,EAAA9B,UACAoE,EAAAtC,EAAA7B,OACAqE,EAAAxC,EAAA5B,QACAsE,EAAA1C,EAAA3B,SACAuE,EAAA5C,EAAA1B,SAEAuE,EAAA7C,EAAAzB,WACAwE,EAAA/C,EAAAvB,WAEAyE,EAAAlD,EAAArB,QACAyE,EAAApD,EAAApB,aAEA0E,EAAAtD,EAAA2M,QACApJ,EAAAvD,EAAA4M,UAAAnJ,EAAAzD,EACAnB,WAAAuG,OAAA,IAAA3B,EAAaxC,EAAmBpC,WAAA4E,EAAA6B,EAAAtF,EAChClB,SAAAiF,OAAA,IAAAuB,EAAWrE,EAAmBnC,SAAAwG,EAAAhF,EAAAN,EAC9BjB,YAAAmF,OAAA,IAAA5D,EAAcW,EAAmBlC,YAAAuB,EAAA8D,EAAApE,EACjChB,YAAAsF,OAAA,IAAAF,EAAcnD,EAAmBjC,YAAAoF,EACjCI,EAAAxE,EAAA6M,YACAlI,EAAA3E,EAAA8M,YAAAjI,EAAA7E,EAEAmB,OAAAd,OAAA,IAAAwE,EAAS5D,EAAmBE,OAAA0D,EAAAjH,EAAAoC,EAC5B+M,UAAAjI,OAAA,IAAAlH,EAAY,SACRoC,EAAAC,GAAA,IAAAE,EAAAF,EAEIoB,IAAOjB,EAAAD,EAAAD,MAAOqB,EAAApB,EAAA0B,OAAQL,EAAArB,EAAAsC,MAAOf,EAAAvB,EAAAwC,EAAGhB,EAAAxB,EAAAyC,EAEhClF,EAAAuC,EAAAJ,YACA+B,EAAA3B,EAAAN,aACAwF,EAAAlF,EAAAL,YACAkC,EAAA7B,EAAAf,MACA8C,EAAA/B,EAAA8B,WACAiC,EAAA/D,EAAA6C,kBAAA,GAGJ9C,EAAIgN,UAAY5M,EAEZ+E,EAAc,IACdnF,EAAIiN,YAAcvP,EAClBsC,EAAIkN,UAAY/H,GAGpBnF,EAAImN,YAEAvL,EAAe,EAAG,KACZM,EAASqD,KAAK4B,IAAIvF,EAAcL,GAEtCvB,EAAIoN,OAAO1L,EAAIQ,EAAQP,GACvB3B,EAAIqN,OAAO3L,EAAIF,EAAQU,EAAQP,GAC/B3B,EAAIsN,iBAAiB5L,EAAIF,EAAOG,EAAGD,EAAIF,EAAOG,EAAIO,GAClDlC,EAAIqN,OAAO3L,EAAIF,EAAOG,EAAIJ,EAASW,GACnClC,EAAIsN,iBAAiB5L,EAAIF,EAAOG,EAAIJ,EAAQG,EAAIF,EAAQU,EAAQP,EAAIJ,GACpEvB,EAAIqN,OAAO3L,EAAIQ,EAAQP,EAAIJ,GAC3BvB,EAAIsN,iBAAiB5L,EAAGC,EAAIJ,EAAQG,EAAGC,EAAIJ,EAASW,GACpDlC,EAAIqN,OAAO3L,EAAGC,EAAIO,GAClBlC,EAAIsN,iBAAiB5L,EAAGC,EAAGD,EAAIQ,EAAQP,GACvC3B,EAAIuN,WAAA,MAEJvN,EAAIwN,KAAK9L,EAAGC,EAAGH,EAAOD,GAG1BvB,EAAI2F,OAEAR,EAAc,GACdnF,EAAI6F,SAGJ7B,IACAhE,EAAIyN,aAAe,SACnBzN,EAAI0N,UAAY,SAChB1N,EAAIgN,UAAYhL,EAChBhC,EAAI2N,SAAS7L,EAAOJ,EAAIF,EAAQ,EAAGG,EAAIJ,EAAS,KAAA3D,EAIxDmH,EAAA/E,EAAAf,YACApB,EAAAmC,EAAAd,MACAgG,EAAAlF,EAAAb,eACArB,EAAAkC,EAAAZ,gBACArB,EAAAiC,EAAAX,eAEAkM,EAAAvL,EAAAR,QACAwH,EAAAhH,EAAAP,OAAA2H,EAAApH,EACAL,aAAA2H,OAAA,IAAAF,EAAenG,EAAmBtB,aAAAyH,EAAAI,EAAAxH,EAClCJ,YAAA8H,OAAA,IAAAF,EAAcvG,EAAmBrB,YAAA4H,EACjCG,GAAA3H,EAAAH,YAAA+H,GAAA5H,EAEAe,YAAA8G,QAAA,IAAAD,GAAc3G,EAAmBF,YAAA6G,GAEjCG,GAAA/H,EAAAoL,YACApD,GAAAhI,EAAAW,aAEAqI,GAAAhJ,EAAAsL,YAAArC,GAAAjJ,EAEAF,cAAA6J,QAAA,IAAAV,GAAgBhI,EAAmBnB,cAAAmJ,GAAAW,GAAA5J,EACnCD,QAAAgK,QAAA,IAAAH,GAAU3I,EAAmBlB,QAAA6J,GAC7BK,GAAAjK,EAAAiD,QACAiH,GAAAlK,EAAAmD,aACA+H,GAAAlL,EAAAqD,aAEAoI,GAAAzL,EAAAa,QAAA6K,GAAA1L,EAEA6G,WAAA8E,QAAA,IAAAD,GAAazK,EAAmB4F,WAAA6E,GAEhCE,GAAA5L,EAAA4N,UAEM9B,IAAWnI,EAAAA,EAAAA,QAAiC,MAE5CoI,IAAQ/H,EAAAA,EAAAA,MAAAgI,IACuDrJ,EAAAA,EAAAA,IACjEb,EACAI,EACAiD,GAHI+G,GAAAF,GAAAzD,OAAQsF,GAAA7B,GAAA8B,WAAYC,GAAA/B,GAAAgC,YAAaC,GAAAjC,GAAAkC,WAAYC,GAAAnC,GAAAoC,YAAAC,GAiBjDhD,EAAiB,CACjBrN,QAAAwD,EACAtC,MAAArB,EACA8C,aAAAqH,GACAsD,YAAAtC,GACAvJ,OAAAuH,EACAxH,QAAA+L,EACA1L,YAAA8H,GACAtI,eAAAtB,EACAG,UAAAkE,EACAjE,OAAAmE,EACAlE,QAAAoE,EACAlB,KAAArB,EACAhC,KAAA2D,EACAvD,SAAAqE,EACApE,SAAAsE,EACA2F,OAAA2D,GACAzJ,MAAOoL,GACPhM,OAAQkM,GACRpP,QAAAuE,EACAtE,aAAAwE,EACA7E,WAAAsE,EACApE,WAAAsE,EACA9D,YAAA8F,EACA5F,eAAA+F,EACA9F,gBAAAtB,EACA+C,QAAA4K,GACAL,YAAArD,KArCAuG,GAAAD,GAAA3E,KACA6E,GAAAF,GAAAjC,cACAoC,GAAAH,GAAAhG,OACAoG,GAAAJ,GAAA/F,OACAoG,GAAAL,GAAAhC,SACAsC,GAAAN,GAAAjG,gBACAwG,GAAAP,GAAA/B,eACAuC,GAAAR,GAAA9B,cACAuC,GAAAT,GAAA7B,qBACAuC,GAAAV,GAAA3B,gBAAAsC,IA+B0C/K,EAAAA,EAAAA,MAAtCgL,GAAAD,GAAA7K,qBAAsB+K,GAAAF,GAAAzK,YAGxB4K,IAAwBzN,EAAAA,EAAAA,IAAuB,CACjDX,aAAaQ,EAAAA,EAAAA,IAAe,CACxBD,KAAMgN,GACNvN,YAAA8G,GACAuH,YAAa,SAAApP,GAAA,MAAS,CAClB2C,EAAG3C,EAAK2C,EACRC,EAAG5C,EAAK4C,EAAA,EAEZyM,cAAe,SAAArP,GAAA,IAAGC,EAAAD,EAAAyC,MAAOtC,EAAAH,EAAA6B,OAAA,MAAc,CACnCY,MAAAxC,EACA4B,OAAA1B,EACAmP,KAAM/J,KAAKC,IAAIvF,EAAOE,GAAA,MAM5BoP,IAAoB9K,EAAAA,EAAAA,UACtB,iBAAO,CACH9E,aAAA2H,EACA1H,YAAA8H,EACAzI,YAAA8F,EACAjF,cAAA6J,GACAxK,eAAA+F,EACA9F,gBAAAtB,EACAmF,QAAAgH,GACA9G,aAAA+G,GACA7G,aAAA6H,GACA9C,gBAAAuG,GACA5O,QAAAgK,GACAxB,OAAA2D,GACA4B,WAAAD,GACAG,YAAAD,GACAtL,MAAAX,EACAD,OAAAK,EACAwH,KAAA4E,GACAjG,OAAAmG,GACAlG,OAAAmG,GAAA,GAEJ,CACInH,EACAI,EACA3C,EACA4J,GACAzM,EACA6L,GACAF,GACAlE,GACA7L,EACAoH,EACAgH,GACAjC,GACAC,GACAgB,GACAoD,GACAE,GACAC,GACA1E,GACAjI,KAIR+B,EAAAA,EAAAA,YAAU,eAAA7D,EACAC,EAAA,OAAAD,EAAM8L,GAAS0D,cAAA,EAATxP,EAAkByP,WAAW,MAEpC3D,GAAS0D,SACTvP,IAEL6L,GAAS0D,QAAQ/M,MAAQwL,GAAatC,GACtCG,GAAS0D,QAAQ3N,OAASsM,GAAcxC,GAExC1L,EAAIyP,MAAM/D,GAAYA,IAEtB1L,EAAI+M,UAAYjB,GAAM4D,WACtB1P,EAAI2P,SAAS,EAAG,EAAG3B,GAAYE,IAC/BlO,EAAI4P,UAAU3D,GAAOpD,KAAMoD,GAAOnD,KAElC1I,EAAOmI,SAAQ,SAAAxI,GACG,SAAVA,EAxPuD,iBAyP1C+L,GAAM+D,KAAKC,KAAKnK,aAAgBmG,GAAM+D,KAAKC,KAAKnK,YAAc,IACvE3F,EAAIiN,UAAYnB,GAAM+D,KAAKC,KAAKnK,YAChC3F,EAAIgN,YAAclB,GAAM+D,KAAKC,KAAKlK,OAE9B3B,IACA/D,EAAAA,EAAAA,IAAyCF,EAAK,CAC1CwC,MAAAX,EACAD,OAAAK,EACAwN,MAAOlB,GACPwB,KAAM,IACNC,OAAQzL,IAIZF,IACAnE,EAAAA,EAAAA,IAAyCF,EAAK,CAC1CwC,MAAAX,EACAD,OAAAK,EACAwN,MAAOjB,GACPuB,KAAM,IACNC,OAAQtL,KAIH,SAAV3E,GACPI,EAAAA,EAAAA,IAAmBH,EAAK,CACpBoI,OAAQmG,GACRlG,OAAQmG,GACRhM,MAAOoL,GACPhM,OAAQkM,GACRhF,IAAKzF,EACL4M,MAAO3M,EACP4M,OAAQ/K,EACR0D,KAAM/E,EACNxE,MAAAwM,KAEa,SAAV/L,EACPuO,GAAc/F,SAAQ,SAAAxI,GAClB8E,EAAU7E,EAAK,CACXoB,IAAArB,EACAH,YAAa+O,GAAe5O,GAC5BL,aAAA2H,EACA1H,YAAA8H,EACAxI,MAAOwP,GAAS1O,EAAIsB,MACpBS,WAAY8M,GAAc7O,GAC1B8C,kBAAmBgM,GAAqB9O,IAAA,IAG/B,YAAVA,EACP+O,GAAgBvG,SAAQ,SAAAxI,GAAA,IAAEG,EAAAH,EAAA,GAAQI,EAAAJ,EAAA,IAC9BgC,EAAAA,EAAAA,IAAqB/B,EAAAiB,EAAA,GACdf,EAAA,CACHmB,KAAAlB,EACAgQ,eAAgBvC,GAChBwC,gBAAiBtC,GACjBxO,MAAAwM,KAAA,IAGS,gBAAV/L,GACP2B,EAAAA,EAAAA,IAA0B1B,EAAK,CAAEc,YAAaoO,GAAkB5P,MAAAwM,KACxC,mBAAV/L,GACdA,EAAMC,EAAKsP,GAAA,IAInBtP,EAAIqQ,OAAA,GACL,CACClL,EACArB,EACAR,EACAD,EACAiL,GACAjH,EACAI,EACAyH,GACAjL,EACAI,EACAsK,GACAF,GACAG,GACArK,EACAG,EACAvC,EACAF,EACA6L,GACAF,GACA0B,GACAlP,EACAiC,EACAyM,GACA7C,GAAOpD,KACPoD,GAAOnD,IACPoF,GACAF,GACAtC,GACA7G,EACA0J,GACAC,GACAjM,EACAsM,GACA/C,GACAjK,IAAA,IAGEyO,IAAmB3L,EAAAA,EAAAA,cACrB,SAAC5E,GAAA,GACQsO,IACAxC,GAAS0D,QAAA,KAAAvP,GAEC+C,EAAAA,EAAAA,IAAkB8I,GAAS0D,QAASxP,GAA5CG,EAAAF,EAAA,GAAGG,EAAAH,EAAA,GACJsB,EAAMsK,EAAmByC,GAAMpC,GAAQ/L,EAAGC,QAAA,IAE5CmB,GACA0N,IACIvK,EAAAA,EAAAA,eAAcqF,GAAA7I,EAAA,GACPK,EAAID,KAAA,CACPpB,MAAOqB,EAAIrB,MACXhB,MAAOqC,EAAIrC,MACXsB,MAAOiH,OAAOlG,EAAID,KAAKd,UAE3BR,GAGe,eAAfA,EAAMxB,OAAA,MACN0L,IAAAA,GAAe3I,EAAID,KAAMtB,KAG7BkP,IAAA,IAGR,CAACA,GAAahD,GAAQhC,GAAcoE,GAAMW,GAAsBlF,KAG9DyG,IAAmB5L,EAAAA,EAAAA,cACrB,SAAC5E,GAAA,GACQsO,IACAxC,GAAS0D,QAAA,CAEdN,KAAA,IAAAjP,GAEe+C,EAAAA,EAAAA,IAAkB8I,GAAS0D,QAASxP,GAA5CG,EAAAF,EAAA,GAAGG,EAAAH,EAAA,GACJsB,EAAMsK,EAAmByC,GAAMpC,GAAQ/L,EAAGC,GAE5CmB,IAAA,MACA2J,IAAAA,GAAe3J,EAAID,KAAMtB,GAAA,IAGjC,CAACkP,GAAahD,GAAQhB,GAAcoD,KAGlCmC,IAAc7L,EAAAA,EAAAA,cAChB,SAAC5E,GAAA,GACQsO,IACAxC,GAAS0D,QAAA,KAAAvP,GAEC+C,EAAAA,EAAAA,IAAkB8I,GAAS0D,QAASxP,GAA5CG,EAAAF,EAAA,GAAGG,EAAAH,EAAA,GACJsB,EAAMsK,EAAmByC,GAAMpC,GAAQ/L,EAAGC,QAAA,IAE5CmB,IAAA,MACA0I,IAAAA,GAAA/I,EAAA,GAAeK,EAAID,KAAA,CAAMpB,MAAOqB,EAAIrB,QAASF,GAAA,IAGrD,CAACkM,GAAQjC,GAASqE,KAAA,OAIlB5Q,EAAAA,EAAAA,KAAA,UACIgT,IAAK,SAAA1Q,GACD8L,GAAS0D,QAAUxP,EACf4L,IAAa,YAAaA,KAAWA,GAAU4D,QAAUxP,EAAA,EAEjEyC,MAAOwL,GAAatC,GACpB9J,OAAQsM,GAAcxC,GACtBlK,MAAO,CACHgB,MAAOwL,GACPpM,OAAQsM,GACRwC,OAAQhH,GAAgB,OAAS,UAErCxG,aAAcwG,GAAgB4G,QAAA,EAC9BvK,YAAa2D,GAAgB4G,QAAA,EAC7BlN,aAAcsG,GAAgB6G,QAAA,EAC9BvN,QAAS0G,GAAgB8G,QAAA,GAAc,EAKtC1E,GAAYtI,EAAAA,EAAAA,aACrB,SAAAzD,EAEIC,GAAA,IADEE,EAAAH,EAAAF,cAAeM,EAAAJ,EAAA4Q,cAAerP,EAAAvB,EAAAT,MAAUiC,EAAAnB,EAAAL,EAAA4L,GAAA,OAG1ClO,EAAAA,EAAAA,KAAC8E,EAAAA,GAAA,CAAgB1C,cAAAK,EAAeyQ,cAAAxQ,EAAeb,MAAAgC,EAASmF,SAAA,EAASrB,UAC7D3H,EAAAA,EAAAA,KAACoO,EAAA5K,EAAA,GAA6BM,EAAA,CAAOoM,UAAW3N,MAAA,KClezBwD,EAAAA,EAAAA,aAAW,SAE5CzD,EAA2DC,GAAA,OAErDvC,EAAAA,EAAAA,KAAC0F,EAAAA,EAAA,CAAAiC,SACI,SAAAlF,GAAA,IAAGC,EAAAD,EAAAsC,MAAOlB,EAAApB,EAAA0B,OAAA,OACPnE,EAAAA,EAAAA,KAACqO,EAAA7K,EAAA,CACGuB,MAAOrC,EACPyB,OAAQN,GACHvB,EAAA,CACL0Q,IAAKzQ,IAAA,M","sources":["../node_modules/d3-shape/src/array.js","../node_modules/d3-shape/src/stack.js","../node_modules/@nivo/bar/src/BarAnnotations.tsx","../node_modules/@nivo/bar/src/BarLegends.tsx","../node_modules/@nivo/bar/src/BarItem.tsx","../node_modules/@nivo/bar/src/props.ts","../node_modules/@nivo/bar/src/BarTooltip.tsx","../node_modules/@nivo/bar/src/compute/common.ts","../node_modules/@nivo/bar/src/compute/grouped.ts","../node_modules/@nivo/bar/src/compute/stacked.ts","../node_modules/@nivo/bar/src/compute/legends.ts","../node_modules/@nivo/bar/src/hooks.ts","../node_modules/@nivo/bar/src/Bar.tsx","../node_modules/@nivo/bar/src/BarCanvas.tsx","../node_modules/@nivo/bar/src/ResponsiveBarCanvas.tsx"],"sourcesContent":["export var slice = Array.prototype.slice;\n","import {slice} from \"./array.js\";\nimport constant from \"./constant.js\";\nimport offsetNone from \"./offset/none.js\";\nimport orderNone from \"./order/none.js\";\n\nfunction stackValue(d, key) {\n  return d[key];\n}\n\nexport default function() {\n  var keys = constant([]),\n      order = orderNone,\n      offset = offsetNone,\n      value = stackValue;\n\n  function stack(data) {\n    var kz = keys.apply(this, arguments),\n        i,\n        m = data.length,\n        n = kz.length,\n        sz = new Array(n),\n        oz;\n\n    for (i = 0; i < n; ++i) {\n      for (var ki = kz[i], si = sz[i] = new Array(m), j = 0, sij; j < m; ++j) {\n        si[j] = sij = [0, +value(data[j], ki, j, data)];\n        sij.data = data[j];\n      }\n      si.key = ki;\n    }\n\n    for (i = 0, oz = order(sz); i < n; ++i) {\n      sz[oz[i]].index = i;\n    }\n\n    offset(sz, oz);\n    return sz;\n  }\n\n  stack.keys = function(_) {\n    return arguments.length ? (keys = typeof _ === \"function\" ? _ : constant(slice.call(_)), stack) : keys;\n  };\n\n  stack.value = function(_) {\n    return arguments.length ? (value = typeof _ === \"function\" ? _ : constant(+_), stack) : value;\n  };\n\n  stack.order = function(_) {\n    return arguments.length ? (order = _ == null ? orderNone : typeof _ === \"function\" ? _ : constant(slice.call(_)), stack) : order;\n  };\n\n  stack.offset = function(_) {\n    return arguments.length ? (offset = _ == null ? offsetNone : _, stack) : offset;\n  };\n\n  return stack;\n}\n","import { Annotation, useAnnotations } from '@nivo/annotations'\nimport { BarAnnotationsProps } from './types'\n\nexport const BarAnnotations = <RawDatum,>({ bars, annotations }: BarAnnotationsProps<RawDatum>) => {\n    const boundAnnotations = useAnnotations({\n        data: bars,\n        annotations,\n        getPosition: bar => ({\n            x: bar.x + bar.width / 2,\n            y: bar.y + bar.height / 2,\n        }),\n        getDimensions: ({ height, width }) => ({\n            width,\n            height,\n            size: Math.max(width, height),\n        }),\n    })\n\n    return (\n        <>\n            {boundAnnotations.map((annotation, i) => (\n                <Annotation key={i} {...annotation} />\n            ))}\n        </>\n    )\n}\n","import { BoxLegendSvg } from '@nivo/legends'\nimport { BarLegendProps, LegendData } from './types'\n\ninterface BarLegendsProps {\n    width: number\n    height: number\n    legends: [BarLegendProps, LegendData[]][]\n    toggleSerie: (id: string | number) => void\n}\n\nexport const BarLegends = ({ width, height, legends, toggleSerie }: BarLegendsProps) => (\n    <>\n        {legends.map(([legend, data], i) => (\n            <BoxLegendSvg\n                key={i}\n                {...legend}\n                containerWidth={width}\n                containerHeight={height}\n                data={legend.data ?? data}\n                toggleSerie={\n                    legend.toggleSerie && legend.dataFrom === 'keys' ? toggleSerie : undefined\n                }\n            />\n        ))}\n    </>\n)\n","import { createElement, MouseEvent, useCallback, useMemo } from 'react'\nimport { animated, to } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport { BarDatum, BarItemProps } from './types'\n\nexport const BarItem = <RawDatum extends BarDatum>({\n    bar: { data, ...bar },\n\n    style: {\n        borderColor,\n        color,\n        height,\n        labelColor,\n        labelOpacity,\n        labelX,\n        labelY,\n        transform,\n        width,\n    },\n\n    borderRadius,\n    borderWidth,\n\n    label,\n    shouldRenderLabel,\n\n    isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n\n    tooltip,\n\n    isFocusable,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: BarItemProps<RawDatum>) => {\n    const theme = useTheme()\n    const { showTooltipFromEvent, showTooltipAt, hideTooltip } = useTooltip()\n\n    const renderTooltip = useMemo(\n        () => () => createElement(tooltip, { ...bar, ...data }),\n        [tooltip, bar, data]\n    )\n\n    const handleClick = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onClick?.({ color: bar.color, ...data }, event)\n        },\n        [bar, data, onClick]\n    )\n    const handleTooltip = useCallback(\n        (event: MouseEvent<SVGRectElement>) => showTooltipFromEvent(renderTooltip(), event),\n        [showTooltipFromEvent, renderTooltip]\n    )\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseEnter?.(data, event)\n            showTooltipFromEvent(renderTooltip(), event)\n        },\n        [data, onMouseEnter, showTooltipFromEvent, renderTooltip]\n    )\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseLeave?.(data, event)\n            hideTooltip()\n        },\n        [data, hideTooltip, onMouseLeave]\n    )\n\n    // extra handlers to allow keyboard navigation\n    const handleFocus = useCallback(() => {\n        showTooltipAt(renderTooltip(), [bar.absX + bar.width / 2, bar.absY])\n    }, [showTooltipAt, renderTooltip, bar])\n    const handleBlur = useCallback(() => {\n        hideTooltip()\n    }, [hideTooltip])\n\n    return (\n        <animated.g transform={transform}>\n            <animated.rect\n                width={to(width, value => Math.max(value, 0))}\n                height={to(height, value => Math.max(value, 0))}\n                rx={borderRadius}\n                ry={borderRadius}\n                fill={data.fill ?? color}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                focusable={isFocusable}\n                tabIndex={isFocusable ? 0 : undefined}\n                aria-label={ariaLabel ? ariaLabel(data) : undefined}\n                aria-labelledby={ariaLabelledBy ? ariaLabelledBy(data) : undefined}\n                aria-describedby={ariaDescribedBy ? ariaDescribedBy(data) : undefined}\n                onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n                onMouseMove={isInteractive ? handleTooltip : undefined}\n                onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n                onClick={isInteractive ? handleClick : undefined}\n                onFocus={isInteractive && isFocusable ? handleFocus : undefined}\n                onBlur={isInteractive && isFocusable ? handleBlur : undefined}\n            />\n            {shouldRenderLabel && (\n                <animated.text\n                    x={labelX}\n                    y={labelY}\n                    textAnchor=\"middle\"\n                    dominantBaseline=\"central\"\n                    fillOpacity={labelOpacity}\n                    style={{\n                        ...theme.labels.text,\n                        pointerEvents: 'none',\n                        fill: labelColor,\n                    }}\n                >\n                    {label}\n                </animated.text>\n            )}\n        </animated.g>\n    )\n}\n","import { BarItem } from './BarItem'\nimport { BarTooltip } from './BarTooltip'\nimport { ComputedDatum } from './types'\nimport { InheritedColorConfig, OrdinalColorScaleConfig } from '@nivo/colors'\nimport { ScaleBandSpec, ScaleSpec } from '@nivo/scales'\n\nexport const defaultProps = {\n    indexBy: 'id',\n    keys: ['value'],\n\n    groupMode: 'stacked' as const,\n    layout: 'vertical' as const,\n    reverse: false,\n\n    minValue: 'auto' as const,\n    maxValue: 'auto' as const,\n\n    valueScale: { type: 'linear' } as ScaleSpec,\n    indexScale: { type: 'band', round: true } as ScaleBandSpec,\n\n    padding: 0.1,\n    innerPadding: 0,\n\n    axisBottom: {},\n    axisLeft: {},\n    enableGridX: false,\n    enableGridY: true,\n\n    enableLabel: true,\n    label: 'formattedValue',\n    labelSkipWidth: 0,\n    labelSkipHeight: 0,\n    labelTextColor: { from: 'theme', theme: 'labels.text.fill' },\n\n    colorBy: 'id' as const,\n    colors: { scheme: 'nivo' } as OrdinalColorScaleConfig,\n\n    borderRadius: 0,\n    borderWidth: 0,\n    borderColor: { from: 'color' } as InheritedColorConfig<any>,\n\n    isInteractive: true,\n    tooltip: BarTooltip,\n    tooltipLabel: <RawDatum>(datum: ComputedDatum<RawDatum>) => `${datum.id} - ${datum.indexValue}`,\n\n    legends: [],\n    initialHiddenIds: [],\n    annotations: [],\n    markers: [],\n}\n\nexport const svgDefaultProps = {\n    ...defaultProps,\n    layers: ['grid', 'axes', 'bars', 'markers', 'legends', 'annotations'],\n    barComponent: BarItem,\n\n    defs: [],\n    fill: [],\n\n    animate: true,\n    motionConfig: 'default',\n\n    role: 'img',\n    isFocusable: false,\n}\n\nexport const canvasDefaultProps = {\n    ...defaultProps,\n    layers: ['grid', 'axes', 'bars', 'legends', 'annotations'],\n\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio ?? 1 : 1,\n}\n","import { BarTooltipProps } from './types'\nimport { BasicTooltip } from '@nivo/tooltip'\n\nexport const BarTooltip = <RawDatum,>({ color, label, ...data }: BarTooltipProps<RawDatum>) => {\n    return <BasicTooltip id={label} value={data.formattedValue} enableChip={true} color={color} />\n}\n","import { ScaleBandSpec, ScaleBand, computeScale } from '@nivo/scales'\n\n/**\n * Generates indexed scale.\n */\nexport const getIndexScale = <RawDatum>(\n    data: RawDatum[],\n    getIndex: (datum: RawDatum) => string,\n    padding: number,\n    indexScale: ScaleBandSpec,\n    size: number,\n    axis: 'x' | 'y'\n) => {\n    return (\n        computeScale(\n            indexScale,\n            { all: data.map(getIndex), min: 0, max: 0 },\n            size,\n            axis\n        ) as ScaleBand<string>\n    ).padding(padding)\n}\n\n/**\n * This method ensures all the provided keys exist in the entire series.\n */\nexport const normalizeData = <RawDatum>(data: RawDatum[], keys: string[]) =>\n    data.map(\n        item =>\n            ({\n                ...keys.reduce<Record<string, unknown>>((acc, key) => {\n                    acc[key] = null\n                    return acc\n                }, {}),\n                ...item,\n            } as RawDatum)\n    )\n\nexport const filterNullValues = <RawDatum extends Record<string, unknown>>(data: RawDatum) =>\n    Object.keys(data).reduce<Record<string, unknown>>((acc, key) => {\n        if (data[key]) {\n            acc[key] = data[key]\n        }\n        return acc\n    }, {}) as Exclude<RawDatum, null | undefined | false | '' | 0>\n\nexport const coerceValue = <T>(value: T) => [value, Number(value)] as const\n","import { Margin } from '@nivo/core'\nimport { OrdinalColorScale } from '@nivo/colors'\nimport { Scale, ScaleBand, computeScale } from '@nivo/scales'\nimport { BarDatum, BarSvgProps, ComputedBarDatum, ComputedDatum } from '../types'\nimport { coerceValue, filterNullValues, getIndexScale, normalizeData } from './common'\n\ntype Params<RawDatum, XScaleInput, YScaleInput> = {\n    data: RawDatum[]\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    innerPadding: number\n    keys: string[]\n    xScale: XScaleInput extends string ? ScaleBand<XScaleInput> : Scale<XScaleInput, number>\n    yScale: YScaleInput extends string ? ScaleBand<YScaleInput> : Scale<YScaleInput, number>\n    margin: Margin\n}\n\nconst gt = (value: number, other: number) => value > other\nconst lt = (value: number, other: number) => value < other\n\nconst range = (start: number, end: number) =>\n    Array.from(' '.repeat(end - start), (_, index) => start + index)\n\nconst clampToZero = (value: number) => (gt(value, 0) ? 0 : value)\nconst zeroIfNotFinite = (value: number) => (isFinite(value) ? value : 0)\n\n/**\n * Generates x/y scales & bars for vertical grouped bar chart.\n */\nconst generateVerticalGroupedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        data,\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding = 0,\n        keys,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, string, number>,\n    barWidth: number,\n    reverse: boolean,\n    yRef: number\n): ComputedBarDatum<RawDatum>[] => {\n    const compare = reverse ? lt : gt\n    const getY = (d: number) => (compare(d, 0) ? yScale(d) ?? 0 : yRef)\n    const getHeight = (d: number, y: number) => (compare(d, 0) ? yRef - y : (yScale(d) ?? 0) - yRef)\n    const cleanedData = data.map(filterNullValues)\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    keys.forEach((key, i) =>\n        range(0, xScale.domain().length).forEach(index => {\n            const [rawValue, value] = coerceValue(data[index][key])\n            const indexValue = getIndex(data[index])\n            const x = (xScale(indexValue) ?? 0) + barWidth * i + innerPadding * i\n            const y = getY(value)\n            const barHeight = getHeight(value, y)\n            const barData: ComputedDatum<RawDatum> = {\n                id: key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index,\n                indexValue,\n                data: cleanedData[index],\n            }\n\n            bars.push({\n                key: `${key}.${barData.indexValue}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for horizontal grouped bar chart.\n */\nconst generateHorizontalGroupedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        data,\n        formatValue,\n        getIndex,\n        getColor,\n        getTooltipLabel,\n        keys,\n        innerPadding = 0,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, number, string>,\n    barHeight: number,\n    reverse: boolean,\n    xRef: number\n): ComputedBarDatum<RawDatum>[] => {\n    const compare = reverse ? lt : gt\n    const getX = (d: number) => (compare(d, 0) ? xRef : xScale(d) ?? 0)\n    const getWidth = (d: number, x: number) => (compare(d, 0) ? (xScale(d) ?? 0) - xRef : xRef - x)\n    const cleanedData = data.map(filterNullValues)\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    keys.forEach((key, i) =>\n        range(0, yScale.domain().length).forEach(index => {\n            const [rawValue, value] = coerceValue(data[index][key])\n            const indexValue = getIndex(data[index])\n            const x = getX(value)\n            const y = (yScale(indexValue) ?? 0) + barHeight * i + innerPadding * i\n            const barWidth = getWidth(value, x)\n            const barData: ComputedDatum<RawDatum> = {\n                id: key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index,\n                indexValue,\n                data: cleanedData[index],\n            }\n\n            bars.push({\n                key: `${key}.${barData.indexValue}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for grouped bar chart.\n */\nexport const generateGroupedBars = <RawDatum extends BarDatum>({\n    layout,\n    minValue,\n    maxValue,\n    reverse,\n    width,\n    height,\n    padding = 0,\n    innerPadding = 0,\n    valueScale,\n    indexScale: indexScaleConfig,\n    hiddenIds = [],\n    ...props\n}: Pick<\n    Required<BarSvgProps<RawDatum>>,\n    | 'data'\n    | 'height'\n    | 'indexScale'\n    | 'innerPadding'\n    | 'keys'\n    | 'layout'\n    | 'maxValue'\n    | 'minValue'\n    | 'padding'\n    | 'reverse'\n    | 'valueScale'\n    | 'width'\n> & {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    margin: Margin\n    hiddenIds?: string[]\n}) => {\n    const keys = props.keys.filter(key => !hiddenIds.includes(key))\n    const data = normalizeData(props.data, keys)\n    const [axis, otherAxis, size] =\n        layout === 'vertical' ? (['y', 'x', width] as const) : (['x', 'y', height] as const)\n    const indexScale = getIndexScale(\n        data,\n        props.getIndex,\n        padding,\n        indexScaleConfig,\n        size,\n        otherAxis\n    )\n\n    const scaleSpec = {\n        max: maxValue,\n        min: minValue,\n        reverse,\n        ...valueScale,\n    }\n\n    const clampMin = scaleSpec.min === 'auto' ? clampToZero : (value: number) => value\n\n    const values = data\n        .reduce<number[]>((acc, entry) => [...acc, ...keys.map(k => entry[k] as number)], [])\n        .filter(Boolean)\n    const min = clampMin(Math.min(...values))\n    const max = zeroIfNotFinite(Math.max(...values))\n\n    const scale = computeScale(\n        scaleSpec as any,\n        { all: values, min, max },\n        axis === 'x' ? width : height,\n        axis\n    )\n\n    const [xScale, yScale] = layout === 'vertical' ? [indexScale, scale] : [scale, indexScale]\n\n    const bandwidth = (indexScale.bandwidth() - innerPadding * (keys.length - 1)) / keys.length\n    const params = [\n        { ...props, data, keys, innerPadding, xScale, yScale } as Params<RawDatum, any, any>,\n        bandwidth,\n        scaleSpec.reverse,\n        scale(0) ?? 0,\n    ] as const\n\n    const bars: ComputedBarDatum<RawDatum>[] =\n        bandwidth > 0\n            ? layout === 'vertical'\n                ? generateVerticalGroupedBars(...params)\n                : generateHorizontalGroupedBars(...params)\n            : []\n\n    return { xScale, yScale, bars }\n}\n","import { Margin } from '@nivo/core'\nimport { OrdinalColorScale } from '@nivo/colors'\nimport { Scale, ScaleBand, computeScale } from '@nivo/scales'\nimport { Series, SeriesPoint, stack, stackOffsetDiverging } from 'd3-shape'\nimport { BarDatum, BarSvgProps, ComputedBarDatum, ComputedDatum } from '../types'\nimport { coerceValue, filterNullValues, getIndexScale, normalizeData } from './common'\n\ntype StackDatum<RawDatum> = SeriesPoint<RawDatum>\n\ntype Params<RawDatum, XScaleInput, YScaleInput> = {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    innerPadding: number\n    stackedData: Series<RawDatum, string>[]\n    xScale: XScaleInput extends string ? ScaleBand<XScaleInput> : Scale<XScaleInput, number>\n    yScale: YScaleInput extends string ? ScaleBand<YScaleInput> : Scale<YScaleInput, number>\n    margin: Margin\n}\n\nconst flattenDeep = <T>(arr: T[]): T =>\n    arr.some(Array.isArray) ? flattenDeep(([] as T[]).concat(...arr)) : (arr as unknown as T)\n\nconst filterZerosIfLog = (array: number[], type: string) =>\n    type === 'log' ? array.filter(num => num !== 0) : array\n\n/**\n * Generates x/y scales & bars for vertical stacked bar chart.\n */\nconst generateVerticalStackedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding,\n        stackedData,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, string, number>,\n    barWidth: number,\n    reverse: boolean\n): ComputedBarDatum<RawDatum>[] => {\n    const getY = (d: StackDatum<RawDatum>) => yScale(d[reverse ? 0 : 1])\n    const getHeight = (d: StackDatum<RawDatum>, y: number) => (yScale(d[reverse ? 1 : 0]) ?? 0) - y\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    stackedData.forEach(stackedDataItem =>\n        xScale.domain().forEach((index, i) => {\n            const d = stackedDataItem[i]\n            const x = xScale(getIndex(d.data)) ?? 0\n            const y = (getY(d) ?? 0) + innerPadding * 0.5\n            const barHeight = getHeight(d, y) - innerPadding\n            const [rawValue, value] = coerceValue(d.data[stackedDataItem.key])\n\n            const barData: ComputedDatum<RawDatum> = {\n                id: stackedDataItem.key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index: i,\n                indexValue: index,\n                data: filterNullValues(d.data),\n            }\n\n            bars.push({\n                key: `${stackedDataItem.key}.${index}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for horizontal stacked bar chart.\n */\nconst generateHorizontalStackedBars = <RawDatum extends Record<string, unknown>>(\n    {\n        formatValue,\n        getColor,\n        getIndex,\n        getTooltipLabel,\n        innerPadding,\n        stackedData,\n        xScale,\n        yScale,\n        margin,\n    }: Params<RawDatum, number, string>,\n    barHeight: number,\n    reverse: boolean\n): ComputedBarDatum<RawDatum>[] => {\n    const getX = (d: StackDatum<RawDatum>) => xScale(d[reverse ? 1 : 0])\n    const getWidth = (d: StackDatum<RawDatum>, x: number) => (xScale(d[reverse ? 0 : 1]) ?? 0) - x\n\n    const bars: ComputedBarDatum<RawDatum>[] = []\n    stackedData.forEach(stackedDataItem =>\n        yScale.domain().forEach((index, i) => {\n            const d = stackedDataItem[i]\n            const y = yScale(getIndex(d.data)) ?? 0\n            const x = (getX(d) ?? 0) + innerPadding * 0.5\n            const barWidth = getWidth(d, x) - innerPadding\n            const [rawValue, value] = coerceValue(d.data[stackedDataItem.key])\n\n            const barData: ComputedDatum<RawDatum> = {\n                id: stackedDataItem.key,\n                value: rawValue === null ? rawValue : value,\n                formattedValue: formatValue(value),\n                hidden: false,\n                index: i,\n                indexValue: index,\n                data: filterNullValues(d.data),\n            }\n\n            bars.push({\n                key: `${stackedDataItem.key}.${index}`,\n                index: bars.length,\n                data: barData,\n                x,\n                y,\n                absX: margin.left + x,\n                absY: margin.top + y,\n                width: barWidth,\n                height: barHeight,\n                color: getColor(barData),\n                label: getTooltipLabel(barData),\n            })\n        })\n    )\n\n    return bars\n}\n\n/**\n * Generates x/y scales & bars for stacked bar chart.\n */\nexport const generateStackedBars = <RawDatum extends BarDatum>({\n    data,\n    layout,\n    minValue,\n    maxValue,\n    reverse,\n    width,\n    height,\n    padding = 0,\n    valueScale,\n    indexScale: indexScaleConfig,\n    hiddenIds = [],\n    ...props\n}: Pick<\n    Required<BarSvgProps<RawDatum>>,\n    | 'data'\n    | 'height'\n    | 'indexScale'\n    | 'innerPadding'\n    | 'keys'\n    | 'layout'\n    | 'maxValue'\n    | 'minValue'\n    | 'padding'\n    | 'reverse'\n    | 'valueScale'\n    | 'width'\n> & {\n    formatValue: (value: number) => string\n    getColor: OrdinalColorScale<ComputedDatum<RawDatum>>\n    getIndex: (datum: RawDatum) => string\n    getTooltipLabel: (datum: ComputedDatum<RawDatum>) => string\n    margin: Margin\n    hiddenIds?: string[]\n}) => {\n    const keys = props.keys.filter(key => !hiddenIds.includes(key))\n    const stackedData = stack<RawDatum, string>().keys(keys).offset(stackOffsetDiverging)(\n        normalizeData(data, keys)\n    )\n\n    const [axis, otherAxis, size] =\n        layout === 'vertical' ? (['y', 'x', width] as const) : (['x', 'y', height] as const)\n    const indexScale = getIndexScale(\n        data,\n        props.getIndex,\n        padding,\n        indexScaleConfig,\n        size,\n        otherAxis\n    )\n\n    const scaleSpec = {\n        max: maxValue,\n        min: minValue,\n        reverse,\n        ...valueScale,\n    }\n\n    const values = filterZerosIfLog(\n        flattenDeep(stackedData as unknown as number[][]),\n        valueScale.type\n    )\n    const min = Math.min(...values)\n    const max = Math.max(...values)\n\n    const scale = computeScale(\n        scaleSpec as any,\n        { all: values, min, max },\n        axis === 'x' ? width : height,\n        axis\n    )\n\n    const [xScale, yScale] = layout === 'vertical' ? [indexScale, scale] : [scale, indexScale]\n\n    const innerPadding = props.innerPadding > 0 ? props.innerPadding : 0\n    const bandwidth = indexScale.bandwidth()\n    const params = [\n        { ...props, innerPadding, stackedData, xScale, yScale } as Params<RawDatum, any, any>,\n        bandwidth,\n        scaleSpec.reverse,\n    ] as const\n\n    const bars: ComputedBarDatum<RawDatum>[] =\n        bandwidth > 0\n            ? layout === 'vertical'\n                ? generateVerticalStackedBars(...params)\n                : generateHorizontalStackedBars(...params)\n            : []\n\n    return { xScale, yScale, bars }\n}\n","import {\n    BarDatum,\n    BarLegendProps,\n    BarSvgProps,\n    BarsWithHidden,\n    LegendData,\n    LegendLabelDatum,\n} from '../types'\nimport { getPropertyAccessor } from '@nivo/core'\nimport { uniqBy } from 'lodash'\n\nexport const getLegendDataForKeys = <RawDatum extends BarDatum>(\n    bars: BarsWithHidden<RawDatum>,\n    layout: NonNullable<BarSvgProps<RawDatum>['layout']>,\n    direction: BarLegendProps['direction'],\n    groupMode: NonNullable<BarSvgProps<RawDatum>['groupMode']>,\n    reverse: boolean,\n    getLegendLabel: (datum: LegendLabelDatum<RawDatum>) => string\n): LegendData[] => {\n    const data = uniqBy(\n        bars.map(bar => ({\n            id: bar.data.id,\n            label: getLegendLabel(bar.data),\n            hidden: bar.data.hidden,\n            color: bar.color ?? '#000',\n        })),\n        ({ id }) => id\n    )\n\n    if (\n        (layout === 'vertical' &&\n            groupMode === 'stacked' &&\n            direction === 'column' &&\n            reverse !== true) ||\n        (layout === 'horizontal' && groupMode === 'stacked' && reverse === true)\n    ) {\n        data.reverse()\n    }\n\n    return data\n}\n\nexport const getLegendDataForIndexes = <RawDatum extends BarDatum>(\n    bars: BarsWithHidden<RawDatum>,\n    layout: NonNullable<BarSvgProps<RawDatum>['layout']>,\n    getLegendLabel: (datum: LegendLabelDatum<RawDatum>) => string\n): LegendData[] => {\n    const data = uniqBy(\n        bars.map(bar => ({\n            id: bar.data.indexValue ?? '',\n            label: getLegendLabel(bar.data),\n            hidden: bar.data.hidden,\n            color: bar.color ?? '#000',\n        })),\n        ({ id }) => id\n    )\n\n    if (layout === 'horizontal') {\n        data.reverse()\n    }\n\n    return data\n}\n\nexport const getLegendData = <RawDatum extends BarDatum>({\n    bars,\n    direction,\n    from,\n    groupMode,\n    layout,\n    legendLabel,\n    reverse,\n}: Pick<Required<BarSvgProps<RawDatum>>, 'layout' | 'groupMode' | 'reverse'> & {\n    bars: BarsWithHidden<RawDatum>\n    direction: BarLegendProps['direction']\n    from: BarLegendProps['dataFrom']\n    legendLabel: BarSvgProps<RawDatum>['legendLabel']\n}) => {\n    const getLegendLabel = getPropertyAccessor(\n        legendLabel ?? (from === 'indexes' ? 'indexValue' : 'id')\n    )\n\n    if (from === 'indexes') {\n        return getLegendDataForIndexes(bars, layout, getLegendLabel)\n    }\n\n    return getLegendDataForKeys(bars, layout, direction, groupMode, reverse, getLegendLabel)\n}\n","import { useCallback, useMemo, useState } from 'react'\nimport { useInheritedColor, useOrdinalColorScale } from '@nivo/colors'\nimport { usePropertyAccessor, useTheme, useValueFormatter, Margin } from '@nivo/core'\nimport {\n    DataProps,\n    BarCommonProps,\n    BarDatum,\n    ComputedBarDatumWithValue,\n    LegendData,\n    BarLegendProps,\n} from './types'\nimport { defaultProps } from './props'\nimport { generateGroupedBars, generateStackedBars, getLegendData } from './compute'\n\nexport const useBar = <RawDatum extends BarDatum>({\n    indexBy = defaultProps.indexBy,\n    keys = defaultProps.keys,\n    label = defaultProps.label,\n    tooltipLabel = defaultProps.tooltipLabel,\n    valueFormat,\n    colors = defaultProps.colors,\n    colorBy = defaultProps.colorBy,\n    borderColor = defaultProps.borderColor,\n    labelTextColor = defaultProps.labelTextColor,\n    groupMode = defaultProps.groupMode,\n    layout = defaultProps.layout,\n    reverse = defaultProps.reverse,\n    data,\n    minValue = defaultProps.minValue,\n    maxValue = defaultProps.maxValue,\n    margin,\n    width,\n    height,\n    padding = defaultProps.padding,\n    innerPadding = defaultProps.innerPadding,\n    valueScale = defaultProps.valueScale,\n    indexScale = defaultProps.indexScale,\n    initialHiddenIds = defaultProps.initialHiddenIds,\n    enableLabel = defaultProps.enableLabel,\n    labelSkipWidth = defaultProps.labelSkipWidth,\n    labelSkipHeight = defaultProps.labelSkipHeight,\n    legends = defaultProps.legends,\n    legendLabel,\n}: {\n    indexBy?: BarCommonProps<RawDatum>['indexBy']\n    label?: BarCommonProps<RawDatum>['label']\n    tooltipLabel?: BarCommonProps<RawDatum>['tooltipLabel']\n    valueFormat?: BarCommonProps<RawDatum>['valueFormat']\n    colors?: BarCommonProps<RawDatum>['colors']\n    colorBy?: BarCommonProps<RawDatum>['colorBy']\n    borderColor?: BarCommonProps<RawDatum>['borderColor']\n    labelTextColor?: BarCommonProps<RawDatum>['labelTextColor']\n    groupMode?: BarCommonProps<RawDatum>['groupMode']\n    layout?: BarCommonProps<RawDatum>['layout']\n    reverse?: BarCommonProps<RawDatum>['reverse']\n    data: DataProps<RawDatum>['data']\n    keys?: BarCommonProps<RawDatum>['keys']\n    minValue?: BarCommonProps<RawDatum>['minValue']\n    maxValue?: BarCommonProps<RawDatum>['maxValue']\n    margin: Margin\n    width: number\n    height: number\n    padding?: BarCommonProps<RawDatum>['padding']\n    innerPadding?: BarCommonProps<RawDatum>['innerPadding']\n    valueScale?: BarCommonProps<RawDatum>['valueScale']\n    indexScale?: BarCommonProps<RawDatum>['indexScale']\n    initialHiddenIds?: BarCommonProps<RawDatum>['initialHiddenIds']\n    enableLabel?: BarCommonProps<RawDatum>['enableLabel']\n    labelSkipWidth?: BarCommonProps<RawDatum>['labelSkipWidth']\n    labelSkipHeight?: BarCommonProps<RawDatum>['labelSkipHeight']\n    legends?: BarCommonProps<RawDatum>['legends']\n    legendLabel?: BarCommonProps<RawDatum>['legendLabel']\n}) => {\n    const [hiddenIds, setHiddenIds] = useState(initialHiddenIds ?? [])\n    const toggleSerie = useCallback(id => {\n        setHiddenIds(state =>\n            state.indexOf(id) > -1 ? state.filter(item => item !== id) : [...state, id]\n        )\n    }, [])\n\n    const getIndex = usePropertyAccessor(indexBy)\n    const getLabel = usePropertyAccessor(label)\n    const getTooltipLabel = usePropertyAccessor(tooltipLabel)\n    const formatValue = useValueFormatter(valueFormat)\n\n    const theme = useTheme()\n    const getColor = useOrdinalColorScale(colors, colorBy)\n    const getBorderColor = useInheritedColor<ComputedBarDatumWithValue<RawDatum>>(\n        borderColor,\n        theme\n    )\n    const getLabelColor = useInheritedColor<ComputedBarDatumWithValue<RawDatum>>(\n        labelTextColor,\n        theme\n    )\n\n    const generateBars = groupMode === 'grouped' ? generateGroupedBars : generateStackedBars\n    const { bars, xScale, yScale } = generateBars({\n        layout,\n        reverse,\n        data,\n        getIndex,\n        keys,\n        minValue,\n        maxValue,\n        width,\n        height,\n        getColor,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        hiddenIds,\n        formatValue,\n        getTooltipLabel,\n        margin,\n    })\n\n    const barsWithValue = useMemo(\n        () =>\n            bars\n                .filter(\n                    (bar): bar is ComputedBarDatumWithValue<RawDatum> => bar.data.value !== null\n                )\n                .map((bar, index) => ({\n                    ...bar,\n                    index,\n                })),\n        [bars]\n    )\n\n    const shouldRenderBarLabel = useCallback(\n        ({ width, height }: { height: number; width: number }) => {\n            if (!enableLabel) return false\n            if (labelSkipWidth > 0 && width < labelSkipWidth) return false\n            if (labelSkipHeight > 0 && height < labelSkipHeight) return false\n            return true\n        },\n        [enableLabel, labelSkipWidth, labelSkipHeight]\n    )\n\n    const legendData = useMemo(\n        () =>\n            keys.map(key => {\n                const bar = bars.find(bar => bar.data.id === key)\n\n                return { ...bar, data: { id: key, ...bar?.data, hidden: hiddenIds.includes(key) } }\n            }),\n        [hiddenIds, keys, bars]\n    )\n\n    const legendsWithData: [BarLegendProps, LegendData[]][] = useMemo(\n        () =>\n            legends.map(legend => {\n                const data = getLegendData({\n                    bars: legend.dataFrom === 'keys' ? legendData : bars,\n                    direction: legend.direction,\n                    from: legend.dataFrom,\n                    groupMode,\n                    layout,\n                    legendLabel,\n                    reverse,\n                })\n\n                return [legend, data]\n            }),\n        [legends, legendData, bars, groupMode, layout, legendLabel, reverse]\n    )\n\n    return {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getIndex,\n        getLabel,\n        getTooltipLabel,\n        formatValue,\n        getColor,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        hiddenIds,\n        toggleSerie,\n        legendsWithData,\n    }\n}\n","import { Axes, Grid } from '@nivo/axes'\nimport { BarAnnotations } from './BarAnnotations'\nimport { BarDatum, BarLayer, BarLayerId, BarSvgProps, ComputedBarDatumWithValue } from './types'\nimport { BarLegends } from './BarLegends'\nimport {\n    CartesianMarkers,\n    Container,\n    SvgWrapper,\n    // @ts-ignore\n    bindDefs,\n    useDimensions,\n    useMotionConfig,\n} from '@nivo/core'\nimport { Fragment, ReactNode, createElement, useMemo } from 'react'\nimport { svgDefaultProps } from './props'\nimport { useTransition } from '@react-spring/web'\nimport { useBar } from './hooks'\n\ntype InnerBarProps<RawDatum extends BarDatum> = Omit<\n    BarSvgProps<RawDatum>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerBar = <RawDatum extends BarDatum>({\n    data,\n    indexBy,\n    keys,\n\n    margin: partialMargin,\n    width,\n    height,\n\n    groupMode,\n    layout,\n    reverse,\n    minValue,\n    maxValue,\n\n    valueScale,\n    indexScale,\n\n    padding,\n    innerPadding,\n\n    axisTop,\n    axisRight,\n    axisBottom = svgDefaultProps.axisBottom,\n    axisLeft = svgDefaultProps.axisLeft,\n    enableGridX = svgDefaultProps.enableGridX,\n    enableGridY = svgDefaultProps.enableGridY,\n    gridXValues,\n    gridYValues,\n\n    layers = svgDefaultProps.layers as BarLayer<RawDatum>[],\n    barComponent = svgDefaultProps.barComponent,\n\n    enableLabel,\n    label,\n    labelSkipWidth,\n    labelSkipHeight,\n    labelTextColor,\n\n    markers = svgDefaultProps.markers,\n\n    colorBy,\n    colors,\n    defs = svgDefaultProps.defs,\n    fill = svgDefaultProps.fill,\n    borderRadius = svgDefaultProps.borderRadius,\n    borderWidth = svgDefaultProps.borderWidth,\n    borderColor,\n\n    annotations = svgDefaultProps.annotations,\n\n    legendLabel,\n    tooltipLabel,\n\n    valueFormat,\n\n    isInteractive = svgDefaultProps.isInteractive,\n    tooltip = svgDefaultProps.tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n\n    legends,\n\n    role = svgDefaultProps.role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n    isFocusable = svgDefaultProps.isFocusable,\n    barAriaLabel,\n    barAriaLabelledBy,\n    barAriaDescribedBy,\n\n    initialHiddenIds,\n}: InnerBarProps<RawDatum>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getLabel,\n        getTooltipLabel,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        toggleSerie,\n        legendsWithData,\n    } = useBar<RawDatum>({\n        indexBy,\n        label,\n        tooltipLabel,\n        valueFormat,\n        colors,\n        colorBy,\n        borderColor,\n        labelTextColor,\n        groupMode,\n        layout,\n        reverse,\n        data,\n        keys,\n        minValue,\n        maxValue,\n        margin,\n        width: innerWidth,\n        height: innerHeight,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        enableLabel,\n        labelSkipWidth,\n        labelSkipHeight,\n        legends,\n        legendLabel,\n        initialHiddenIds,\n    })\n\n    const transition = useTransition<\n        ComputedBarDatumWithValue<RawDatum>,\n        {\n            borderColor: string\n            color: string\n            height: number\n            labelColor: string\n            labelOpacity: number\n            labelX: number\n            labelY: number\n            opacity: number\n            transform: string\n            width: number\n        }\n    >(barsWithValue, {\n        keys: bar => bar.key,\n        from: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: 0,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 0,\n            labelX: bar.width / 2,\n            labelY: bar.height / 2,\n            transform: `translate(${bar.x}, ${bar.y + bar.height})`,\n            width: bar.width,\n            ...(layout === 'vertical'\n                ? {}\n                : {\n                      height: bar.height,\n                      transform: `translate(${bar.x}, ${bar.y})`,\n                      width: 0,\n                  }),\n        }),\n        enter: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: bar.height,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 1,\n            labelX: bar.width / 2,\n            labelY: bar.height / 2,\n            transform: `translate(${bar.x}, ${bar.y})`,\n            width: bar.width,\n        }),\n        update: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: bar.height,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 1,\n            labelX: bar.width / 2,\n            labelY: bar.height / 2,\n            transform: `translate(${bar.x}, ${bar.y})`,\n            width: bar.width,\n        }),\n        leave: bar => ({\n            borderColor: getBorderColor(bar) as string,\n            color: bar.color,\n            height: 0,\n            labelColor: getLabelColor(bar) as string,\n            labelOpacity: 0,\n            labelX: bar.width / 2,\n            labelY: 0,\n            transform: `translate(${bar.x}, ${bar.y + bar.height})`,\n            width: bar.width,\n            ...(layout === 'vertical'\n                ? {}\n                : {\n                      labelX: 0,\n                      labelY: bar.height / 2,\n                      height: bar.height,\n                      transform: `translate(${bar.x}, ${bar.y})`,\n                      width: 0,\n                  }),\n        }),\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const commonProps = useMemo(\n        () => ({\n            borderRadius,\n            borderWidth,\n            enableLabel,\n            isInteractive,\n            labelSkipWidth,\n            labelSkipHeight,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            getTooltipLabel,\n            tooltip,\n            isFocusable,\n            ariaLabel: barAriaLabel,\n            ariaLabelledBy: barAriaLabelledBy,\n            ariaDescribedBy: barAriaDescribedBy,\n        }),\n        [\n            borderRadius,\n            borderWidth,\n            enableLabel,\n            getTooltipLabel,\n            isInteractive,\n            labelSkipHeight,\n            labelSkipWidth,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            tooltip,\n            isFocusable,\n            barAriaLabel,\n            barAriaLabelledBy,\n            barAriaDescribedBy,\n        ]\n    )\n\n    const boundDefs = bindDefs(defs, bars, fill, {\n        dataKey: 'data',\n        targetKey: 'data.fill',\n    })\n\n    const layerById: Record<BarLayerId, ReactNode> = {\n        annotations: null,\n        axes: null,\n        bars: null,\n        grid: null,\n        legends: null,\n        markers: null,\n    }\n\n    if (layers.includes('annotations')) {\n        layerById.annotations = (\n            <BarAnnotations key=\"annotations\" bars={bars} annotations={annotations} />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale as any}\n                yScale={yScale as any}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    if (layers.includes('bars')) {\n        layerById.bars = (\n            <Fragment key=\"bars\">\n                {transition((style, bar) =>\n                    createElement(barComponent, {\n                        ...commonProps,\n                        bar,\n                        style,\n                        shouldRenderLabel: shouldRenderBarLabel(bar),\n                        label: getLabel(bar.data),\n                    })\n                )}\n            </Fragment>\n        )\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? (xScale as any) : null}\n                yScale={enableGridY ? (yScale as any) : null}\n                xValues={gridXValues}\n                yValues={gridYValues}\n            />\n        )\n    }\n\n    if (layers.includes('legends')) {\n        layerById.legends = (\n            <BarLegends\n                key=\"legends\"\n                width={innerWidth}\n                height={innerHeight}\n                legends={legendsWithData}\n                toggleSerie={toggleSerie}\n            />\n        )\n    }\n\n    if (layers.includes('markers')) {\n        layerById.markers = (\n            <CartesianMarkers<number | string, number>\n                key=\"markers\"\n                markers={markers as any[]}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={xScale as (v: number | string) => number}\n                yScale={yScale as (v: number) => number}\n            />\n        )\n    }\n\n    // We use `any` here until we can figure out the best way to type xScale/yScale\n    const layerContext: any = useMemo(\n        () => ({\n            ...commonProps,\n            margin,\n            innerWidth,\n            innerHeight,\n            width,\n            height,\n            bars,\n            xScale,\n            yScale,\n        }),\n        [commonProps, margin, innerWidth, innerHeight, width, height, bars, xScale, yScale]\n    )\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n            isFocusable={isFocusable}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Bar = <RawDatum extends BarDatum>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: BarSvgProps<RawDatum>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerBar<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { BarCanvasLayer, BarCanvasProps, BarDatum, ComputedBarDatum } from './types'\nimport {\n    Container,\n    Margin,\n    getRelativeCursor,\n    isCursorInRect,\n    useDimensions,\n    useTheme,\n} from '@nivo/core'\nimport {\n    ForwardedRef,\n    createElement,\n    forwardRef,\n    useCallback,\n    useEffect,\n    useMemo,\n    useRef,\n} from 'react'\nimport { canvasDefaultProps } from './props'\nimport {\n    renderAnnotationsToCanvas,\n    useAnnotations,\n    useComputedAnnotations,\n} from '@nivo/annotations'\nimport { renderAxesToCanvas, renderGridLinesToCanvas } from '@nivo/axes'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useBar } from './hooks'\n\ntype InnerBarCanvasProps<RawDatum extends BarDatum> = Omit<\n    BarCanvasProps<RawDatum>,\n    'renderWrapper' | 'theme'\n> & {\n    canvasRef: ForwardedRef<HTMLCanvasElement>\n}\n\nconst findBarUnderCursor = <RawDatum,>(\n    nodes: ComputedBarDatum<RawDatum>[],\n    margin: Margin,\n    x: number,\n    y: number\n) =>\n    nodes.find(node =>\n        isCursorInRect(node.x + margin.left, node.y + margin.top, node.width, node.height, x, y)\n    )\n\nconst isNumber = (value: unknown): value is number => typeof value === 'number'\n\nconst InnerBarCanvas = <RawDatum extends BarDatum>({\n    data,\n    indexBy,\n    keys,\n\n    margin: partialMargin,\n    width,\n    height,\n\n    groupMode,\n    layout,\n    reverse,\n    minValue,\n    maxValue,\n\n    valueScale,\n    indexScale,\n\n    padding,\n    innerPadding,\n\n    axisTop,\n    axisRight,\n    axisBottom = canvasDefaultProps.axisBottom,\n    axisLeft = canvasDefaultProps.axisLeft,\n    enableGridX = canvasDefaultProps.enableGridX,\n    enableGridY = canvasDefaultProps.enableGridY,\n    gridXValues,\n    gridYValues,\n\n    layers = canvasDefaultProps.layers as BarCanvasLayer<RawDatum>[],\n    renderBar = (\n        ctx,\n        {\n            bar: { color, height, width, x, y },\n\n            borderColor,\n            borderRadius,\n            borderWidth,\n            label,\n            labelColor,\n            shouldRenderLabel,\n        }\n    ) => {\n        ctx.fillStyle = color\n\n        if (borderWidth > 0) {\n            ctx.strokeStyle = borderColor\n            ctx.lineWidth = borderWidth\n        }\n\n        ctx.beginPath()\n\n        if (borderRadius > 0) {\n            const radius = Math.min(borderRadius, height)\n\n            ctx.moveTo(x + radius, y)\n            ctx.lineTo(x + width - radius, y)\n            ctx.quadraticCurveTo(x + width, y, x + width, y + radius)\n            ctx.lineTo(x + width, y + height - radius)\n            ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height)\n            ctx.lineTo(x + radius, y + height)\n            ctx.quadraticCurveTo(x, y + height, x, y + height - radius)\n            ctx.lineTo(x, y + radius)\n            ctx.quadraticCurveTo(x, y, x + radius, y)\n            ctx.closePath()\n        } else {\n            ctx.rect(x, y, width, height)\n        }\n\n        ctx.fill()\n\n        if (borderWidth > 0) {\n            ctx.stroke()\n        }\n\n        if (shouldRenderLabel) {\n            ctx.textBaseline = 'middle'\n            ctx.textAlign = 'center'\n            ctx.fillStyle = labelColor\n            ctx.fillText(label, x + width / 2, y + height / 2)\n        }\n    },\n\n    enableLabel,\n    label,\n    labelSkipWidth,\n    labelSkipHeight,\n    labelTextColor,\n\n    colorBy,\n    colors,\n    borderRadius = canvasDefaultProps.borderRadius,\n    borderWidth = canvasDefaultProps.borderWidth,\n    borderColor,\n\n    annotations = canvasDefaultProps.annotations,\n\n    legendLabel,\n    tooltipLabel,\n\n    valueFormat,\n\n    isInteractive = canvasDefaultProps.isInteractive,\n    tooltip = canvasDefaultProps.tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n\n    legends,\n\n    pixelRatio = canvasDefaultProps.pixelRatio,\n\n    canvasRef,\n}: InnerBarCanvasProps<RawDatum>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n\n    const theme = useTheme()\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        bars,\n        barsWithValue,\n        xScale,\n        yScale,\n        getLabel,\n        getTooltipLabel,\n        getBorderColor,\n        getLabelColor,\n        shouldRenderBarLabel,\n        legendsWithData,\n    } = useBar<RawDatum>({\n        indexBy,\n        label,\n        tooltipLabel,\n        valueFormat,\n        colors,\n        colorBy,\n        borderColor,\n        labelTextColor,\n        groupMode,\n        layout,\n        reverse,\n        data,\n        keys,\n        minValue,\n        maxValue,\n        margin,\n        width: innerWidth,\n        height: innerHeight,\n        padding,\n        innerPadding,\n        valueScale,\n        indexScale,\n        enableLabel,\n        labelSkipWidth,\n        labelSkipHeight,\n        legends,\n        legendLabel,\n    })\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    // Using any because return type isn't correct\n    const boundAnnotations: any = useComputedAnnotations({\n        annotations: useAnnotations({\n            data: bars,\n            annotations,\n            getPosition: node => ({\n                x: node.x,\n                y: node.y,\n            }),\n            getDimensions: ({ width, height }) => ({\n                width,\n                height,\n                size: Math.max(width, height),\n            }),\n        }),\n    })\n\n    // We use `any` here until we can figure out the best way to type xScale/yScale\n    const layerContext: any = useMemo(\n        () => ({\n            borderRadius,\n            borderWidth,\n            enableLabel,\n            isInteractive,\n            labelSkipWidth,\n            labelSkipHeight,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            getTooltipLabel,\n            tooltip,\n            margin,\n            innerWidth,\n            innerHeight,\n            width,\n            height,\n            bars,\n            xScale,\n            yScale,\n        }),\n        [\n            borderRadius,\n            borderWidth,\n            enableLabel,\n            getTooltipLabel,\n            height,\n            innerHeight,\n            innerWidth,\n            isInteractive,\n            labelSkipHeight,\n            labelSkipWidth,\n            margin,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            bars,\n            xScale,\n            yScale,\n            tooltip,\n            width,\n        ]\n    )\n\n    useEffect(() => {\n        const ctx = canvasEl.current?.getContext('2d')\n\n        if (!canvasEl.current) return\n        if (!ctx) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (layer === 'grid') {\n                if (isNumber(theme.grid.line.strokeWidth) && theme.grid.line.strokeWidth > 0) {\n                    ctx.lineWidth = theme.grid.line.strokeWidth\n                    ctx.strokeStyle = theme.grid.line.stroke as string\n\n                    if (enableGridX) {\n                        renderGridLinesToCanvas<string | number>(ctx, {\n                            width,\n                            height,\n                            scale: xScale as any,\n                            axis: 'x',\n                            values: gridXValues,\n                        })\n                    }\n\n                    if (enableGridY) {\n                        renderGridLinesToCanvas<string | number>(ctx, {\n                            width,\n                            height,\n                            scale: yScale as any,\n                            axis: 'y',\n                            values: gridYValues,\n                        })\n                    }\n                }\n            } else if (layer === 'axes') {\n                renderAxesToCanvas(ctx, {\n                    xScale: xScale as any,\n                    yScale: yScale as any,\n                    width: innerWidth,\n                    height: innerHeight,\n                    top: axisTop,\n                    right: axisRight,\n                    bottom: axisBottom,\n                    left: axisLeft,\n                    theme,\n                })\n            } else if (layer === 'bars') {\n                barsWithValue.forEach(bar => {\n                    renderBar(ctx, {\n                        bar,\n                        borderColor: getBorderColor(bar) as string,\n                        borderRadius,\n                        borderWidth,\n                        label: getLabel(bar.data),\n                        labelColor: getLabelColor(bar) as string,\n                        shouldRenderLabel: shouldRenderBarLabel(bar),\n                    })\n                })\n            } else if (layer === 'legends') {\n                legendsWithData.forEach(([legend, data]) => {\n                    renderLegendToCanvas(ctx, {\n                        ...legend,\n                        data,\n                        containerWidth: innerWidth,\n                        containerHeight: innerHeight,\n                        theme,\n                    })\n                })\n            } else if (layer === 'annotations') {\n                renderAnnotationsToCanvas(ctx, { annotations: boundAnnotations, theme })\n            } else if (typeof layer === 'function') {\n                layer(ctx, layerContext)\n            }\n        })\n\n        ctx.save()\n    }, [\n        axisBottom,\n        axisLeft,\n        axisRight,\n        axisTop,\n        barsWithValue,\n        borderRadius,\n        borderWidth,\n        boundAnnotations,\n        enableGridX,\n        enableGridY,\n        getBorderColor,\n        getLabel,\n        getLabelColor,\n        gridXValues,\n        gridYValues,\n        groupMode,\n        height,\n        innerHeight,\n        innerWidth,\n        layerContext,\n        layers,\n        layout,\n        legendsWithData,\n        margin.left,\n        margin.top,\n        outerHeight,\n        outerWidth,\n        pixelRatio,\n        renderBar,\n        xScale,\n        yScale,\n        reverse,\n        shouldRenderBarLabel,\n        theme,\n        width,\n    ])\n\n    const handleMouseHover = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar !== undefined) {\n                showTooltipFromEvent(\n                    createElement(tooltip, {\n                        ...bar.data,\n                        color: bar.color,\n                        label: bar.label,\n                        value: Number(bar.data.value),\n                    }),\n                    event\n                )\n\n                if (event.type === 'mouseenter') {\n                    onMouseEnter?.(bar.data, event)\n                }\n            } else {\n                hideTooltip()\n            }\n        },\n        [hideTooltip, margin, onMouseEnter, bars, showTooltipFromEvent, tooltip]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            hideTooltip()\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar) {\n                onMouseLeave?.(bar.data, event)\n            }\n        },\n        [hideTooltip, margin, onMouseLeave, bars]\n    )\n\n    const handleClick = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!bars) return\n            if (!canvasEl.current) return\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const bar = findBarUnderCursor(bars, margin, x, y)\n\n            if (bar !== undefined) {\n                onClick?.({ ...bar.data, color: bar.color }, event)\n            }\n        },\n        [margin, onClick, bars]\n    )\n\n    return (\n        <canvas\n            ref={canvas => {\n                canvasEl.current = canvas\n                if (canvasRef && 'current' in canvasRef) canvasRef.current = canvas\n            }}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nexport const BarCanvas = forwardRef(\n    <RawDatum extends BarDatum>(\n        { isInteractive, renderWrapper, theme, ...props }: BarCanvasProps<RawDatum>,\n        ref: ForwardedRef<HTMLCanvasElement>\n    ) => (\n        <Container {...{ isInteractive, renderWrapper, theme }} animate={false}>\n            <InnerBarCanvas<RawDatum> {...props} canvasRef={ref} />\n        </Container>\n    )\n)\n","import { BarDatum, BarCanvasProps } from './types'\nimport { BarCanvas } from './BarCanvas'\nimport { ForwardedRef, forwardRef } from 'react'\nimport { ResponsiveWrapper } from '@nivo/core'\n\nexport const ResponsiveBarCanvas = forwardRef(function ResponsiveBarCanvas<\n    RawDatum extends BarDatum\n>(props: Omit<BarCanvasProps<RawDatum>, 'height' | 'width'>, ref: ForwardedRef<HTMLCanvasElement>) {\n    return (\n        <ResponsiveWrapper>\n            {({ width, height }) => (\n                <BarCanvas\n                    width={width}\n                    height={height}\n                    {...(props as Omit<BarCanvasProps<BarDatum>, 'height' | 'width'>)}\n                    ref={ref}\n                />\n            )}\n        </ResponsiveWrapper>\n    )\n})\n"],"names":["slice","Array","prototype","stackValue","d","key","N","U","$","_","indexBy","keys","groupMode","layout","reverse","minValue","maxValue","valueScale","type","indexScale","round","padding","innerPadding","axisBottom","axisLeft","enableGridX","enableGridY","enableLabel","label","labelSkipWidth","labelSkipHeight","labelTextColor","from","theme","colorBy","colors","scheme","borderRadius","borderWidth","borderColor","isInteractive","tooltip","e","a","color","i","t","K","Y","id","value","formattedValue","enableChip","tooltipLabel","indexValue","legends","initialHiddenIds","annotations","markers","ae","z","layers","barComponent","bar","data","n","r","style","l","o","u","height","s","labelColor","h","labelOpacity","g","labelX","v","labelY","f","transform","m","width","p","x","y","S","shouldRenderLabel","k","w","onClick","L","onMouseEnter","C","onMouseLeave","M","I","isFocusable","T","ariaLabel","R","ariaLabelledBy","P","ariaDescribedBy","F","b","X","D","showTooltipFromEvent","O","showTooltipAt","G","hideTooltip","A","V","W","j","B","q","J","Q","absX","absY","Z","c","H","children","E","Math","max","rx","ry","fill","strokeWidth","stroke","focusable","tabIndex","onMouseMove","onFocus","onBlur","textAnchor","dominantBaseline","fillOpacity","labels","text","pointerEvents","defs","animate","motionConfig","role","pixelRatio","window","devicePixelRatio","ie","all","map","min","te","reduce","ne","Object","re","Number","le","oe","de","ue","repeat","ce","se","formatValue","getColor","getIndex","getTooltipLabel","xScale","yScale","margin","forEach","domain","length","hidden","index","push","left","top","he","be","hiddenIds","filter","includes","concat","Boolean","apply","isFinite","bandwidth","bars","ge","ve","some","isArray","fe","stackedData","me","pe","constant","order","orderNone","offset","offsetNone","stack","oz","kz","this","arguments","sz","sij","ki","si","call","xe","direction","legendLabel","ye","valueFormat","ee","indexOf","Se","ke","we","Le","Ce","Ve","We","Be","find","Me","dataFrom","barsWithValue","getLabel","getBorderColor","getLabelColor","shouldRenderBarLabel","toggleSerie","legendsWithData","axisTop","axisRight","gridXValues","gridYValues","renderBar","fillStyle","strokeStyle","lineWidth","beginPath","moveTo","lineTo","quadraticCurveTo","closePath","rect","textBaseline","textAlign","fillText","canvasRef","Ie","innerWidth","Te","innerHeight","Re","outerWidth","Pe","outerHeight","He","Ee","Fe","Xe","Ye","De","Oe","Ge","Ae","je","qe","ze","Ke","Ne","Je","getPosition","getDimensions","size","Qe","current","getContext","scale","background","fillRect","translate","grid","line","axis","values","right","bottom","containerWidth","containerHeight","save","Ue","Ze","$e","ref","cursor","renderWrapper"],"sourceRoot":""}